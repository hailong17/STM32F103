
STM32F103RCT6_BUTTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000494  08000494  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000494  08000494  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000494  08000494  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000494  08000494  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000494  08000494  00010494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000498  08000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800049c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004a0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004a0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001098  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000052b  00000000  00000000  000210c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c8  00000000  00000000  000215f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000180  00000000  00000000  000217b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013cea  00000000  00000000  00021938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001b21  00000000  00000000  00035622  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000714d2  00000000  00000000  00037143  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a8615  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000055c  00000000  00000000  000a8690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000004 	.word	0x20000004
 8000200:	00000000 	.word	0x00000000
 8000204:	0800047c 	.word	0x0800047c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000008 	.word	0x20000008
 8000220:	0800047c 	.word	0x0800047c

08000224 <SystemClockInit>:
#include<stm32f1xx.h>

/******************************************************************/
void SystemClockInit(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	RCC->CR |= 1<<0; /* enable HSI clock */
 8000228:	4b14      	ldr	r3, [pc, #80]	; (800027c <SystemClockInit+0x58>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a13      	ldr	r2, [pc, #76]	; (800027c <SystemClockInit+0x58>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6013      	str	r3, [r2, #0]
	while((RCC->CR & (uint32_t)(1<<1)) == 0); /* Wait clock stable */
 8000234:	bf00      	nop
 8000236:	4b11      	ldr	r3, [pc, #68]	; (800027c <SystemClockInit+0x58>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f003 0302 	and.w	r3, r3, #2
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0f9      	beq.n	8000236 <SystemClockInit+0x12>
	RCC->APB2ENR |= (uint32_t)(1<<0); /* Alternate Function I/O clock enabled */
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <SystemClockInit+0x58>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a0d      	ldr	r2, [pc, #52]	; (800027c <SystemClockInit+0x58>)
 8000248:	f043 0301 	orr.w	r3, r3, #1
 800024c:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (uint32_t)(1<<2);/* I/O port A clock enable */
 800024e:	4b0b      	ldr	r3, [pc, #44]	; (800027c <SystemClockInit+0x58>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	4a0a      	ldr	r2, [pc, #40]	; (800027c <SystemClockInit+0x58>)
 8000254:	f043 0304 	orr.w	r3, r3, #4
 8000258:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (uint32_t)(1<<3); /* I/O port B clock enabled */
 800025a:	4b08      	ldr	r3, [pc, #32]	; (800027c <SystemClockInit+0x58>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a07      	ldr	r2, [pc, #28]	; (800027c <SystemClockInit+0x58>)
 8000260:	f043 0308 	orr.w	r3, r3, #8
 8000264:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1UL<<4U); /* I/O port C clock enabled */
 8000266:	4b05      	ldr	r3, [pc, #20]	; (800027c <SystemClockInit+0x58>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a04      	ldr	r2, [pc, #16]	; (800027c <SystemClockInit+0x58>)
 800026c:	f043 0310 	orr.w	r3, r3, #16
 8000270:	6193      	str	r3, [r2, #24]
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40021000 	.word	0x40021000

08000280 <GPIO_Init>:
/******************************************************************/

void GPIO_Init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	 GPIOB->CRH = 0;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <GPIO_Init+0x50>)
 8000286:	2200      	movs	r2, #0
 8000288:	605a      	str	r2, [r3, #4]
	 GPIOB->CRH |= (uint32_t)(2<<10); /* Input with pull-up / pull-down */
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <GPIO_Init+0x50>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	4a10      	ldr	r2, [pc, #64]	; (80002d0 <GPIO_Init+0x50>)
 8000290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000294:	6053      	str	r3, [r2, #4]
	 GPIOB->CRH |= (uint32_t)(2<<14); /* Input with pull-up / pull-down */
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <GPIO_Init+0x50>)
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <GPIO_Init+0x50>)
 800029c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002a0:	6053      	str	r3, [r2, #4]
	 GPIOB->ODR |= 1UL<<10U; /* PULL UP */
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <GPIO_Init+0x50>)
 80002a4:	68db      	ldr	r3, [r3, #12]
 80002a6:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <GPIO_Init+0x50>)
 80002a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ac:	60d3      	str	r3, [r2, #12]
	 GPIOB->ODR |= 1UL<<11U; /* PULL UP */
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <GPIO_Init+0x50>)
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <GPIO_Init+0x50>)
 80002b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002b8:	60d3      	str	r3, [r2, #12]
	 /******************************************************************/
	 GPIOC->CRL |= 3UL<<0U;
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <GPIO_Init+0x54>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a05      	ldr	r2, [pc, #20]	; (80002d4 <GPIO_Init+0x54>)
 80002c0:	f043 0303 	orr.w	r3, r3, #3
 80002c4:	6013      	str	r3, [r2, #0]



}
 80002c6:	bf00      	nop
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	40011000 	.word	0x40011000

080002d8 <main>:
	while(time--);
}
/******************************************************************/

int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	uint32_t i=0;
 80002de:	2300      	movs	r3, #0
 80002e0:	607b      	str	r3, [r7, #4]
	uint8_t status;
	SystemClockInit();
 80002e2:	f7ff ff9f 	bl	8000224 <SystemClockInit>
	GPIO_Init();
 80002e6:	f7ff ffcb 	bl	8000280 <GPIO_Init>
	while(1)
	{
		if((GPIOB->IDR)&(1UL<<10) == 0) /* PB10 */
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <main+0x28>)
 80002ec:	689b      	ldr	r3, [r3, #8]
			}

			while((GPIOB->IDR)&(1UL<<10U) == 0);
			//GPIOC->ODR |= 1UL<<0U; /* ENABLE LED PC0 */
		}
		if((GPIOB->IDR)&(1UL<<11U) == 0) /* PB11 */
 80002ee:	4b04      	ldr	r3, [pc, #16]	; (8000300 <main+0x28>)
 80002f0:	689b      	ldr	r3, [r3, #8]
			while((GPIOB->IDR)&(1UL<<11U) == 0); /* wait PB11 = 0 */
			GPIOC->ODR |= 1UL<<2U; /* ENABLE LED PC1 */
		}
		else
		{
			GPIOC->ODR &= ~(1UL<<0U); /* DISABLE LED PC0 */
 80002f2:	4b04      	ldr	r3, [pc, #16]	; (8000304 <main+0x2c>)
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	4a03      	ldr	r2, [pc, #12]	; (8000304 <main+0x2c>)
 80002f8:	f023 0301 	bic.w	r3, r3, #1
 80002fc:	60d3      	str	r3, [r2, #12]
		if((GPIOB->IDR)&(1UL<<10) == 0) /* PB10 */
 80002fe:	e7f4      	b.n	80002ea <main+0x12>
 8000300:	40010c00 	.word	0x40010c00
 8000304:	40011000 	.word	0x40011000

08000308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr

08000314 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000318:	e7fe      	b.n	8000318 <HardFault_Handler+0x4>

0800031a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800031e:	e7fe      	b.n	800031e <MemManage_Handler+0x4>

08000320 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000324:	e7fe      	b.n	8000324 <BusFault_Handler+0x4>

08000326 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800032a:	e7fe      	b.n	800032a <UsageFault_Handler+0x4>

0800032c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr

08000338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr

08000344 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000354:	f000 f85c 	bl	8000410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}

0800035c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <SystemInit+0x5c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a14      	ldr	r2, [pc, #80]	; (80003b8 <SystemInit+0x5c>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <SystemInit+0x5c>)
 800036e:	685a      	ldr	r2, [r3, #4]
 8000370:	4911      	ldr	r1, [pc, #68]	; (80003b8 <SystemInit+0x5c>)
 8000372:	4b12      	ldr	r3, [pc, #72]	; (80003bc <SystemInit+0x60>)
 8000374:	4013      	ands	r3, r2
 8000376:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <SystemInit+0x5c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <SystemInit+0x5c>)
 800037e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000386:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <SystemInit+0x5c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <SystemInit+0x5c>)
 800038e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000392:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <SystemInit+0x5c>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <SystemInit+0x5c>)
 800039a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800039e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <SystemInit+0x5c>)
 80003a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003a6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <SystemInit+0x64>)
 80003aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003ae:	609a      	str	r2, [r3, #8]
#endif 
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000
 80003bc:	f8ff0000 	.word	0xf8ff0000
 80003c0:	e000ed00 	.word	0xe000ed00

080003c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80003c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80003c6:	e003      	b.n	80003d0 <LoopCopyDataInit>

080003c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80003c8:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80003ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80003cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80003ce:	3104      	adds	r1, #4

080003d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80003d0:	480a      	ldr	r0, [pc, #40]	; (80003fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80003d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80003d8:	d3f6      	bcc.n	80003c8 <CopyDataInit>
  ldr r2, =_sbss
 80003da:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80003dc:	e002      	b.n	80003e4 <LoopFillZerobss>

080003de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80003e0:	f842 3b04 	str.w	r3, [r2], #4

080003e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80003e4:	4b08      	ldr	r3, [pc, #32]	; (8000408 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80003e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80003e8:	d3f9      	bcc.n	80003de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003ea:	f7ff ffb7 	bl	800035c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ee:	f000 f821 	bl	8000434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f2:	f7ff ff71 	bl	80002d8 <main>
  bx lr
 80003f6:	4770      	bx	lr
  ldr r3, =_sidata
 80003f8:	0800049c 	.word	0x0800049c
  ldr r0, =_sdata
 80003fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000400:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000404:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000408:	20000024 	.word	0x20000024

0800040c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800040c:	e7fe      	b.n	800040c <ADC1_2_IRQHandler>
	...

08000410 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <HAL_IncTick+0x1c>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	461a      	mov	r2, r3
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <HAL_IncTick+0x20>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4413      	add	r3, r2
 8000420:	4a03      	ldr	r2, [pc, #12]	; (8000430 <HAL_IncTick+0x20>)
 8000422:	6013      	str	r3, [r2, #0]
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	20000000 	.word	0x20000000
 8000430:	20000020 	.word	0x20000020

08000434 <__libc_init_array>:
 8000434:	b570      	push	{r4, r5, r6, lr}
 8000436:	2500      	movs	r5, #0
 8000438:	4e0c      	ldr	r6, [pc, #48]	; (800046c <__libc_init_array+0x38>)
 800043a:	4c0d      	ldr	r4, [pc, #52]	; (8000470 <__libc_init_array+0x3c>)
 800043c:	1ba4      	subs	r4, r4, r6
 800043e:	10a4      	asrs	r4, r4, #2
 8000440:	42a5      	cmp	r5, r4
 8000442:	d109      	bne.n	8000458 <__libc_init_array+0x24>
 8000444:	f000 f81a 	bl	800047c <_init>
 8000448:	2500      	movs	r5, #0
 800044a:	4e0a      	ldr	r6, [pc, #40]	; (8000474 <__libc_init_array+0x40>)
 800044c:	4c0a      	ldr	r4, [pc, #40]	; (8000478 <__libc_init_array+0x44>)
 800044e:	1ba4      	subs	r4, r4, r6
 8000450:	10a4      	asrs	r4, r4, #2
 8000452:	42a5      	cmp	r5, r4
 8000454:	d105      	bne.n	8000462 <__libc_init_array+0x2e>
 8000456:	bd70      	pop	{r4, r5, r6, pc}
 8000458:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800045c:	4798      	blx	r3
 800045e:	3501      	adds	r5, #1
 8000460:	e7ee      	b.n	8000440 <__libc_init_array+0xc>
 8000462:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000466:	4798      	blx	r3
 8000468:	3501      	adds	r5, #1
 800046a:	e7f2      	b.n	8000452 <__libc_init_array+0x1e>
 800046c:	08000494 	.word	0x08000494
 8000470:	08000494 	.word	0x08000494
 8000474:	08000494 	.word	0x08000494
 8000478:	08000498 	.word	0x08000498

0800047c <_init>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr

08000488 <_fini>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr
