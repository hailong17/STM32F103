
STM32F103RCT6_Quet_Led7_thanh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000748  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800092c  0800092c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800092c  0800092c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800092c  0800092c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800092c  0800092c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800092c  0800092c  0001092c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000930  08000930  00010930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000018  0800094c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  0800094c  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000242e  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009b5  00000000  00000000  0002246f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000310  00000000  00000000  00022e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002a8  00000000  00000000  00023138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014014  00000000  00000000  000233e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002a70  00000000  00000000  000373f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000718ff  00000000  00000000  00039e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ab763  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a64  00000000  00000000  000ab7e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000018 	.word	0x20000018
 8000200:	00000000 	.word	0x00000000
 8000204:	08000914 	.word	0x08000914

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000001c 	.word	0x2000001c
 8000220:	08000914 	.word	0x08000914

08000224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	2b00      	cmp	r3, #0
 8000234:	db0b      	blt.n	800024e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	f003 021f 	and.w	r2, r3, #31
 800023c:	4906      	ldr	r1, [pc, #24]	; (8000258 <__NVIC_EnableIRQ+0x34>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	095b      	lsrs	r3, r3, #5
 8000244:	2001      	movs	r0, #1
 8000246:	fa00 f202 	lsl.w	r2, r0, r2
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	e000e100 	.word	0xe000e100

0800025c <main>:
void TIM6_Init(void);
void HC595_Write(uint8_t data);
void HC595_Out(void);

int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000260:	f000 f9f8 	bl	8000654 <HAL_Init>
	SystemClock_Config();
 8000264:	f000 f87e 	bl	8000364 <SystemClock_Config>
	MX_GPIO_Init();
 8000268:	f000 f89e 	bl	80003a8 <MX_GPIO_Init>
	TIM6_Init();
 800026c:	f000 f8c0 	bl	80003f0 <TIM6_Init>
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; AFIO->MAPR = AFIO_MAPR_SWJ_CFG_1;
 8000270:	4b35      	ldr	r3, [pc, #212]	; (8000348 <main+0xec>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a34      	ldr	r2, [pc, #208]	; (8000348 <main+0xec>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6193      	str	r3, [r2, #24]
 800027c:	4b33      	ldr	r3, [pc, #204]	; (800034c <main+0xf0>)
 800027e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000282:	605a      	str	r2, [r3, #4]
	while (1)
	{
		HC595_Write(Data[count/1000]);
 8000284:	4b32      	ldr	r3, [pc, #200]	; (8000350 <main+0xf4>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	4a32      	ldr	r2, [pc, #200]	; (8000354 <main+0xf8>)
 800028a:	fb82 1203 	smull	r1, r2, r2, r3
 800028e:	1192      	asrs	r2, r2, #6
 8000290:	17db      	asrs	r3, r3, #31
 8000292:	1ad3      	subs	r3, r2, r3
 8000294:	4a30      	ldr	r2, [pc, #192]	; (8000358 <main+0xfc>)
 8000296:	5cd3      	ldrb	r3, [r2, r3]
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f8db 	bl	8000454 <HC595_Write>
		HC595_Write(0x10);
 800029e:	2010      	movs	r0, #16
 80002a0:	f000 f8d8 	bl	8000454 <HC595_Write>
		HC595_Out();
 80002a4:	f000 f90c 	bl	80004c0 <HC595_Out>

		HC595_Write(Data[(count/100)%10]);
 80002a8:	4b29      	ldr	r3, [pc, #164]	; (8000350 <main+0xf4>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4a2b      	ldr	r2, [pc, #172]	; (800035c <main+0x100>)
 80002ae:	fba2 2303 	umull	r2, r3, r2, r3
 80002b2:	095b      	lsrs	r3, r3, #5
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4b2a      	ldr	r3, [pc, #168]	; (8000360 <main+0x104>)
 80002b8:	fba3 1302 	umull	r1, r3, r3, r2
 80002bc:	08d9      	lsrs	r1, r3, #3
 80002be:	460b      	mov	r3, r1
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	440b      	add	r3, r1
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b22      	ldr	r3, [pc, #136]	; (8000358 <main+0xfc>)
 80002ce:	5c9b      	ldrb	r3, [r3, r2]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f8bf 	bl	8000454 <HC595_Write>
		HC595_Write(0x20);
 80002d6:	2020      	movs	r0, #32
 80002d8:	f000 f8bc 	bl	8000454 <HC595_Write>
		HC595_Out();
 80002dc:	f000 f8f0 	bl	80004c0 <HC595_Out>

		HC595_Write(Data[(count/10)%100]);
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <main+0xf4>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	4a1e      	ldr	r2, [pc, #120]	; (8000360 <main+0x104>)
 80002e6:	fba2 2303 	umull	r2, r3, r2, r3
 80002ea:	08db      	lsrs	r3, r3, #3
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	4a1b      	ldr	r2, [pc, #108]	; (800035c <main+0x100>)
 80002f0:	fba2 1203 	umull	r1, r2, r2, r3
 80002f4:	0952      	lsrs	r2, r2, #5
 80002f6:	2164      	movs	r1, #100	; 0x64
 80002f8:	fb01 f202 	mul.w	r2, r1, r2
 80002fc:	1a9b      	subs	r3, r3, r2
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	461a      	mov	r2, r3
 8000302:	4b15      	ldr	r3, [pc, #84]	; (8000358 <main+0xfc>)
 8000304:	5c9b      	ldrb	r3, [r3, r2]
 8000306:	4618      	mov	r0, r3
 8000308:	f000 f8a4 	bl	8000454 <HC595_Write>
		HC595_Write(0x40);
 800030c:	2040      	movs	r0, #64	; 0x40
 800030e:	f000 f8a1 	bl	8000454 <HC595_Write>
		HC595_Out();
 8000312:	f000 f8d5 	bl	80004c0 <HC595_Out>

		HC595_Write(Data[count%1000]);
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <main+0xf4>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	461a      	mov	r2, r3
 800031c:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <main+0xf8>)
 800031e:	fb83 1302 	smull	r1, r3, r3, r2
 8000322:	1199      	asrs	r1, r3, #6
 8000324:	17d3      	asrs	r3, r2, #31
 8000326:	1acb      	subs	r3, r1, r3
 8000328:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800032c:	fb01 f303 	mul.w	r3, r1, r3
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	4a09      	ldr	r2, [pc, #36]	; (8000358 <main+0xfc>)
 8000334:	5cd3      	ldrb	r3, [r2, r3]
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f88c 	bl	8000454 <HC595_Write>
		HC595_Write(0x80);
 800033c:	2080      	movs	r0, #128	; 0x80
 800033e:	f000 f889 	bl	8000454 <HC595_Write>
		HC595_Out();
 8000342:	f000 f8bd 	bl	80004c0 <HC595_Out>
		HC595_Write(Data[count/1000]);
 8000346:	e79d      	b.n	8000284 <main+0x28>
 8000348:	40021000 	.word	0x40021000
 800034c:	40010000 	.word	0x40010000
 8000350:	20000034 	.word	0x20000034
 8000354:	10624dd3 	.word	0x10624dd3
 8000358:	20000000 	.word	0x20000000
 800035c:	51eb851f 	.word	0x51eb851f
 8000360:	cccccccd 	.word	0xcccccccd

08000364 <SystemClock_Config>:
	}

}

void SystemClock_Config(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
	RCC->CR|=(1ul<<0u);											// EN HSI
 8000368:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <SystemClock_Config+0x40>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <SystemClock_Config+0x40>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	6013      	str	r3, [r2, #0]
	while((RCC->CR & (1ul<<1u))==0);
 8000374:	bf00      	nop
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <SystemClock_Config+0x40>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f003 0302 	and.w	r3, r3, #2
 800037e:	2b00      	cmp	r3, #0
 8000380:	d0f9      	beq.n	8000376 <SystemClock_Config+0x12>
	RCC->APB2ENR |=(1ul<<3u)|(1ul<<0u);							// EN PB & AFIO
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <SystemClock_Config+0x40>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <SystemClock_Config+0x40>)
 8000388:	f043 0309 	orr.w	r3, r3, #9
 800038c:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |=(1ul<<4u);									// EN TIM6
 800038e:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SystemClock_Config+0x40>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <SystemClock_Config+0x40>)
 8000394:	f043 0310 	orr.w	r3, r3, #16
 8000398:	61d3      	str	r3, [r2, #28]
}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_GPIO_Init+0x40>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <MX_GPIO_Init+0x40>)
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_GPIO_Init+0x40>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0304 	and.w	r3, r3, #4
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
  GPIOB->CRL =0;
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_GPIO_Init+0x44>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
  GPIOB->CRL |= (3ul<<20u)|(3ul<<12u)|(3ul<<8u);				// OUTPUT with max speed
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <MX_GPIO_Init+0x44>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a06      	ldr	r2, [pc, #24]	; (80003ec <MX_GPIO_Init+0x44>)
 80003d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80003d6:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80003da:	6013      	str	r3, [r2, #0]

}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010c00 	.word	0x40010c00

080003f0 <TIM6_Init>:

void TIM6_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	TIM6->CR1 |=(1ul<<7u)|(1ul<<0u);							// buffered & EN CNT
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <TIM6_Init+0x44>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <TIM6_Init+0x44>)
 80003fa:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 80003fe:	6013      	str	r3, [r2, #0]
	TIM6->DIER|=(1ul<<0u);										// EN Interrupt
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <TIM6_Init+0x44>)
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	4a0b      	ldr	r2, [pc, #44]	; (8000434 <TIM6_Init+0x44>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	60d3      	str	r3, [r2, #12]
	TIM6->EGR|=(1ul<<0u);										// Re-initializes the timer counter
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <TIM6_Init+0x44>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	4a08      	ldr	r2, [pc, #32]	; (8000434 <TIM6_Init+0x44>)
 8000412:	f043 0301 	orr.w	r3, r3, #1
 8000416:	6153      	str	r3, [r2, #20]
	TIM6->PSC=7999;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <TIM6_Init+0x44>)
 800041a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800041e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR=999;
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <TIM6_Init+0x44>)
 8000422:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000426:	62da      	str	r2, [r3, #44]	; 0x2c

	__NVIC_EnableIRQ(TIM6_IRQn);
 8000428:	2036      	movs	r0, #54	; 0x36
 800042a:	f7ff fefb 	bl	8000224 <__NVIC_EnableIRQ>

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40001000 	.word	0x40001000

08000438 <TIM6_IRQHandler>:

void TIM6_IRQHandler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	count++;
 800043c:	4b04      	ldr	r3, [pc, #16]	; (8000450 <TIM6_IRQHandler+0x18>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	3301      	adds	r3, #1
 8000442:	b2da      	uxtb	r2, r3
 8000444:	4b02      	ldr	r3, [pc, #8]	; (8000450 <TIM6_IRQHandler+0x18>)
 8000446:	701a      	strb	r2, [r3, #0]
	if(count>9999)
	{
		count=0;
	}
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	20000034 	.word	0x20000034

08000454 <HC595_Write>:
void HC595_Write(uint8_t data)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
	for (int i=0;i<8;i++)
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	e023      	b.n	80004ac <HC595_Write+0x58>
	{
		if(((data<<i) & 0x80) == 0x80)
 8000464:	79fa      	ldrb	r2, [r7, #7]
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	fa02 f303 	lsl.w	r3, r2, r3
 800046c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000470:	2b00      	cmp	r3, #0
 8000472:	d006      	beq.n	8000482 <HC595_Write+0x2e>
		{
			HC595_CLK_PORT->BSRR|=HC595_DATA_PIN;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <HC595_Write+0x68>)
 8000476:	691b      	ldr	r3, [r3, #16]
 8000478:	4a10      	ldr	r2, [pc, #64]	; (80004bc <HC595_Write+0x68>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6113      	str	r3, [r2, #16]
 8000480:	e005      	b.n	800048e <HC595_Write+0x3a>
		}
		else
		{
			HC595_CLK_PORT->BRR|=HC595_DATA_PIN;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <HC595_Write+0x68>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <HC595_Write+0x68>)
 8000488:	f043 0320 	orr.w	r3, r3, #32
 800048c:	6153      	str	r3, [r2, #20]
		}
		HC595_CLK_PORT->BSRR|=HC595_CLK_PIN;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <HC595_Write+0x68>)
 8000490:	691b      	ldr	r3, [r3, #16]
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <HC595_Write+0x68>)
 8000494:	f043 0308 	orr.w	r3, r3, #8
 8000498:	6113      	str	r3, [r2, #16]
		HC595_CLK_PORT->BRR|=HC595_CLK_PIN;
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <HC595_Write+0x68>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a07      	ldr	r2, [pc, #28]	; (80004bc <HC595_Write+0x68>)
 80004a0:	f043 0308 	orr.w	r3, r3, #8
 80004a4:	6153      	str	r3, [r2, #20]
	for (int i=0;i<8;i++)
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	3301      	adds	r3, #1
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	2b07      	cmp	r3, #7
 80004b0:	ddd8      	ble.n	8000464 <HC595_Write+0x10>

	}

}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40010c00 	.word	0x40010c00

080004c0 <HC595_Out>:

void HC595_Out(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	HC595_LAT_PORT->BSRR|=HC595_LAT_PIN;
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <HC595_Out+0x24>)
 80004c6:	691b      	ldr	r3, [r3, #16]
 80004c8:	4a06      	ldr	r2, [pc, #24]	; (80004e4 <HC595_Out+0x24>)
 80004ca:	f043 0304 	orr.w	r3, r3, #4
 80004ce:	6113      	str	r3, [r2, #16]
	HC595_LAT_PORT->BRR|=HC595_LAT_PIN;
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <HC595_Out+0x24>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	4a03      	ldr	r2, [pc, #12]	; (80004e4 <HC595_Out+0x24>)
 80004d6:	f043 0304 	orr.w	r3, r3, #4
 80004da:	6153      	str	r3, [r2, #20]
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	40010c00 	.word	0x40010c00

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <HAL_MspInit+0x5c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a14      	ldr	r2, [pc, #80]	; (8000544 <HAL_MspInit+0x5c>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <HAL_MspInit+0x5c>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <HAL_MspInit+0x5c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <HAL_MspInit+0x5c>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_MspInit+0x5c>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <HAL_MspInit+0x60>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_MspInit+0x60>)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000
 8000548:	40010000 	.word	0x40010000

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <HardFault_Handler+0x4>

0800055e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <MemManage_Handler+0x4>

08000564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <BusFault_Handler+0x4>

0800056a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <UsageFault_Handler+0x4>

08000570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000598:	f000 f8a2 	bl	80006e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <SystemInit+0x5c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <SystemInit+0x5c>)
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <SystemInit+0x5c>)
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	4911      	ldr	r1, [pc, #68]	; (80005fc <SystemInit+0x5c>)
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <SystemInit+0x60>)
 80005b8:	4013      	ands	r3, r2
 80005ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <SystemInit+0x5c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <SystemInit+0x5c>)
 80005c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <SystemInit+0x5c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <SystemInit+0x5c>)
 80005d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SystemInit+0x5c>)
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <SystemInit+0x5c>)
 80005de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <SystemInit+0x5c>)
 80005e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <SystemInit+0x64>)
 80005ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000
 8000600:	f8ff0000 	.word	0xf8ff0000
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000608:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800060a:	e003      	b.n	8000614 <LoopCopyDataInit>

0800060c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800060e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000610:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000612:	3104      	adds	r1, #4

08000614 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000614:	480a      	ldr	r0, [pc, #40]	; (8000640 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000618:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800061a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800061c:	d3f6      	bcc.n	800060c <CopyDataInit>
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000620:	e002      	b.n	8000628 <LoopFillZerobss>

08000622 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000624:	f842 3b04 	str.w	r3, [r2], #4

08000628 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800062a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800062c:	d3f9      	bcc.n	8000622 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800062e:	f7ff ffb7 	bl	80005a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000632:	f000 f94b 	bl	80008cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000636:	f7ff fe11 	bl	800025c <main>
  bx lr
 800063a:	4770      	bx	lr
  ldr r3, =_sidata
 800063c:	08000934 	.word	0x08000934
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000644:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8000648:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 800064c:	2000003c 	.word	0x2000003c

08000650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC1_2_IRQHandler>
	...

08000654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_Init+0x28>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_Init+0x28>)
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f8fd 	bl	8000864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f808 	bl	8000680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000670:	f7ff ff3a 	bl	80004e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40022000 	.word	0x40022000

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x54>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x58>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	fbb3 f3f1 	udiv	r3, r3, r1
 800069a:	fbb2 f3f3 	udiv	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f907 	bl	80008b2 <HAL_SYSTICK_Config>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e00e      	b.n	80006cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	d80a      	bhi.n	80006ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b4:	2200      	movs	r2, #0
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	f04f 30ff 	mov.w	r0, #4294967295
 80006bc:	f000 f8dd 	bl	800087a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_InitTick+0x5c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000000c 	.word	0x2000000c
 80006d8:	20000014 	.word	0x20000014
 80006dc:	20000010 	.word	0x20000010

080006e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x1c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x20>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a03      	ldr	r2, [pc, #12]	; (8000700 <HAL_IncTick+0x20>)
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000014 	.word	0x20000014
 8000700:	20000038 	.word	0x20000038

08000704 <__NVIC_SetPriorityGrouping>:
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <__NVIC_SetPriorityGrouping+0x44>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000720:	4013      	ands	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800072c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000736:	4a04      	ldr	r2, [pc, #16]	; (8000748 <__NVIC_SetPriorityGrouping+0x44>)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	60d3      	str	r3, [r2, #12]
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_GetPriorityGrouping>:
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <__NVIC_GetPriorityGrouping+0x18>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	f003 0307 	and.w	r3, r3, #7
}
 800075a:	4618      	mov	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	db0a      	blt.n	8000792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	b2da      	uxtb	r2, r3
 8000780:	490c      	ldr	r1, [pc, #48]	; (80007b4 <__NVIC_SetPriority+0x4c>)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	0112      	lsls	r2, r2, #4
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	440b      	add	r3, r1
 800078c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000790:	e00a      	b.n	80007a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4908      	ldr	r1, [pc, #32]	; (80007b8 <__NVIC_SetPriority+0x50>)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f003 030f 	and.w	r3, r3, #15
 800079e:	3b04      	subs	r3, #4
 80007a0:	0112      	lsls	r2, r2, #4
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	440b      	add	r3, r1
 80007a6:	761a      	strb	r2, [r3, #24]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000e100 	.word	0xe000e100
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f1c3 0307 	rsb	r3, r3, #7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	bf28      	it	cs
 80007da:	2304      	movcs	r3, #4
 80007dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3304      	adds	r3, #4
 80007e2:	2b06      	cmp	r3, #6
 80007e4:	d902      	bls.n	80007ec <NVIC_EncodePriority+0x30>
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3b03      	subs	r3, #3
 80007ea:	e000      	b.n	80007ee <NVIC_EncodePriority+0x32>
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43da      	mvns	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	401a      	ands	r2, r3
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000804:	f04f 31ff 	mov.w	r1, #4294967295
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43d9      	mvns	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	4313      	orrs	r3, r2
         );
}
 8000816:	4618      	mov	r0, r3
 8000818:	3724      	adds	r7, #36	; 0x24
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000830:	d301      	bcc.n	8000836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000832:	2301      	movs	r3, #1
 8000834:	e00f      	b.n	8000856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <SysTick_Config+0x40>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800083e:	210f      	movs	r1, #15
 8000840:	f04f 30ff 	mov.w	r0, #4294967295
 8000844:	f7ff ff90 	bl	8000768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <SysTick_Config+0x40>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084e:	4b04      	ldr	r3, [pc, #16]	; (8000860 <SysTick_Config+0x40>)
 8000850:	2207      	movs	r2, #7
 8000852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	e000e010 	.word	0xe000e010

08000864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ff49 	bl	8000704 <__NVIC_SetPriorityGrouping>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800087a:	b580      	push	{r7, lr}
 800087c:	b086      	sub	sp, #24
 800087e:	af00      	add	r7, sp, #0
 8000880:	4603      	mov	r3, r0
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
 8000886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800088c:	f7ff ff5e 	bl	800074c <__NVIC_GetPriorityGrouping>
 8000890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	6978      	ldr	r0, [r7, #20]
 8000898:	f7ff ff90 	bl	80007bc <NVIC_EncodePriority>
 800089c:	4602      	mov	r2, r0
 800089e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a2:	4611      	mov	r1, r2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff5f 	bl	8000768 <__NVIC_SetPriority>
}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ffb0 	bl	8000820 <SysTick_Config>
 80008c0:	4603      	mov	r3, r0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <__libc_init_array>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	2500      	movs	r5, #0
 80008d0:	4e0c      	ldr	r6, [pc, #48]	; (8000904 <__libc_init_array+0x38>)
 80008d2:	4c0d      	ldr	r4, [pc, #52]	; (8000908 <__libc_init_array+0x3c>)
 80008d4:	1ba4      	subs	r4, r4, r6
 80008d6:	10a4      	asrs	r4, r4, #2
 80008d8:	42a5      	cmp	r5, r4
 80008da:	d109      	bne.n	80008f0 <__libc_init_array+0x24>
 80008dc:	f000 f81a 	bl	8000914 <_init>
 80008e0:	2500      	movs	r5, #0
 80008e2:	4e0a      	ldr	r6, [pc, #40]	; (800090c <__libc_init_array+0x40>)
 80008e4:	4c0a      	ldr	r4, [pc, #40]	; (8000910 <__libc_init_array+0x44>)
 80008e6:	1ba4      	subs	r4, r4, r6
 80008e8:	10a4      	asrs	r4, r4, #2
 80008ea:	42a5      	cmp	r5, r4
 80008ec:	d105      	bne.n	80008fa <__libc_init_array+0x2e>
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008f4:	4798      	blx	r3
 80008f6:	3501      	adds	r5, #1
 80008f8:	e7ee      	b.n	80008d8 <__libc_init_array+0xc>
 80008fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008fe:	4798      	blx	r3
 8000900:	3501      	adds	r5, #1
 8000902:	e7f2      	b.n	80008ea <__libc_init_array+0x1e>
 8000904:	0800092c 	.word	0x0800092c
 8000908:	0800092c 	.word	0x0800092c
 800090c:	0800092c 	.word	0x0800092c
 8000910:	08000930 	.word	0x08000930

08000914 <_init>:
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000916:	bf00      	nop
 8000918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800091a:	bc08      	pop	{r3}
 800091c:	469e      	mov	lr, r3
 800091e:	4770      	bx	lr

08000920 <_fini>:
 8000920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000922:	bf00      	nop
 8000924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000926:	bc08      	pop	{r3}
 8000928:	469e      	mov	lr, r3
 800092a:	4770      	bx	lr
