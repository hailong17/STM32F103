
STM32F103RCT6_TIMER_Msk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b8  080003b8  000103b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003bc  080003bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003c0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003c4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003c4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001045  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004d3  00000000  00000000  00021072  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d0  00000000  00000000  00021548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000188  00000000  00000000  00021718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013d56  00000000  00000000  000218a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001b1f  00000000  00000000  000355f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071770  00000000  00000000  00037115  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a8885  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000056c  00000000  00000000  000a8900  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000004 	.word	0x20000004
 8000200:	00000000 	.word	0x00000000
 8000204:	080003a0 	.word	0x080003a0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000008 	.word	0x20000008
 8000220:	080003a0 	.word	0x080003a0

08000224 <main>:
{

}

int main(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0

	while(1)
 8000228:	e7fe      	b.n	8000228 <main+0x4>

0800022a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800022a:	b480      	push	{r7}
 800022c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800022e:	bf00      	nop
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000236:	b480      	push	{r7}
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800023a:	e7fe      	b.n	800023a <HardFault_Handler+0x4>

0800023c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000240:	e7fe      	b.n	8000240 <MemManage_Handler+0x4>

08000242 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000242:	b480      	push	{r7}
 8000244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000246:	e7fe      	b.n	8000246 <BusFault_Handler+0x4>

08000248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800024c:	e7fe      	b.n	800024c <UsageFault_Handler+0x4>

0800024e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800024e:	b480      	push	{r7}
 8000250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000252:	bf00      	nop
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr

0800025a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800025a:	b480      	push	{r7}
 800025c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr

08000266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000266:	b480      	push	{r7}
 8000268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800026a:	bf00      	nop
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr

08000272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000272:	b580      	push	{r7, lr}
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000276:	f000 f85d 	bl	8000334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <SystemInit+0x5c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a14      	ldr	r2, [pc, #80]	; (80002dc <SystemInit+0x5c>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <SystemInit+0x5c>)
 8000292:	685a      	ldr	r2, [r3, #4]
 8000294:	4911      	ldr	r1, [pc, #68]	; (80002dc <SystemInit+0x5c>)
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <SystemInit+0x60>)
 8000298:	4013      	ands	r3, r2
 800029a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <SystemInit+0x5c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	; (80002dc <SystemInit+0x5c>)
 80002a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <SystemInit+0x5c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <SystemInit+0x5c>)
 80002b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <SystemInit+0x5c>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	4a07      	ldr	r2, [pc, #28]	; (80002dc <SystemInit+0x5c>)
 80002be:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80002c2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <SystemInit+0x5c>)
 80002c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80002ca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <SystemInit+0x64>)
 80002ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002d2:	609a      	str	r2, [r3, #8]
#endif 
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	40021000 	.word	0x40021000
 80002e0:	f8ff0000 	.word	0xf8ff0000
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80002e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80002ea:	e003      	b.n	80002f4 <LoopCopyDataInit>

080002ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80002ec:	4b0b      	ldr	r3, [pc, #44]	; (800031c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80002ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80002f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80002f2:	3104      	adds	r1, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80002f4:	480a      	ldr	r0, [pc, #40]	; (8000320 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80002f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80002fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80002fc:	d3f6      	bcc.n	80002ec <CopyDataInit>
  ldr r2, =_sbss
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000300:	e002      	b.n	8000308 <LoopFillZerobss>

08000302 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000304:	f842 3b04 	str.w	r3, [r2], #4

08000308 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800030a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800030c:	d3f9      	bcc.n	8000302 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800030e:	f7ff ffb7 	bl	8000280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000312:	f000 f821 	bl	8000358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000316:	f7ff ff85 	bl	8000224 <main>
  bx lr
 800031a:	4770      	bx	lr
  ldr r3, =_sidata
 800031c:	080003c0 	.word	0x080003c0
  ldr r0, =_sdata
 8000320:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000324:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000328:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 800032c:	20000024 	.word	0x20000024

08000330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC1_2_IRQHandler>
	...

08000334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <HAL_IncTick+0x1c>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	461a      	mov	r2, r3
 800033e:	4b05      	ldr	r3, [pc, #20]	; (8000354 <HAL_IncTick+0x20>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4413      	add	r3, r2
 8000344:	4a03      	ldr	r2, [pc, #12]	; (8000354 <HAL_IncTick+0x20>)
 8000346:	6013      	str	r3, [r2, #0]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	20000000 	.word	0x20000000
 8000354:	20000020 	.word	0x20000020

08000358 <__libc_init_array>:
 8000358:	b570      	push	{r4, r5, r6, lr}
 800035a:	2500      	movs	r5, #0
 800035c:	4e0c      	ldr	r6, [pc, #48]	; (8000390 <__libc_init_array+0x38>)
 800035e:	4c0d      	ldr	r4, [pc, #52]	; (8000394 <__libc_init_array+0x3c>)
 8000360:	1ba4      	subs	r4, r4, r6
 8000362:	10a4      	asrs	r4, r4, #2
 8000364:	42a5      	cmp	r5, r4
 8000366:	d109      	bne.n	800037c <__libc_init_array+0x24>
 8000368:	f000 f81a 	bl	80003a0 <_init>
 800036c:	2500      	movs	r5, #0
 800036e:	4e0a      	ldr	r6, [pc, #40]	; (8000398 <__libc_init_array+0x40>)
 8000370:	4c0a      	ldr	r4, [pc, #40]	; (800039c <__libc_init_array+0x44>)
 8000372:	1ba4      	subs	r4, r4, r6
 8000374:	10a4      	asrs	r4, r4, #2
 8000376:	42a5      	cmp	r5, r4
 8000378:	d105      	bne.n	8000386 <__libc_init_array+0x2e>
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000380:	4798      	blx	r3
 8000382:	3501      	adds	r5, #1
 8000384:	e7ee      	b.n	8000364 <__libc_init_array+0xc>
 8000386:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800038a:	4798      	blx	r3
 800038c:	3501      	adds	r5, #1
 800038e:	e7f2      	b.n	8000376 <__libc_init_array+0x1e>
 8000390:	080003b8 	.word	0x080003b8
 8000394:	080003b8 	.word	0x080003b8
 8000398:	080003b8 	.word	0x080003b8
 800039c:	080003bc 	.word	0x080003bc

080003a0 <_init>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr

080003ac <_fini>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr
