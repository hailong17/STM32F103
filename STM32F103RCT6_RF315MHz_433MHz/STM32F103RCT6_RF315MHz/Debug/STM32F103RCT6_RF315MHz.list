
STM32F103RCT6_RF315MHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020a8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800228c  0800228c  0001228c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002318  08002318  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002318  08002318  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002318  08002318  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002318  08002318  00012318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08002320  08002320  00012320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000070  08002398  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08002398  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a74c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000198a  00000000  00000000  0002a7e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a48  00000000  00000000  0002c170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a8  00000000  00000000  0002cbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b81b  00000000  00000000  0002d560  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000860e  00000000  00000000  00048d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097486  00000000  00000000  00051389  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e880f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb4  00000000  00000000  000e888c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002274 	.word	0x08002274

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002274 	.word	0x08002274

08000224 <_Z17_crc_ccitt_updateth>:
        }

        return crc;
    }
    uint16_t _crc_ccitt_update (uint16_t crc, uint8_t data)
    {
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	460a      	mov	r2, r1
 800022e:	80fb      	strh	r3, [r7, #6]
 8000230:	4613      	mov	r3, r2
 8000232:	717b      	strb	r3, [r7, #5]
        data ^= lo8 (crc);
 8000234:	88fb      	ldrh	r3, [r7, #6]
 8000236:	b25a      	sxtb	r2, r3
 8000238:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800023c:	4053      	eors	r3, r2
 800023e:	b25b      	sxtb	r3, r3
 8000240:	717b      	strb	r3, [r7, #5]
        data ^= data << 4;
 8000242:	797b      	ldrb	r3, [r7, #5]
 8000244:	011b      	lsls	r3, r3, #4
 8000246:	b25a      	sxtb	r2, r3
 8000248:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800024c:	4053      	eors	r3, r2
 800024e:	b25b      	sxtb	r3, r3
 8000250:	717b      	strb	r3, [r7, #5]

        return ((((uint16_t)data << 8) | hi8 (crc)) ^ (uint8_t)(data >> 4) 
 8000252:	797b      	ldrb	r3, [r7, #5]
 8000254:	021b      	lsls	r3, r3, #8
 8000256:	b21a      	sxth	r2, r3
 8000258:	88fb      	ldrh	r3, [r7, #6]
 800025a:	121b      	asrs	r3, r3, #8
 800025c:	b21b      	sxth	r3, r3
 800025e:	4313      	orrs	r3, r2
 8000260:	b21a      	sxth	r2, r3
 8000262:	797b      	ldrb	r3, [r7, #5]
 8000264:	111b      	asrs	r3, r3, #4
 8000266:	b2db      	uxtb	r3, r3
 8000268:	b21b      	sxth	r3, r3
 800026a:	4053      	eors	r3, r2
 800026c:	b21a      	sxth	r2, r3
                ^ ((uint16_t)data << 3));
 800026e:	797b      	ldrb	r3, [r7, #5]
 8000270:	00db      	lsls	r3, r3, #3
 8000272:	b21b      	sxth	r3, r3
 8000274:	4053      	eors	r3, r2
 8000276:	b21b      	sxth	r3, r3
 8000278:	b29b      	uxth	r3, r3
    }
 800027a:	4618      	mov	r0, r3
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <_ZN5RF315C1Ev>:
#include "RF315.h"
#include "crc16.h"
#include "string.h"
#include "main.h"

RF315::RF315() {
 8000284:	b5b0      	push	{r4, r5, r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	4a42      	ldr	r2, [pc, #264]	; (8000398 <_ZN5RF315C1Ev+0x114>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	330c      	adds	r3, #12
 8000296:	22d0      	movs	r2, #208	; 0xd0
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f001 ff94 	bl	80021c8 <memset>
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	222a      	movs	r2, #42	; 0x2a
 80002a4:	731a      	strb	r2, [r3, #12]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	222a      	movs	r2, #42	; 0x2a
 80002aa:	735a      	strb	r2, [r3, #13]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	222a      	movs	r2, #42	; 0x2a
 80002b0:	739a      	strb	r2, [r3, #14]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	222a      	movs	r2, #42	; 0x2a
 80002b6:	73da      	strb	r2, [r3, #15]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	222a      	movs	r2, #42	; 0x2a
 80002bc:	741a      	strb	r2, [r3, #16]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	222a      	movs	r2, #42	; 0x2a
 80002c2:	745a      	strb	r2, [r3, #17]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2238      	movs	r2, #56	; 0x38
 80002c8:	749a      	strb	r2, [r3, #18]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	222c      	movs	r2, #44	; 0x2c
 80002ce:	74da      	strb	r2, [r3, #19]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2200      	movs	r2, #0
 80002d4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2200      	movs	r2, #0
 80002ec:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2200      	movs	r2, #0
 80002f4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2200      	movs	r2, #0
 80002fc:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2200      	movs	r2, #0
 8000304:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	220c      	movs	r2, #12
 800030c:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2200      	movs	r2, #0
 8000314:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2200      	movs	r2, #0
 8000324:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2200      	movs	r2, #0
 800032c:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2200      	movs	r2, #0
 8000334:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2200      	movs	r2, #0
 800033c:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2200      	movs	r2, #0
 8000344:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2200      	movs	r2, #0
 800034c:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2200      	movs	r2, #0
 8000354:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2200      	movs	r2, #0
 800035c:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2200      	movs	r2, #0
 8000364:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2200      	movs	r2, #0
 800036c:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2200      	movs	r2, #0
 8000374:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a08      	ldr	r2, [pc, #32]	; (800039c <_ZN5RF315C1Ev+0x118>)
 800037c:	f203 1459 	addw	r4, r3, #345	; 0x159
 8000380:	4615      	mov	r5, r2
 8000382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000384:	6020      	str	r0, [r4, #0]
 8000386:	6061      	str	r1, [r4, #4]
 8000388:	60a2      	str	r2, [r4, #8]
 800038a:	60e3      	str	r3, [r4, #12]
	// TODO Auto-generated constructor stub

}
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4618      	mov	r0, r3
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bdb0      	pop	{r4, r5, r7, pc}
 8000396:	bf00      	nop
 8000398:	08002300 	.word	0x08002300
 800039c:	0800228c 	.word	0x0800228c

080003a0 <_ZN5RF315D1Ev>:

RF315::~RF315() {
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <_ZN5RF315D1Ev+0x1c>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4618      	mov	r0, r3
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	08002300 	.word	0x08002300

080003c0 <_ZN5RF315D0Ev>:
RF315::~RF315() {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
}
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f7ff ffe9 	bl	80003a0 <_ZN5RF315D1Ev>
 80003ce:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f001 fec8 	bl	8002168 <_ZdlPvj>
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4618      	mov	r0, r3
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <_ZN5RF31514vw_symbol_6to4Eh>:
    return crc;
}

// Convert a 6 bit encoded symbol into its 4 bit decoded equivalent
uint8_t RF315::vw_symbol_6to4(uint8_t symbol)
{
 80003e2:	b480      	push	{r7}
 80003e4:	b085      	sub	sp, #20
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	460b      	mov	r3, r1
 80003ec:	70fb      	strb	r3, [r7, #3]
    uint8_t i;

    // Linear search :-( Could have a 64 byte reverse lookup table?
    for (i = 0; i < 16; i++)
 80003ee:	2300      	movs	r3, #0
 80003f0:	73fb      	strb	r3, [r7, #15]
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
 80003f4:	2b0f      	cmp	r3, #15
 80003f6:	d80d      	bhi.n	8000414 <_ZN5RF31514vw_symbol_6to4Eh+0x32>
	if (symbol == symbols[i]) return i;
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8000402:	78fa      	ldrb	r2, [r7, #3]
 8000404:	429a      	cmp	r2, r3
 8000406:	d101      	bne.n	800040c <_ZN5RF31514vw_symbol_6to4Eh+0x2a>
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	e004      	b.n	8000416 <_ZN5RF31514vw_symbol_6to4Eh+0x34>
    for (i = 0; i < 16; i++)
 800040c:	7bfb      	ldrb	r3, [r7, #15]
 800040e:	3301      	adds	r3, #1
 8000410:	73fb      	strb	r3, [r7, #15]
 8000412:	e7ee      	b.n	80003f2 <_ZN5RF31514vw_symbol_6to4Eh+0x10>
    return 0; // Not found
 8000414:	2300      	movs	r3, #0
}
 8000416:	4618      	mov	r0, r3
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <_ZN5RF3156vw_pllEv>:
// Called 8 times per bit period
// Phase locked loop tries to synchronise with the transmitter so that bit
// transitions occur at about the time vw_rx_pll_ramp is 0;
// Then the average is computed over each bit period to deduce the bit value
void RF315::vw_pll()
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
    // Integrate each sample
    if (vw_rx_sample)vw_rx_integrator++;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 800042e:	2b00      	cmp	r3, #0
 8000430:	d007      	beq.n	8000442 <_ZN5RF3156vw_pllEv+0x22>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8000438:	3301      	adds	r3, #1
 800043a:	b2da      	uxtb	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
    if (vw_rx_sample != vw_rx_last_sample)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 800044e:	429a      	cmp	r2, r3
 8000450:	d016      	beq.n	8000480 <_ZN5RF3156vw_pllEv+0x60>
    {
		// Transition, advance if ramp > 80, retard if < 80
		vw_rx_pll_ramp += ((vw_rx_pll_ramp < VW_RAMP_TRANSITION) ? VW_RAMP_INC_RETARD : VW_RAMP_INC_ADVANCE);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	f892 20e8 	ldrb.w	r2, [r2, #232]	; 0xe8
 800045e:	2a4f      	cmp	r2, #79	; 0x4f
 8000460:	d801      	bhi.n	8000466 <_ZN5RF3156vw_pllEv+0x46>
 8000462:	220b      	movs	r2, #11
 8000464:	e000      	b.n	8000468 <_ZN5RF3156vw_pllEv+0x48>
 8000466:	221d      	movs	r2, #29
 8000468:	4413      	add	r3, r2
 800046a:	b2da      	uxtb	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
		vw_rx_last_sample = vw_rx_sample;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 800047e:	e007      	b.n	8000490 <_ZN5RF3156vw_pllEv+0x70>
    }
    else vw_rx_pll_ramp += VW_RAMP_INC;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000486:	3314      	adds	r3, #20
 8000488:	b2da      	uxtb	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
    if (vw_rx_pll_ramp >= VW_RX_RAMP_LEN)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000496:	2b9f      	cmp	r3, #159	; 0x9f
 8000498:	f240 80c6 	bls.w	8000628 <_ZN5RF3156vw_pllEv+0x208>
    {
		// Add this to the 12th bit of vw_rx_bits, LSB first
		// The last 12 bits are kept
		vw_rx_bits >>= 1;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 80004a2:	105b      	asrs	r3, r3, #1
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
		// Check the integrator to see how many samples in this cycle were high.
		// If < 5 out of 8, then its declared a 0 bit, else a 1;
		if (vw_rx_integrator >= 5)vw_rx_bits |= 0x800;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	d908      	bls.n	80004c8 <_ZN5RF3156vw_pllEv+0xa8>
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 80004bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

		vw_rx_pll_ramp -= VW_RX_RAMP_LEN;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80004ce:	3360      	adds	r3, #96	; 0x60
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
		vw_rx_integrator = 0; // Clear the integral for the next cycle
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2200      	movs	r2, #0
 80004dc:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9

		if (vw_rx_active)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	f000 8087 	beq.w	80005fa <_ZN5RF3156vw_pllEv+0x1da>
		{
			// We have the start symbol and now we are collecting message bits,
			// 6 per symbol, each which has to be decoded to 4 bits
			if (++vw_rx_bit_count >= 12)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80004f2:	3301      	adds	r3, #1
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8000502:	2b0b      	cmp	r3, #11
 8000504:	bf8c      	ite	hi
 8000506:	2301      	movhi	r3, #1
 8000508:	2300      	movls	r3, #0
 800050a:	b2db      	uxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	f000 808b 	beq.w	8000628 <_ZN5RF3156vw_pllEv+0x208>
			{
				// Have 12 bits of encoded message == 1 byte encoded
				// Decode as 2 lots of 6 bits into 2 lots of 4 bits
				// The 6 lsbits are the high nybble
				uint8_t this_byte = (vw_symbol_6to4(vw_rx_bits & 0x3f)) << 4 | vw_symbol_6to4(vw_rx_bits >> 6);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8000518:	b2db      	uxtb	r3, r3
 800051a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800051e:	b2db      	uxtb	r3, r3
 8000520:	4619      	mov	r1, r3
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f7ff ff5d 	bl	80003e2 <_ZN5RF31514vw_symbol_6to4Eh>
 8000528:	4603      	mov	r3, r0
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	b25c      	sxtb	r4, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8000534:	119b      	asrs	r3, r3, #6
 8000536:	b2db      	uxtb	r3, r3
 8000538:	4619      	mov	r1, r3
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff ff51 	bl	80003e2 <_ZN5RF31514vw_symbol_6to4Eh>
 8000540:	4603      	mov	r3, r0
 8000542:	b25b      	sxtb	r3, r3
 8000544:	4323      	orrs	r3, r4
 8000546:	b25b      	sxtb	r3, r3
 8000548:	73fb      	strb	r3, [r7, #15]

				// The first decoded byte is the byte count of the following message
				// the count includes the byte count and the 2 trailing FCS bytes
				// REVISIT: may also include the ACK flag at 0x40
				if (vw_rx_len == 0)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b00      	cmp	r3, #0
 8000554:	bf0c      	ite	eq
 8000556:	2301      	moveq	r3, #1
 8000558:	2300      	movne	r3, #0
 800055a:	b2db      	uxtb	r3, r3
 800055c:	2b00      	cmp	r3, #0
 800055e:	d01a      	beq.n	8000596 <_ZN5RF3156vw_pllEv+0x176>
				{
					// The first byte is the byte count
					// Check it for sensibility. It cant be less than 4, since it
					// includes the bytes count itself and the 2 byte FCS
					vw_rx_count = this_byte;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	7bfa      	ldrb	r2, [r7, #15]
 8000564:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
					if (vw_rx_count < 4 || vw_rx_count > VW_MAX_MESSAGE_LEN)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800056e:	2b03      	cmp	r3, #3
 8000570:	d904      	bls.n	800057c <_ZN5RF3156vw_pllEv+0x15c>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8000578:	2b64      	cmp	r3, #100	; 0x64
 800057a:	d90c      	bls.n	8000596 <_ZN5RF3156vw_pllEv+0x176>
					{
						// Stupid message length, drop the whole thing
						vw_rx_active = false;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2200      	movs	r2, #0
 8000580:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
						vw_rx_bad++;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 800058a:	3301      	adds	r3, #1
 800058c:	b2da      	uxtb	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
						return;
 8000594:	e048      	b.n	8000628 <_ZN5RF3156vw_pllEv+0x208>
					}
				}
				vw_rx_buf[vw_rx_len++] = this_byte;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800059c:	b2db      	uxtb	r3, r3
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	b2d1      	uxtb	r1, r2
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	f882 1156 	strb.w	r1, [r2, #342]	; 0x156
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	7bfa      	ldrb	r2, [r7, #15]
 80005b0:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1

				if (vw_rx_len >= vw_rx_count)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 80005c2:	429a      	cmp	r2, r3
 80005c4:	bf2c      	ite	cs
 80005c6:	2301      	movcs	r3, #1
 80005c8:	2300      	movcc	r3, #0
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00f      	beq.n	80005f0 <_ZN5RF3156vw_pllEv+0x1d0>
				{
					// Got all the bytes now
					vw_rx_active = false;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
					vw_rx_good++;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80005de:	3301      	adds	r3, #1
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
					vw_rx_done = true; // Better come get it before the next one starts
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				}
				vw_rx_bit_count = 0;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 80005f8:	e016      	b.n	8000628 <_ZN5RF3156vw_pllEv+0x208>
			}
		}
		// Not in a message, see if we have a start symbol
		else if (vw_rx_bits == 0xb38)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8000600:	f640 3238 	movw	r2, #2872	; 0xb38
 8000604:	4293      	cmp	r3, r2
 8000606:	d10f      	bne.n	8000628 <_ZN5RF3156vw_pllEv+0x208>
		{
			// Have start symbol, start collecting message
			vw_rx_active = true;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2201      	movs	r2, #1
 800060c:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
			vw_rx_bit_count = 0;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
			vw_rx_len = 0;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
			vw_rx_done = false; // Too bad if you missed the last message
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2200      	movs	r2, #0
 8000624:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
		}
    }
}
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	bd90      	pop	{r4, r7, pc}

0800062e <_ZN5RF31511vw_tx_startEv>:


// Start the transmitter, call when the tx buffer is ready to go and vw_tx_len is
// set to the total number of symbols to send
void RF315::vw_tx_start()
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
    vw_tx_index = 0;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    vw_tx_bit = 0;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
    vw_tx_sample = 0;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
    // Next tick interrupt will send the first bit
    vw_tx_enabled = true;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2201      	movs	r2, #1
 8000652:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <_ZN5RF31510vw_tx_stopEv>:

// Stop the transmitter, call when all bits are sent
void RF315::vw_tx_stop()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    // Disable the transmitter hardware
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2101      	movs	r1, #1
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <_ZN5RF31510vw_tx_stopEv+0x24>)
 800066e:	f000 fe9a 	bl	80013a6 <HAL_GPIO_WritePin>
    // No more ticks for the transmitter
    vw_tx_enabled = false;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2200      	movs	r2, #0
 8000676:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40011400 	.word	0x40011400

08000688 <_ZN5RF31510vw_wait_txEv>:
}

// Wait for the transmitter to become available
// Busy-wait loop until the ISR says the message has been sent
void RF315::vw_wait_tx()
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    while (vw_tx_enabled);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b00      	cmp	r3, #0
 800069a:	bf14      	ite	ne
 800069c:	2301      	movne	r3, #1
 800069e:	2300      	moveq	r3, #0
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d000      	beq.n	80006a8 <_ZN5RF31510vw_wait_txEv+0x20>
 80006a6:	e7f3      	b.n	8000690 <_ZN5RF31510vw_wait_txEv+0x8>
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <_ZN5RF3157vw_sendEPhh>:
// Wait until transmitter is available and encode and queue the message
// into vw_tx_buf
// The message is raw bytes, with no packet structure imposed
// It is transmitted preceded a byte count and followed by 2 FCS bytes
uint8_t RF315::vw_send(uint8_t* buf, uint8_t len)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b088      	sub	sp, #32
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	4613      	mov	r3, r2
 80006be:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    uint8_t index = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	77bb      	strb	r3, [r7, #30]
    uint16_t crc = 0xffff;
 80006c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c8:	83bb      	strh	r3, [r7, #28]
    uint8_t *p = vw_tx_buf + VW_HEADER_LEN; // start of the message area
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	330c      	adds	r3, #12
 80006ce:	3308      	adds	r3, #8
 80006d0:	61bb      	str	r3, [r7, #24]
    uint8_t count = len + 3; // Added byte count and FCS to get total number of bytes
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	3303      	adds	r3, #3
 80006d6:	75fb      	strb	r3, [r7, #23]
    if (len > VW_MAX_PAYLOAD)return false;
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b61      	cmp	r3, #97	; 0x61
 80006dc:	d901      	bls.n	80006e2 <_ZN5RF3157vw_sendEPhh+0x30>
 80006de:	2300      	movs	r3, #0
 80006e0:	e0a3      	b.n	800082a <_ZN5RF3157vw_sendEPhh+0x178>
    // Wait for transmitter to become available
    vw_wait_tx();
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f7ff ffd0 	bl	8000688 <_ZN5RF31510vw_wait_txEv>
    // Encode the message length
    crc = _crc_ccitt_update(crc, count);
 80006e8:	7dfa      	ldrb	r2, [r7, #23]
 80006ea:	8bbb      	ldrh	r3, [r7, #28]
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd98 	bl	8000224 <_Z17_crc_ccitt_updateth>
 80006f4:	4603      	mov	r3, r0
 80006f6:	83bb      	strh	r3, [r7, #28]
    p[index++] = symbols[count >> 4];
 80006f8:	7dfb      	ldrb	r3, [r7, #23]
 80006fa:	111a      	asrs	r2, r3, #4
 80006fc:	7fbb      	ldrb	r3, [r7, #30]
 80006fe:	1c59      	adds	r1, r3, #1
 8000700:	77b9      	strb	r1, [r7, #30]
 8000702:	4619      	mov	r1, r3
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	440b      	add	r3, r1
 8000708:	68f9      	ldr	r1, [r7, #12]
 800070a:	440a      	add	r2, r1
 800070c:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
 8000710:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[count & 0xf];
 8000712:	7dfb      	ldrb	r3, [r7, #23]
 8000714:	f003 020f 	and.w	r2, r3, #15
 8000718:	7fbb      	ldrb	r3, [r7, #30]
 800071a:	1c59      	adds	r1, r3, #1
 800071c:	77b9      	strb	r1, [r7, #30]
 800071e:	4619      	mov	r1, r3
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	440b      	add	r3, r1
 8000724:	68f9      	ldr	r1, [r7, #12]
 8000726:	440a      	add	r2, r1
 8000728:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
 800072c:	701a      	strb	r2, [r3, #0]
    // Encode the message into 6 bit symbols. Each byte is converted into
    // 2 6-bit symbols, high nybble first, low nybble second
    for (i = 0; i < len; i++)
 800072e:	2300      	movs	r3, #0
 8000730:	77fb      	strb	r3, [r7, #31]
 8000732:	7ffa      	ldrb	r2, [r7, #31]
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	429a      	cmp	r2, r3
 8000738:	d22f      	bcs.n	800079a <_ZN5RF3157vw_sendEPhh+0xe8>
    {
		crc = _crc_ccitt_update(crc, buf[i]);
 800073a:	7ffb      	ldrb	r3, [r7, #31]
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	4413      	add	r3, r2
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	8bbb      	ldrh	r3, [r7, #28]
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd6c 	bl	8000224 <_Z17_crc_ccitt_updateth>
 800074c:	4603      	mov	r3, r0
 800074e:	83bb      	strh	r3, [r7, #28]
		p[index++] = symbols[buf[i] >> 4];
 8000750:	7ffb      	ldrb	r3, [r7, #31]
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	4413      	add	r3, r2
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	111a      	asrs	r2, r3, #4
 800075a:	7fbb      	ldrb	r3, [r7, #30]
 800075c:	1c59      	adds	r1, r3, #1
 800075e:	77b9      	strb	r1, [r7, #30]
 8000760:	4619      	mov	r1, r3
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	440b      	add	r3, r1
 8000766:	68f9      	ldr	r1, [r7, #12]
 8000768:	440a      	add	r2, r1
 800076a:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
 800076e:	701a      	strb	r2, [r3, #0]
		p[index++] = symbols[buf[i] & 0xf];
 8000770:	7ffb      	ldrb	r3, [r7, #31]
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	4413      	add	r3, r2
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	f003 020f 	and.w	r2, r3, #15
 800077c:	7fbb      	ldrb	r3, [r7, #30]
 800077e:	1c59      	adds	r1, r3, #1
 8000780:	77b9      	strb	r1, [r7, #30]
 8000782:	4619      	mov	r1, r3
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	440b      	add	r3, r1
 8000788:	68f9      	ldr	r1, [r7, #12]
 800078a:	440a      	add	r2, r1
 800078c:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
 8000790:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++)
 8000792:	7ffb      	ldrb	r3, [r7, #31]
 8000794:	3301      	adds	r3, #1
 8000796:	77fb      	strb	r3, [r7, #31]
 8000798:	e7cb      	b.n	8000732 <_ZN5RF3157vw_sendEPhh+0x80>
    }

    // Append the fcs, 16 bits before encoding (4 6-bit symbols after encoding)
    // Caution: VW expects the _ones_complement_ of the CCITT CRC-16 as the FCS
    // VW sends FCS as low byte then hi byte
    crc = ~crc;
 800079a:	8bbb      	ldrh	r3, [r7, #28]
 800079c:	43db      	mvns	r3, r3
 800079e:	83bb      	strh	r3, [r7, #28]
    p[index++] = symbols[(crc >> 4)  & 0xf];
 80007a0:	8bbb      	ldrh	r3, [r7, #28]
 80007a2:	111b      	asrs	r3, r3, #4
 80007a4:	f003 020f 	and.w	r2, r3, #15
 80007a8:	7fbb      	ldrb	r3, [r7, #30]
 80007aa:	1c59      	adds	r1, r3, #1
 80007ac:	77b9      	strb	r1, [r7, #30]
 80007ae:	4619      	mov	r1, r3
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	440b      	add	r3, r1
 80007b4:	68f9      	ldr	r1, [r7, #12]
 80007b6:	440a      	add	r2, r1
 80007b8:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
 80007bc:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[crc & 0xf];
 80007be:	8bbb      	ldrh	r3, [r7, #28]
 80007c0:	f003 020f 	and.w	r2, r3, #15
 80007c4:	7fbb      	ldrb	r3, [r7, #30]
 80007c6:	1c59      	adds	r1, r3, #1
 80007c8:	77b9      	strb	r1, [r7, #30]
 80007ca:	4619      	mov	r1, r3
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	440b      	add	r3, r1
 80007d0:	68f9      	ldr	r1, [r7, #12]
 80007d2:	440a      	add	r2, r1
 80007d4:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
 80007d8:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[(crc >> 12) & 0xf];
 80007da:	8bbb      	ldrh	r3, [r7, #28]
 80007dc:	0b1b      	lsrs	r3, r3, #12
 80007de:	b29b      	uxth	r3, r3
 80007e0:	4619      	mov	r1, r3
 80007e2:	7fbb      	ldrb	r3, [r7, #30]
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	77ba      	strb	r2, [r7, #30]
 80007e8:	461a      	mov	r2, r3
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	4413      	add	r3, r2
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	440a      	add	r2, r1
 80007f2:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
 80007f6:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[(crc >> 8)  & 0xf];
 80007f8:	8bbb      	ldrh	r3, [r7, #28]
 80007fa:	121b      	asrs	r3, r3, #8
 80007fc:	f003 020f 	and.w	r2, r3, #15
 8000800:	7fbb      	ldrb	r3, [r7, #30]
 8000802:	1c59      	adds	r1, r3, #1
 8000804:	77b9      	strb	r1, [r7, #30]
 8000806:	4619      	mov	r1, r3
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	440b      	add	r3, r1
 800080c:	68f9      	ldr	r1, [r7, #12]
 800080e:	440a      	add	r2, r1
 8000810:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
 8000814:	701a      	strb	r2, [r3, #0]
    // Total number of 6-bit symbols to send
    vw_tx_len = index + VW_HEADER_LEN;
 8000816:	7fbb      	ldrb	r3, [r7, #30]
 8000818:	3308      	adds	r3, #8
 800081a:	b2da      	uxtb	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    // Start the low level interrupt handler sending symbols
    this->vw_tx_start();
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f7ff ff03 	bl	800062e <_ZN5RF31511vw_tx_startEv>
    return true;
 8000828:	2301      	movs	r3, #1
}
 800082a:	4618      	mov	r0, r3
 800082c:	3720      	adds	r7, #32
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <_ZN5RF31514vw_int_handlerEv>:

// This is the interrupt service routine called when timer1 overflows
// Its job is to output the next bit from the transmitter (every 8 calls)
// and to call the PLL code if the receiver is enabled
void RF315::vw_int_handler()
{
 8000832:	b590      	push	{r4, r7, lr}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
    if (vw_rx_enabled && !vw_tx_enabled)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8000840:	2b00      	cmp	r3, #0
 8000842:	d007      	beq.n	8000854 <_ZN5RF31514vw_int_handlerEv+0x22>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d101      	bne.n	8000854 <_ZN5RF31514vw_int_handlerEv+0x22>
 8000850:	2301      	movs	r3, #1
 8000852:	e000      	b.n	8000856 <_ZN5RF31514vw_int_handlerEv+0x24>
 8000854:	2300      	movs	r3, #0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d007      	beq.n	800086a <_ZN5RF31514vw_int_handlerEv+0x38>
    {
    	//vw_rx_sample = digitalRead(vw_rx_pin);
    	vw_rx_sample = Wire.rx_pin();
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	4798      	blx	r3
 8000860:	4603      	mov	r3, r0
 8000862:	461a      	mov	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
    }

    // Do transmitter stuff first to reduce transmitter bit jitter due
    // to variable receiver processing
    if (vw_tx_enabled && vw_tx_sample++ == 0)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00b      	beq.n	800088e <_ZN5RF31514vw_int_handlerEv+0x5c>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	b2d1      	uxtb	r1, r2
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	f882 10df 	strb.w	r1, [r2, #223]	; 0xdf
 8000886:	2b00      	cmp	r3, #0
 8000888:	d101      	bne.n	800088e <_ZN5RF31514vw_int_handlerEv+0x5c>
 800088a:	2301      	movs	r3, #1
 800088c:	e000      	b.n	8000890 <_ZN5RF31514vw_int_handlerEv+0x5e>
 800088e:	2300      	movs	r3, #0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d041      	beq.n	8000918 <_ZN5RF31514vw_int_handlerEv+0xe6>
    {
		// Send next bit
		// Symbols are sent LSB first
		// Finished sending the whole message? (after waiting one bit period
		// since the last bit)
		if (vw_tx_index >= vw_tx_len)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d30b      	bcc.n	80008bc <_ZN5RF31514vw_int_handlerEv+0x8a>
		{
			vw_tx_stop();
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff fedb 	bl	8000660 <_ZN5RF31510vw_tx_stopEv>
			vw_tx_msg_count++;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	; 0xe2
 80008b0:	3301      	adds	r3, #1
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
 80008ba:	e02d      	b.n	8000918 <_ZN5RF31514vw_int_handlerEv+0xe6>
		}
		else
		{
			//digitalWrite(vw_tx_pin, vw_tx_buf[vw_tx_index] & (1 << vw_tx_bit++));
			Wire.tx_pin(vw_tx_buf[vw_tx_index] & (1 << vw_tx_bit++));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80008c6:	4619      	mov	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	440b      	add	r3, r1
 80008cc:	7b1b      	ldrb	r3, [r3, #12]
 80008ce:	4618      	mov	r0, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 80008d6:	1c59      	adds	r1, r3, #1
 80008d8:	b2cc      	uxtb	r4, r1
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f881 40de 	strb.w	r4, [r1, #222]	; 0xde
 80008e0:	fa40 f303 	asr.w	r3, r0, r3
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	bf14      	ite	ne
 80008ec:	2301      	movne	r3, #1
 80008ee:	2300      	moveq	r3, #0
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	4790      	blx	r2
			if (vw_tx_bit >= 6)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 80008fc:	2b05      	cmp	r3, #5
 80008fe:	d90b      	bls.n	8000918 <_ZN5RF31514vw_int_handlerEv+0xe6>
			{
				vw_tx_bit = 0;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
				vw_tx_index++;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800090e:	3301      	adds	r3, #1
 8000910:	b2da      	uxtb	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
			}
		}
    }
    if (vw_tx_sample > 7)vw_tx_sample = 0;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 800091e:	2b07      	cmp	r3, #7
 8000920:	d903      	bls.n	800092a <_ZN5RF31514vw_int_handlerEv+0xf8>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
    if (vw_rx_enabled && !vw_tx_enabled)vw_pll();
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8000930:	2b00      	cmp	r3, #0
 8000932:	d007      	beq.n	8000944 <_ZN5RF31514vw_int_handlerEv+0x112>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d101      	bne.n	8000944 <_ZN5RF31514vw_int_handlerEv+0x112>
 8000940:	2301      	movs	r3, #1
 8000942:	e000      	b.n	8000946 <_ZN5RF31514vw_int_handlerEv+0x114>
 8000944:	2300      	movs	r3, #0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d002      	beq.n	8000950 <_ZN5RF31514vw_int_handlerEv+0x11e>
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fd68 	bl	8000420 <_ZN5RF3156vw_pllEv>
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	bd90      	pop	{r4, r7, pc}

08000958 <_ZN5RF31514reg_rf_tx_funcEPFvbE>:

void RF315::reg_rf_tx_func(void (*tx_func)(bool level))
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	Wire.tx_pin = tx_func;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	605a      	str	r2, [r3, #4]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr

08000972 <_ZN5RF31514reg_rf_rx_funcEPFbvE>:

void RF315::reg_rf_rx_func(bool (*rx_func)())
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
	Wire.rx_pin = rx_func;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	609a      	str	r2, [r3, #8]
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <TIM6_IRQHandler>:
#define msg "Transmit from STM32F103RCT6 to RF315/433MHz successes\r\n"

TIM_HandleTypeDef htim6;

void TIM6_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	rf.vw_int_handler();
 8000990:	4803      	ldr	r0, [pc, #12]	; (80009a0 <TIM6_IRQHandler+0x14>)
 8000992:	f7ff ff4e 	bl	8000832 <_ZN5RF31514vw_int_handlerEv>
	HAL_TIM_IRQHandler(&htim6);
 8000996:	4803      	ldr	r0, [pc, #12]	; (80009a4 <TIM6_IRQHandler+0x18>)
 8000998:	f001 f9b8 	bl	8001d0c <HAL_TIM_IRQHandler>
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000008c 	.word	0x2000008c
 80009a4:	200001f8 	.word	0x200001f8

080009a8 <_Z9rf_tx_pinb>:
static void MX_GPIO_Init(void);
static void MX_TIM6_Init(void);

/* Configuration GPIO_PIN_0 as RF output */
void rf_tx_pin(bool level)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	if(level)HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d005      	beq.n	80009c4 <_Z9rf_tx_pinb+0x1c>
 80009b8:	2201      	movs	r2, #1
 80009ba:	2101      	movs	r1, #1
 80009bc:	4806      	ldr	r0, [pc, #24]	; (80009d8 <_Z9rf_tx_pinb+0x30>)
 80009be:	f000 fcf2 	bl	80013a6 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
}
 80009c2:	e004      	b.n	80009ce <_Z9rf_tx_pinb+0x26>
	else HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2101      	movs	r1, #1
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <_Z9rf_tx_pinb+0x30>)
 80009ca:	f000 fcec 	bl	80013a6 <HAL_GPIO_WritePin>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40011400 	.word	0x40011400

080009dc <_Z9rf_rx_pinv>:

/* Configuration GPIO_PIN_1 as RF input */
bool rf_rx_pin(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == GPIO_PIN_SET)return true;
 80009e0:	2102      	movs	r1, #2
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <_Z9rf_rx_pinv+0x28>)
 80009e4:	f000 fcc8 	bl	8001378 <HAL_GPIO_ReadPin>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	bf0c      	ite	eq
 80009ee:	2301      	moveq	r3, #1
 80009f0:	2300      	movne	r3, #0
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <_Z9rf_rx_pinv+0x20>
 80009f8:	2301      	movs	r3, #1
 80009fa:	e000      	b.n	80009fe <_Z9rf_rx_pinv+0x22>
	else return false;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40011400 	.word	0x40011400

08000a08 <main>:

int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	HAL_Init();
 8000a0c:	f000 f9b8 	bl	8000d80 <HAL_Init>
	SystemClock_Config();
 8000a10:	f000 f826 	bl	8000a60 <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 8000a14:	f000 f886 	bl	8000b24 <_ZL12MX_GPIO_Initv>
	MX_TIM6_Init();
 8000a18:	f000 f858 	bl	8000acc <_ZL12MX_TIM6_Initv>
	HAL_TIM_Base_Start_IT(&htim6);
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <main+0x44>)
 8000a1e:	f001 f915 	bl	8001c4c <HAL_TIM_Base_Start_IT>
	rf.reg_rf_tx_func(rf_tx_pin);
 8000a22:	490b      	ldr	r1, [pc, #44]	; (8000a50 <main+0x48>)
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <main+0x4c>)
 8000a26:	f7ff ff97 	bl	8000958 <_ZN5RF31514reg_rf_tx_funcEPFvbE>
	rf.reg_rf_rx_func(rf_rx_pin);
 8000a2a:	490b      	ldr	r1, [pc, #44]	; (8000a58 <main+0x50>)
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <main+0x4c>)
 8000a2e:	f7ff ffa0 	bl	8000972 <_ZN5RF31514reg_rf_rx_funcEPFbvE>
	while (1)
	{
		rf.vw_send((uint8_t*)msg, sizeof(msg));
 8000a32:	2238      	movs	r2, #56	; 0x38
 8000a34:	4909      	ldr	r1, [pc, #36]	; (8000a5c <main+0x54>)
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <main+0x4c>)
 8000a38:	f7ff fe3b 	bl	80006b2 <_ZN5RF3157vw_sendEPhh>
		rf.vw_wait_tx();
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <main+0x4c>)
 8000a3e:	f7ff fe23 	bl	8000688 <_ZN5RF31510vw_wait_txEv>
		HAL_Delay(200);
 8000a42:	20c8      	movs	r0, #200	; 0xc8
 8000a44:	f000 f9fe 	bl	8000e44 <HAL_Delay>
		rf.vw_send((uint8_t*)msg, sizeof(msg));
 8000a48:	e7f3      	b.n	8000a32 <main+0x2a>
 8000a4a:	bf00      	nop
 8000a4c:	200001f8 	.word	0x200001f8
 8000a50:	080009a9 	.word	0x080009a9
 8000a54:	2000008c 	.word	0x2000008c
 8000a58:	080009dd 	.word	0x080009dd
 8000a5c:	080022ac 	.word	0x080022ac

08000a60 <_Z18SystemClock_Configv>:
	}
}

void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b090      	sub	sp, #64	; 0x40
 8000a64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	2228      	movs	r2, #40	; 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fbaa 	bl	80021c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a86:	2301      	movs	r3, #1
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a92:	2300      	movs	r3, #0
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000a96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fc99 	bl	80013d8 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	607b      	str	r3, [r7, #4]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]

	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 ff0a 	bl	80018d8 <HAL_RCC_ClockConfig>
}
 8000ac4:	bf00      	nop
 8000ac6:	3740      	adds	r7, #64	; 0x40
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_ZL12MX_TIM6_Initv>:

static void MX_TIM6_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
	htim6.Instance = TIM6;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <_ZL12MX_TIM6_Initv+0x50>)
 8000adc:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <_ZL12MX_TIM6_Initv+0x54>)
 8000ade:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <_ZL12MX_TIM6_Initv+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <_ZL12MX_TIM6_Initv+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 499;
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <_ZL12MX_TIM6_Initv+0x50>)
 8000aee:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000af2:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <_ZL12MX_TIM6_Initv+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim6);
 8000afa:	4808      	ldr	r0, [pc, #32]	; (8000b1c <_ZL12MX_TIM6_Initv+0x50>)
 8000afc:	f001 f856 	bl	8001bac <HAL_TIM_Base_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8000b08:	463b      	mov	r3, r7
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4803      	ldr	r0, [pc, #12]	; (8000b1c <_ZL12MX_TIM6_Initv+0x50>)
 8000b0e:	f001 faad 	bl	800206c <HAL_TIMEx_MasterConfigSynchronization>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200001f8 	.word	0x200001f8
 8000b20:	40001000 	.word	0x40001000

08000b24 <_ZL12MX_GPIO_Initv>:

static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b38:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <_ZL12MX_GPIO_Initv+0x90>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <_ZL12MX_GPIO_Initv+0x90>)
 8000b3e:	f043 0320 	orr.w	r3, r3, #32
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <_ZL12MX_GPIO_Initv+0x90>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0320 	and.w	r3, r3, #32
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <_ZL12MX_GPIO_Initv+0x90>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <_ZL12MX_GPIO_Initv+0x90>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <_ZL12MX_GPIO_Initv+0x90>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <_ZL12MX_GPIO_Initv+0x94>)
 8000b6e:	f000 fc1a 	bl	80013a6 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b72:	2301      	movs	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	4619      	mov	r1, r3
 8000b88:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <_ZL12MX_GPIO_Initv+0x94>)
 8000b8a:	f000 fa8b 	bl	80010a4 <HAL_GPIO_Init>
	__HAL_AFIO_REMAP_PD01_ENABLE();
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <_ZL12MX_GPIO_Initv+0x98>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	61fb      	str	r3, [r7, #28]
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b9a:	61fb      	str	r3, [r7, #28]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ba2:	61fb      	str	r3, [r7, #28]
 8000ba4:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <_ZL12MX_GPIO_Initv+0x98>)
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	6053      	str	r3, [r2, #4]
}
 8000baa:	bf00      	nop
 8000bac:	3720      	adds	r7, #32
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40011400 	.word	0x40011400
 8000bbc:	40010000 	.word	0x40010000

08000bc0 <_Z41__static_initialization_and_destruction_0ii>:

void Error_Handler(void)
{

}
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d107      	bne.n	8000be0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d102      	bne.n	8000be0 <_Z41__static_initialization_and_destruction_0ii+0x20>
RF315 rf;
 8000bda:	4809      	ldr	r0, [pc, #36]	; (8000c00 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000bdc:	f7ff fb52 	bl	8000284 <_ZN5RF315C1Ev>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d107      	bne.n	8000bf6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d102      	bne.n	8000bf6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000bf2:	f7ff fbd5 	bl	80003a0 <_ZN5RF315D1Ev>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000008c 	.word	0x2000008c

08000c04 <_GLOBAL__sub_I_rf>:
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff ffd7 	bl	8000bc0 <_Z41__static_initialization_and_destruction_0ii>
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <_GLOBAL__sub_D_rf>:
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff ffcf 	bl	8000bc0 <_Z41__static_initialization_and_destruction_0ii>
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6193      	str	r3, [r2, #24]
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	61d3      	str	r3, [r2, #28]
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_MspInit+0x60>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_MspInit+0x60>)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010000 	.word	0x40010000

08000c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_TIM_Base_MspInit+0x44>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d113      	bne.n	8000cc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_TIM_Base_MspInit+0x48>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <HAL_TIM_Base_MspInit+0x48>)
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_TIM_Base_MspInit+0x48>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2036      	movs	r0, #54	; 0x36
 8000cb8:	f000 f9bd 	bl	8001036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000cbc:	2036      	movs	r0, #54	; 0x36
 8000cbe:	f000 f9d6 	bl	800106e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40001000 	.word	0x40001000
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <HardFault_Handler+0x4>

08000ce6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <MemManage_Handler+0x4>

08000cec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <BusFault_Handler+0x4>

08000cf2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <UsageFault_Handler+0x4>

08000cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 f874 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d34:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d36:	e003      	b.n	8000d40 <LoopCopyDataInit>

08000d38 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d3a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d3c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d3e:	3104      	adds	r1, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d40:	480a      	ldr	r0, [pc, #40]	; (8000d6c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d44:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d46:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d48:	d3f6      	bcc.n	8000d38 <CopyDataInit>
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d4c:	e002      	b.n	8000d54 <LoopFillZerobss>

08000d4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d50:	f842 3b04 	str.w	r3, [r2], #4

08000d54 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d56:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d58:	d3f9      	bcc.n	8000d4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d5a:	f7ff ffe5 	bl	8000d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f001 fa07 	bl	8002170 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d62:	f7ff fe51 	bl	8000a08 <main>
  bx lr
 8000d66:	4770      	bx	lr
  ldr r3, =_sidata
 8000d68:	08002328 	.word	0x08002328
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d70:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000d74:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000d78:	20000248 	.word	0x20000248

08000d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_2_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_Init+0x28>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_Init+0x28>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f945 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 f808 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff ff42 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40022000 	.word	0x40022000

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f95d 	bl	800108a <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 f925 	bl	8001036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_IncTick+0x1c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_IncTick+0x20>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <HAL_IncTick+0x20>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000244 	.word	0x20000244

08000e30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <HAL_GetTick+0x10>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	20000244 	.word	0x20000244

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff fff0 	bl	8000e30 <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_Delay+0x40>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffe0 	bl	8000e30 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000008 	.word	0x20000008

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4906      	ldr	r1, [pc, #24]	; (8000f20 <__NVIC_EnableIRQ+0x34>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fec:	d301      	bcc.n	8000ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00f      	b.n	8001012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <SysTick_Config+0x40>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f7ff ff90 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <SysTick_Config+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <SysTick_Config+0x40>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff2d 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff42 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff90 	bl	8000f78 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5f 	bl	8000f24 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff35 	bl	8000eec <__NVIC_EnableIRQ>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffa2 	bl	8000fdc <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b08b      	sub	sp, #44	; 0x2c
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b6:	e133      	b.n	8001320 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010b8:	2201      	movs	r2, #1
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	f040 8122 	bne.w	800131a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b12      	cmp	r3, #18
 80010dc:	d034      	beq.n	8001148 <HAL_GPIO_Init+0xa4>
 80010de:	2b12      	cmp	r3, #18
 80010e0:	d80d      	bhi.n	80010fe <HAL_GPIO_Init+0x5a>
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d02b      	beq.n	800113e <HAL_GPIO_Init+0x9a>
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d804      	bhi.n	80010f4 <HAL_GPIO_Init+0x50>
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d031      	beq.n	8001152 <HAL_GPIO_Init+0xae>
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d01c      	beq.n	800112c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010f2:	e048      	b.n	8001186 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d043      	beq.n	8001180 <HAL_GPIO_Init+0xdc>
 80010f8:	2b11      	cmp	r3, #17
 80010fa:	d01b      	beq.n	8001134 <HAL_GPIO_Init+0x90>
          break;
 80010fc:	e043      	b.n	8001186 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010fe:	4a8f      	ldr	r2, [pc, #572]	; (800133c <HAL_GPIO_Init+0x298>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d026      	beq.n	8001152 <HAL_GPIO_Init+0xae>
 8001104:	4a8d      	ldr	r2, [pc, #564]	; (800133c <HAL_GPIO_Init+0x298>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d806      	bhi.n	8001118 <HAL_GPIO_Init+0x74>
 800110a:	4a8d      	ldr	r2, [pc, #564]	; (8001340 <HAL_GPIO_Init+0x29c>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d020      	beq.n	8001152 <HAL_GPIO_Init+0xae>
 8001110:	4a8c      	ldr	r2, [pc, #560]	; (8001344 <HAL_GPIO_Init+0x2a0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d01d      	beq.n	8001152 <HAL_GPIO_Init+0xae>
          break;
 8001116:	e036      	b.n	8001186 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001118:	4a8b      	ldr	r2, [pc, #556]	; (8001348 <HAL_GPIO_Init+0x2a4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d019      	beq.n	8001152 <HAL_GPIO_Init+0xae>
 800111e:	4a8b      	ldr	r2, [pc, #556]	; (800134c <HAL_GPIO_Init+0x2a8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d016      	beq.n	8001152 <HAL_GPIO_Init+0xae>
 8001124:	4a8a      	ldr	r2, [pc, #552]	; (8001350 <HAL_GPIO_Init+0x2ac>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0xae>
          break;
 800112a:	e02c      	b.n	8001186 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	623b      	str	r3, [r7, #32]
          break;
 8001132:	e028      	b.n	8001186 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	3304      	adds	r3, #4
 800113a:	623b      	str	r3, [r7, #32]
          break;
 800113c:	e023      	b.n	8001186 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	3308      	adds	r3, #8
 8001144:	623b      	str	r3, [r7, #32]
          break;
 8001146:	e01e      	b.n	8001186 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	330c      	adds	r3, #12
 800114e:	623b      	str	r3, [r7, #32]
          break;
 8001150:	e019      	b.n	8001186 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800115a:	2304      	movs	r3, #4
 800115c:	623b      	str	r3, [r7, #32]
          break;
 800115e:	e012      	b.n	8001186 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d105      	bne.n	8001174 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001168:	2308      	movs	r3, #8
 800116a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	611a      	str	r2, [r3, #16]
          break;
 8001172:	e008      	b.n	8001186 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001174:	2308      	movs	r3, #8
 8001176:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	615a      	str	r2, [r3, #20]
          break;
 800117e:	e002      	b.n	8001186 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
          break;
 8001184:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	2bff      	cmp	r3, #255	; 0xff
 800118a:	d801      	bhi.n	8001190 <HAL_GPIO_Init+0xec>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	e001      	b.n	8001194 <HAL_GPIO_Init+0xf0>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3304      	adds	r3, #4
 8001194:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	2bff      	cmp	r3, #255	; 0xff
 800119a:	d802      	bhi.n	80011a2 <HAL_GPIO_Init+0xfe>
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_Init+0x104>
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	3b08      	subs	r3, #8
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	210f      	movs	r1, #15
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	401a      	ands	r2, r3
 80011ba:	6a39      	ldr	r1, [r7, #32]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	431a      	orrs	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80a2 	beq.w	800131a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011d6:	4b5f      	ldr	r3, [pc, #380]	; (8001354 <HAL_GPIO_Init+0x2b0>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a5e      	ldr	r2, [pc, #376]	; (8001354 <HAL_GPIO_Init+0x2b0>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6193      	str	r3, [r2, #24]
 80011e2:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <HAL_GPIO_Init+0x2b0>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011ee:	4a5a      	ldr	r2, [pc, #360]	; (8001358 <HAL_GPIO_Init+0x2b4>)
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4013      	ands	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a51      	ldr	r2, [pc, #324]	; (800135c <HAL_GPIO_Init+0x2b8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01f      	beq.n	800125a <HAL_GPIO_Init+0x1b6>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a50      	ldr	r2, [pc, #320]	; (8001360 <HAL_GPIO_Init+0x2bc>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x1b2>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4f      	ldr	r2, [pc, #316]	; (8001364 <HAL_GPIO_Init+0x2c0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x1ae>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4e      	ldr	r2, [pc, #312]	; (8001368 <HAL_GPIO_Init+0x2c4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x1aa>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4d      	ldr	r2, [pc, #308]	; (800136c <HAL_GPIO_Init+0x2c8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x1a6>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4c      	ldr	r2, [pc, #304]	; (8001370 <HAL_GPIO_Init+0x2cc>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x1a2>
 8001242:	2305      	movs	r3, #5
 8001244:	e00a      	b.n	800125c <HAL_GPIO_Init+0x1b8>
 8001246:	2306      	movs	r3, #6
 8001248:	e008      	b.n	800125c <HAL_GPIO_Init+0x1b8>
 800124a:	2304      	movs	r3, #4
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x1b8>
 800124e:	2303      	movs	r3, #3
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x1b8>
 8001252:	2302      	movs	r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x1b8>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x1b8>
 800125a:	2300      	movs	r3, #0
 800125c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800125e:	f002 0203 	and.w	r2, r2, #3
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4093      	lsls	r3, r2
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800126c:	493a      	ldr	r1, [pc, #232]	; (8001358 <HAL_GPIO_Init+0x2b4>)
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001286:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	493a      	ldr	r1, [pc, #232]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	600b      	str	r3, [r1, #0]
 8001292:	e006      	b.n	80012a2 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001294:	4b37      	ldr	r3, [pc, #220]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	43db      	mvns	r3, r3
 800129c:	4935      	ldr	r1, [pc, #212]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 800129e:	4013      	ands	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012ae:	4b31      	ldr	r3, [pc, #196]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	4930      	ldr	r1, [pc, #192]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	604b      	str	r3, [r1, #4]
 80012ba:	e006      	b.n	80012ca <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	492b      	ldr	r1, [pc, #172]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	4926      	ldr	r1, [pc, #152]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	608b      	str	r3, [r1, #8]
 80012e2:	e006      	b.n	80012f2 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	4921      	ldr	r1, [pc, #132]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 8001300:	68da      	ldr	r2, [r3, #12]
 8001302:	491c      	ldr	r1, [pc, #112]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	60cb      	str	r3, [r1, #12]
 800130a:	e006      	b.n	800131a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	43db      	mvns	r3, r3
 8001314:	4917      	ldr	r1, [pc, #92]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 8001316:	4013      	ands	r3, r2
 8001318:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	3301      	adds	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	fa22 f303 	lsr.w	r3, r2, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	f47f aec4 	bne.w	80010b8 <HAL_GPIO_Init+0x14>
  }
}
 8001330:	bf00      	nop
 8001332:	372c      	adds	r7, #44	; 0x2c
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	10210000 	.word	0x10210000
 8001340:	10110000 	.word	0x10110000
 8001344:	10120000 	.word	0x10120000
 8001348:	10310000 	.word	0x10310000
 800134c:	10320000 	.word	0x10320000
 8001350:	10220000 	.word	0x10220000
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000
 800135c:	40010800 	.word	0x40010800
 8001360:	40010c00 	.word	0x40010c00
 8001364:	40011000 	.word	0x40011000
 8001368:	40011400 	.word	0x40011400
 800136c:	40011800 	.word	0x40011800
 8001370:	40011c00 	.word	0x40011c00
 8001374:	40010400 	.word	0x40010400

08001378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	887b      	ldrh	r3, [r7, #2]
 800138a:	4013      	ands	r3, r2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e001      	b.n	800139a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	807b      	strh	r3, [r7, #2]
 80013b2:	4613      	mov	r3, r2
 80013b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013b6:	787b      	ldrb	r3, [r7, #1]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013bc:	887a      	ldrh	r2, [r7, #2]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013c2:	e003      	b.n	80013cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	041a      	lsls	r2, r3, #16
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	611a      	str	r2, [r3, #16]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e26c      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8087 	beq.w	8001506 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013f8:	4b92      	ldr	r3, [pc, #584]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b04      	cmp	r3, #4
 8001402:	d00c      	beq.n	800141e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001404:	4b8f      	ldr	r3, [pc, #572]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	2b08      	cmp	r3, #8
 800140e:	d112      	bne.n	8001436 <HAL_RCC_OscConfig+0x5e>
 8001410:	4b8c      	ldr	r3, [pc, #560]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141c:	d10b      	bne.n	8001436 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141e:	4b89      	ldr	r3, [pc, #548]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d06c      	beq.n	8001504 <HAL_RCC_OscConfig+0x12c>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d168      	bne.n	8001504 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e246      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143e:	d106      	bne.n	800144e <HAL_RCC_OscConfig+0x76>
 8001440:	4b80      	ldr	r3, [pc, #512]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a7f      	ldr	r2, [pc, #508]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e02e      	b.n	80014ac <HAL_RCC_OscConfig+0xd4>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0x98>
 8001456:	4b7b      	ldr	r3, [pc, #492]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a7a      	ldr	r2, [pc, #488]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 800145c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b78      	ldr	r3, [pc, #480]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a77      	ldr	r2, [pc, #476]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e01d      	b.n	80014ac <HAL_RCC_OscConfig+0xd4>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0xbc>
 800147a:	4b72      	ldr	r3, [pc, #456]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a71      	ldr	r2, [pc, #452]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b6f      	ldr	r3, [pc, #444]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a6e      	ldr	r2, [pc, #440]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e00b      	b.n	80014ac <HAL_RCC_OscConfig+0xd4>
 8001494:	4b6b      	ldr	r3, [pc, #428]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a6a      	ldr	r2, [pc, #424]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 800149a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b68      	ldr	r3, [pc, #416]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a67      	ldr	r2, [pc, #412]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fcbc 	bl	8000e30 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fcb8 	bl	8000e30 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	; 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e1fa      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	4b5d      	ldr	r3, [pc, #372]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0xe4>
 80014da:	e014      	b.n	8001506 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fca8 	bl	8000e30 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fca4 	bl	8000e30 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e1e6      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f6:	4b53      	ldr	r3, [pc, #332]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x10c>
 8001502:	e000      	b.n	8001506 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d063      	beq.n	80015da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001512:	4b4c      	ldr	r3, [pc, #304]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00b      	beq.n	8001536 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800151e:	4b49      	ldr	r3, [pc, #292]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b08      	cmp	r3, #8
 8001528:	d11c      	bne.n	8001564 <HAL_RCC_OscConfig+0x18c>
 800152a:	4b46      	ldr	r3, [pc, #280]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d116      	bne.n	8001564 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	4b43      	ldr	r3, [pc, #268]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_RCC_OscConfig+0x176>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e1ba      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	4b3d      	ldr	r3, [pc, #244]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4939      	ldr	r1, [pc, #228]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	e03a      	b.n	80015da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d020      	beq.n	80015ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156c:	4b36      	ldr	r3, [pc, #216]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff fc5d 	bl	8000e30 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157a:	f7ff fc59 	bl	8000e30 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e19b      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158c:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4927      	ldr	r1, [pc, #156]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	600b      	str	r3, [r1, #0]
 80015ac:	e015      	b.n	80015da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <HAL_RCC_OscConfig+0x270>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fc3c 	bl	8000e30 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015bc:	f7ff fc38 	bl	8000e30 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e17a      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d03a      	beq.n	800165c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d019      	beq.n	8001622 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <HAL_RCC_OscConfig+0x274>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f4:	f7ff fc1c 	bl	8000e30 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fc:	f7ff fc18 	bl	8000e30 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e15a      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800161a:	2001      	movs	r0, #1
 800161c:	f000 faa8 	bl	8001b70 <RCC_Delay>
 8001620:	e01c      	b.n	800165c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_RCC_OscConfig+0x274>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff fc02 	bl	8000e30 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162e:	e00f      	b.n	8001650 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff fbfe 	bl	8000e30 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d908      	bls.n	8001650 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e140      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	42420000 	.word	0x42420000
 800164c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	4b9e      	ldr	r3, [pc, #632]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1e9      	bne.n	8001630 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80a6 	beq.w	80017b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166e:	4b97      	ldr	r3, [pc, #604]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10d      	bne.n	8001696 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	4b94      	ldr	r3, [pc, #592]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	4a93      	ldr	r2, [pc, #588]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	61d3      	str	r3, [r2, #28]
 8001686:	4b91      	ldr	r3, [pc, #580]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001692:	2301      	movs	r3, #1
 8001694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001696:	4b8e      	ldr	r3, [pc, #568]	; (80018d0 <HAL_RCC_OscConfig+0x4f8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d118      	bne.n	80016d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a2:	4b8b      	ldr	r3, [pc, #556]	; (80018d0 <HAL_RCC_OscConfig+0x4f8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a8a      	ldr	r2, [pc, #552]	; (80018d0 <HAL_RCC_OscConfig+0x4f8>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ae:	f7ff fbbf 	bl	8000e30 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b6:	f7ff fbbb 	bl	8000e30 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b64      	cmp	r3, #100	; 0x64
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0fd      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c8:	4b81      	ldr	r3, [pc, #516]	; (80018d0 <HAL_RCC_OscConfig+0x4f8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x312>
 80016dc:	4b7b      	ldr	r3, [pc, #492]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4a7a      	ldr	r2, [pc, #488]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6213      	str	r3, [r2, #32]
 80016e8:	e02d      	b.n	8001746 <HAL_RCC_OscConfig+0x36e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x334>
 80016f2:	4b76      	ldr	r3, [pc, #472]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4a75      	ldr	r2, [pc, #468]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	6213      	str	r3, [r2, #32]
 80016fe:	4b73      	ldr	r3, [pc, #460]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4a72      	ldr	r2, [pc, #456]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	6213      	str	r3, [r2, #32]
 800170a:	e01c      	b.n	8001746 <HAL_RCC_OscConfig+0x36e>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b05      	cmp	r3, #5
 8001712:	d10c      	bne.n	800172e <HAL_RCC_OscConfig+0x356>
 8001714:	4b6d      	ldr	r3, [pc, #436]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4a6c      	ldr	r2, [pc, #432]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6213      	str	r3, [r2, #32]
 8001720:	4b6a      	ldr	r3, [pc, #424]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4a69      	ldr	r2, [pc, #420]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6213      	str	r3, [r2, #32]
 800172c:	e00b      	b.n	8001746 <HAL_RCC_OscConfig+0x36e>
 800172e:	4b67      	ldr	r3, [pc, #412]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	4a66      	ldr	r2, [pc, #408]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	6213      	str	r3, [r2, #32]
 800173a:	4b64      	ldr	r3, [pc, #400]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	4a63      	ldr	r2, [pc, #396]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001740:	f023 0304 	bic.w	r3, r3, #4
 8001744:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d015      	beq.n	800177a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7ff fb6f 	bl	8000e30 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fb6b 	bl	8000e30 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	; 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0ab      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176c:	4b57      	ldr	r3, [pc, #348]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0ee      	beq.n	8001756 <HAL_RCC_OscConfig+0x37e>
 8001778:	e014      	b.n	80017a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177a:	f7ff fb59 	bl	8000e30 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff fb55 	bl	8000e30 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e095      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001798:	4b4c      	ldr	r3, [pc, #304]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ee      	bne.n	8001782 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d105      	bne.n	80017b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017aa:	4b48      	ldr	r3, [pc, #288]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a47      	ldr	r2, [pc, #284]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8081 	beq.w	80018c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c0:	4b42      	ldr	r3, [pc, #264]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d061      	beq.n	8001890 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d146      	bne.n	8001862 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d4:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <HAL_RCC_OscConfig+0x4fc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fb29 	bl	8000e30 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e2:	f7ff fb25 	bl	8000e30 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e067      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f4:	4b35      	ldr	r3, [pc, #212]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001808:	d108      	bne.n	800181c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800180a:	4b30      	ldr	r3, [pc, #192]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	492d      	ldr	r1, [pc, #180]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800181c:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a19      	ldr	r1, [r3, #32]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	430b      	orrs	r3, r1
 800182e:	4927      	ldr	r1, [pc, #156]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001834:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_RCC_OscConfig+0x4fc>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff faf9 	bl	8000e30 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff faf5 	bl	8000e30 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e037      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x46a>
 8001860:	e02f      	b.n	80018c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <HAL_RCC_OscConfig+0x4fc>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fae2 	bl	8000e30 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff fade 	bl	8000e30 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e020      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x498>
 800188e:	e018      	b.n	80018c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e013      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_RCC_OscConfig+0x4f4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40007000 	.word	0x40007000
 80018d4:	42420060 	.word	0x42420060

080018d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0d0      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018ec:	4b6a      	ldr	r3, [pc, #424]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d910      	bls.n	800191c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 0207 	bic.w	r2, r3, #7
 8001902:	4965      	ldr	r1, [pc, #404]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b63      	ldr	r3, [pc, #396]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0b8      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d020      	beq.n	800196a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001934:	4b59      	ldr	r3, [pc, #356]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4a58      	ldr	r2, [pc, #352]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800193e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4a52      	ldr	r2, [pc, #328]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001956:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001958:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	494d      	ldr	r1, [pc, #308]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d040      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d115      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e07f      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d107      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001996:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e073      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a6:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e06b      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019b6:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f023 0203 	bic.w	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4936      	ldr	r1, [pc, #216]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c8:	f7ff fa32 	bl	8000e30 <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d0:	f7ff fa2e 	bl	8000e30 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	; 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e053      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e6:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 020c 	and.w	r2, r3, #12
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d1eb      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019f8:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d210      	bcs.n	8001a28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 0207 	bic.w	r2, r3, #7
 8001a0e:	4922      	ldr	r1, [pc, #136]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e032      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	4916      	ldr	r1, [pc, #88]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	490e      	ldr	r1, [pc, #56]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a66:	f000 f821 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a78:	5cd3      	ldrb	r3, [r2, r3]
 8001a7a:	fa21 f303 	lsr.w	r3, r1, r3
 8001a7e:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <HAL_RCC_ClockConfig+0x1cc>)
 8001a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_RCC_ClockConfig+0x1d0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f990 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40022000 	.word	0x40022000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	08002308 	.word	0x08002308
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000004 	.word	0x20000004

08001aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aac:	b490      	push	{r4, r7}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ab4:	1d3c      	adds	r4, r7, #4
 8001ab6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ad6:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d002      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x40>
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d003      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x46>
 8001aea:	e02d      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aee:	623b      	str	r3, [r7, #32]
      break;
 8001af0:	e02d      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	0c9b      	lsrs	r3, r3, #18
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001afe:	4413      	add	r3, r2
 8001b00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d013      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0c5b      	lsrs	r3, r3, #17
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b1e:	4413      	add	r3, r2
 8001b20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b2a:	fb02 f203 	mul.w	r2, r2, r3
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
 8001b36:	e004      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	623b      	str	r3, [r7, #32]
      break;
 8001b46:	e002      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b4a:	623b      	str	r3, [r7, #32]
      break;
 8001b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc90      	pop	{r4, r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	080022e4 	.word	0x080022e4
 8001b60:	080022f4 	.word	0x080022f4
 8001b64:	40021000 	.word	0x40021000
 8001b68:	007a1200 	.word	0x007a1200
 8001b6c:	003d0900 	.word	0x003d0900

08001b70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <RCC_Delay+0x34>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <RCC_Delay+0x38>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	0a5b      	lsrs	r3, r3, #9
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b8c:	bf00      	nop
  }
  while (Delay --);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1e5a      	subs	r2, r3, #1
 8001b92:	60fa      	str	r2, [r7, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f9      	bne.n	8001b8c <RCC_Delay+0x1c>
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	10624dd3 	.word	0x10624dd3

08001bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e041      	b.n	8001c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d106      	bne.n	8001bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff f858 	bl	8000c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3304      	adds	r3, #4
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f000 f9c4 	bl	8001f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d001      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e044      	b.n	8001cee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <HAL_TIM_Base_Start_IT+0xac>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d018      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <HAL_TIM_Base_Start_IT+0xb0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d013      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c98:	d00e      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d009      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a16      	ldr	r2, [pc, #88]	; (8001d04 <HAL_TIM_Base_Start_IT+0xb8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d004      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x6c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <HAL_TIM_Base_Start_IT+0xbc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d111      	bne.n	8001cdc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d010      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cda:	e007      	b.n	8001cec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	40012c00 	.word	0x40012c00
 8001cfc:	40013400 	.word	0x40013400
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40000800 	.word	0x40000800
 8001d08:	40000c00 	.word	0x40000c00

08001d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d122      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d11b      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0202 	mvn.w	r2, #2
 8001d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8f6 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8e9 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f8f8 	bl	8001f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d122      	bne.n	8001dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d11b      	bne.n	8001dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0204 	mvn.w	r2, #4
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2202      	movs	r2, #2
 8001d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8cc 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8bf 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8ce 	bl	8001f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0208 	mvn.w	r2, #8
 8001de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2204      	movs	r2, #4
 8001de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8a2 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f895 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f8a4 	bl	8001f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d122      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b10      	cmp	r3, #16
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0210 	mvn.w	r2, #16
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2208      	movs	r2, #8
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f878 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f86b 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f87a 	bl	8001f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d10e      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d107      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0201 	mvn.w	r2, #1
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f846 	bl	8001f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	2b80      	cmp	r3, #128	; 0x80
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea8:	2b80      	cmp	r3, #128	; 0x80
 8001eaa:	d107      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f94d 	bl	8002156 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec6:	2b40      	cmp	r3, #64	; 0x40
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed4:	2b40      	cmp	r3, #64	; 0x40
 8001ed6:	d107      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f83e 	bl	8001f64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d10e      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d107      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0220 	mvn.w	r2, #32
 8001f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f918 	bl	8002144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
	...

08001f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a33      	ldr	r2, [pc, #204]	; (8002058 <TIM_Base_SetConfig+0xe0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d013      	beq.n	8001fb8 <TIM_Base_SetConfig+0x40>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a32      	ldr	r2, [pc, #200]	; (800205c <TIM_Base_SetConfig+0xe4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00f      	beq.n	8001fb8 <TIM_Base_SetConfig+0x40>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9e:	d00b      	beq.n	8001fb8 <TIM_Base_SetConfig+0x40>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a2f      	ldr	r2, [pc, #188]	; (8002060 <TIM_Base_SetConfig+0xe8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d007      	beq.n	8001fb8 <TIM_Base_SetConfig+0x40>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a2e      	ldr	r2, [pc, #184]	; (8002064 <TIM_Base_SetConfig+0xec>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d003      	beq.n	8001fb8 <TIM_Base_SetConfig+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a2d      	ldr	r2, [pc, #180]	; (8002068 <TIM_Base_SetConfig+0xf0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d108      	bne.n	8001fca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a22      	ldr	r2, [pc, #136]	; (8002058 <TIM_Base_SetConfig+0xe0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <TIM_Base_SetConfig+0x82>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <TIM_Base_SetConfig+0xe4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00f      	beq.n	8001ffa <TIM_Base_SetConfig+0x82>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe0:	d00b      	beq.n	8001ffa <TIM_Base_SetConfig+0x82>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <TIM_Base_SetConfig+0xe8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <TIM_Base_SetConfig+0x82>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <TIM_Base_SetConfig+0xec>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <TIM_Base_SetConfig+0x82>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <TIM_Base_SetConfig+0xf0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d108      	bne.n	800200c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4313      	orrs	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <TIM_Base_SetConfig+0xe0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d003      	beq.n	8002040 <TIM_Base_SetConfig+0xc8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <TIM_Base_SetConfig+0xe4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d103      	bne.n	8002048 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	615a      	str	r2, [r3, #20]
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	40012c00 	.word	0x40012c00
 800205c:	40013400 	.word	0x40013400
 8002060:	40000400 	.word	0x40000400
 8002064:	40000800 	.word	0x40000800
 8002068:	40000c00 	.word	0x40000c00

0800206c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002080:	2302      	movs	r3, #2
 8002082:	e050      	b.n	8002126 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d018      	beq.n	80020fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020da:	d00e      	beq.n	80020fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a15      	ldr	r2, [pc, #84]	; (8002138 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d009      	beq.n	80020fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a14      	ldr	r2, [pc, #80]	; (800213c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d004      	beq.n	80020fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a12      	ldr	r2, [pc, #72]	; (8002140 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d10c      	bne.n	8002114 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	4313      	orrs	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	40012c00 	.word	0x40012c00
 8002134:	40013400 	.word	0x40013400
 8002138:	40000400 	.word	0x40000400
 800213c:	40000800 	.word	0x40000800
 8002140:	40000c00 	.word	0x40000c00

08002144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <_ZdlPvj>:
 8002168:	f000 b800 	b.w	800216c <_ZdlPv>

0800216c <_ZdlPv>:
 800216c:	f000 b824 	b.w	80021b8 <free>

08002170 <__libc_init_array>:
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	2500      	movs	r5, #0
 8002174:	4e0c      	ldr	r6, [pc, #48]	; (80021a8 <__libc_init_array+0x38>)
 8002176:	4c0d      	ldr	r4, [pc, #52]	; (80021ac <__libc_init_array+0x3c>)
 8002178:	1ba4      	subs	r4, r4, r6
 800217a:	10a4      	asrs	r4, r4, #2
 800217c:	42a5      	cmp	r5, r4
 800217e:	d109      	bne.n	8002194 <__libc_init_array+0x24>
 8002180:	f000 f878 	bl	8002274 <_init>
 8002184:	2500      	movs	r5, #0
 8002186:	4e0a      	ldr	r6, [pc, #40]	; (80021b0 <__libc_init_array+0x40>)
 8002188:	4c0a      	ldr	r4, [pc, #40]	; (80021b4 <__libc_init_array+0x44>)
 800218a:	1ba4      	subs	r4, r4, r6
 800218c:	10a4      	asrs	r4, r4, #2
 800218e:	42a5      	cmp	r5, r4
 8002190:	d105      	bne.n	800219e <__libc_init_array+0x2e>
 8002192:	bd70      	pop	{r4, r5, r6, pc}
 8002194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002198:	4798      	blx	r3
 800219a:	3501      	adds	r5, #1
 800219c:	e7ee      	b.n	800217c <__libc_init_array+0xc>
 800219e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021a2:	4798      	blx	r3
 80021a4:	3501      	adds	r5, #1
 80021a6:	e7f2      	b.n	800218e <__libc_init_array+0x1e>
 80021a8:	08002318 	.word	0x08002318
 80021ac:	08002318 	.word	0x08002318
 80021b0:	08002318 	.word	0x08002318
 80021b4:	08002320 	.word	0x08002320

080021b8 <free>:
 80021b8:	4b02      	ldr	r3, [pc, #8]	; (80021c4 <free+0xc>)
 80021ba:	4601      	mov	r1, r0
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	f000 b80b 	b.w	80021d8 <_free_r>
 80021c2:	bf00      	nop
 80021c4:	2000000c 	.word	0x2000000c

080021c8 <memset>:
 80021c8:	4603      	mov	r3, r0
 80021ca:	4402      	add	r2, r0
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d100      	bne.n	80021d2 <memset+0xa>
 80021d0:	4770      	bx	lr
 80021d2:	f803 1b01 	strb.w	r1, [r3], #1
 80021d6:	e7f9      	b.n	80021cc <memset+0x4>

080021d8 <_free_r>:
 80021d8:	b538      	push	{r3, r4, r5, lr}
 80021da:	4605      	mov	r5, r0
 80021dc:	2900      	cmp	r1, #0
 80021de:	d043      	beq.n	8002268 <_free_r+0x90>
 80021e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021e4:	1f0c      	subs	r4, r1, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bfb8      	it	lt
 80021ea:	18e4      	addlt	r4, r4, r3
 80021ec:	f000 f840 	bl	8002270 <__malloc_lock>
 80021f0:	4a1e      	ldr	r2, [pc, #120]	; (800226c <_free_r+0x94>)
 80021f2:	6813      	ldr	r3, [r2, #0]
 80021f4:	4610      	mov	r0, r2
 80021f6:	b933      	cbnz	r3, 8002206 <_free_r+0x2e>
 80021f8:	6063      	str	r3, [r4, #4]
 80021fa:	6014      	str	r4, [r2, #0]
 80021fc:	4628      	mov	r0, r5
 80021fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002202:	f000 b836 	b.w	8002272 <__malloc_unlock>
 8002206:	42a3      	cmp	r3, r4
 8002208:	d90b      	bls.n	8002222 <_free_r+0x4a>
 800220a:	6821      	ldr	r1, [r4, #0]
 800220c:	1862      	adds	r2, r4, r1
 800220e:	4293      	cmp	r3, r2
 8002210:	bf01      	itttt	eq
 8002212:	681a      	ldreq	r2, [r3, #0]
 8002214:	685b      	ldreq	r3, [r3, #4]
 8002216:	1852      	addeq	r2, r2, r1
 8002218:	6022      	streq	r2, [r4, #0]
 800221a:	6063      	str	r3, [r4, #4]
 800221c:	6004      	str	r4, [r0, #0]
 800221e:	e7ed      	b.n	80021fc <_free_r+0x24>
 8002220:	4613      	mov	r3, r2
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	b10a      	cbz	r2, 800222a <_free_r+0x52>
 8002226:	42a2      	cmp	r2, r4
 8002228:	d9fa      	bls.n	8002220 <_free_r+0x48>
 800222a:	6819      	ldr	r1, [r3, #0]
 800222c:	1858      	adds	r0, r3, r1
 800222e:	42a0      	cmp	r0, r4
 8002230:	d10b      	bne.n	800224a <_free_r+0x72>
 8002232:	6820      	ldr	r0, [r4, #0]
 8002234:	4401      	add	r1, r0
 8002236:	1858      	adds	r0, r3, r1
 8002238:	4282      	cmp	r2, r0
 800223a:	6019      	str	r1, [r3, #0]
 800223c:	d1de      	bne.n	80021fc <_free_r+0x24>
 800223e:	6810      	ldr	r0, [r2, #0]
 8002240:	6852      	ldr	r2, [r2, #4]
 8002242:	4401      	add	r1, r0
 8002244:	6019      	str	r1, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	e7d8      	b.n	80021fc <_free_r+0x24>
 800224a:	d902      	bls.n	8002252 <_free_r+0x7a>
 800224c:	230c      	movs	r3, #12
 800224e:	602b      	str	r3, [r5, #0]
 8002250:	e7d4      	b.n	80021fc <_free_r+0x24>
 8002252:	6820      	ldr	r0, [r4, #0]
 8002254:	1821      	adds	r1, r4, r0
 8002256:	428a      	cmp	r2, r1
 8002258:	bf01      	itttt	eq
 800225a:	6811      	ldreq	r1, [r2, #0]
 800225c:	6852      	ldreq	r2, [r2, #4]
 800225e:	1809      	addeq	r1, r1, r0
 8002260:	6021      	streq	r1, [r4, #0]
 8002262:	6062      	str	r2, [r4, #4]
 8002264:	605c      	str	r4, [r3, #4]
 8002266:	e7c9      	b.n	80021fc <_free_r+0x24>
 8002268:	bd38      	pop	{r3, r4, r5, pc}
 800226a:	bf00      	nop
 800226c:	20000240 	.word	0x20000240

08002270 <__malloc_lock>:
 8002270:	4770      	bx	lr

08002272 <__malloc_unlock>:
 8002272:	4770      	bx	lr

08002274 <_init>:
 8002274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002276:	bf00      	nop
 8002278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800227a:	bc08      	pop	{r3}
 800227c:	469e      	mov	lr, r3
 800227e:	4770      	bx	lr

08002280 <_fini>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	bf00      	nop
 8002284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002286:	bc08      	pop	{r3}
 8002288:	469e      	mov	lr, r3
 800228a:	4770      	bx	lr
