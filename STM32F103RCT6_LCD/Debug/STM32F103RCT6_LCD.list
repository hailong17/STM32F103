
STM32F103RCT6_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041d4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004478  08004478  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004478  08004478  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004478  08004478  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004478  08004478  00014478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800447c  0800447c  0001447c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b0  20000010  08004490  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019c0  08004490  000219c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f1e  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028d9  00000000  00000000  00033f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001098  00000000  00000000  00036830  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  000378c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000166ce  00000000  00000000  00038828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cffd  00000000  00000000  0004eef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086558  00000000  00000000  0005bef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e244b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004480  00000000  00000000  000e24c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	080043ac 	.word	0x080043ac

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	080043ac 	.word	0x080043ac

08000230 <LCD_Init>:
#include "LCD.h"
void LCD_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	HAL_Delay(30);
 8000234:	201e      	movs	r0, #30
 8000236:	f000 fb1f 	bl	8000878 <HAL_Delay>

	LCD_Write(0,0x02);			// 4bit mode
 800023a:	2102      	movs	r1, #2
 800023c:	2000      	movs	r0, #0
 800023e:	f000 f817 	bl	8000270 <LCD_Write>
	LCD_Write(0,0x28);			// Init of 16x2 LCD in 4bit mode
 8000242:	2128      	movs	r1, #40	; 0x28
 8000244:	2000      	movs	r0, #0
 8000246:	f000 f813 	bl	8000270 <LCD_Write>
	LCD_Write(0,0x0C);			// Display ON cursor OFF
 800024a:	210c      	movs	r1, #12
 800024c:	2000      	movs	r0, #0
 800024e:	f000 f80f 	bl	8000270 <LCD_Write>
	LCD_Write(0,0x06);			// Auto Increment cursor
 8000252:	2106      	movs	r1, #6
 8000254:	2000      	movs	r0, #0
 8000256:	f000 f80b 	bl	8000270 <LCD_Write>
	LCD_Write(0,0x01);			// Clear display
 800025a:	2101      	movs	r1, #1
 800025c:	2000      	movs	r0, #0
 800025e:	f000 f807 	bl	8000270 <LCD_Write>
	LCD_Write(0,0x80);			// Cursor at home position
 8000262:	2180      	movs	r1, #128	; 0x80
 8000264:	2000      	movs	r0, #0
 8000266:	f000 f803 	bl	8000270 <LCD_Write>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <LCD_Write>:

void LCD_Write(uint8_t type, uint8_t data)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	460a      	mov	r2, r1
 800027a:	71fb      	strb	r3, [r7, #7]
 800027c:	4613      	mov	r3, r2
 800027e:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 8000280:	2002      	movs	r0, #2
 8000282:	f000 faf9 	bl	8000878 <HAL_Delay>
	if(type)
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d005      	beq.n	8000298 <LCD_Write+0x28>
	{
		PIN_HIGH(RS_PORT,RS_PIN);								// Write data
 800028c:	2201      	movs	r2, #1
 800028e:	2101      	movs	r1, #1
 8000290:	484f      	ldr	r0, [pc, #316]	; (80003d0 <LCD_Write+0x160>)
 8000292:	f000 fd5d 	bl	8000d50 <HAL_GPIO_WritePin>
 8000296:	e004      	b.n	80002a2 <LCD_Write+0x32>
	}
	else
		PIN_LOW(RS_PORT,RS_PIN);								// Write data
 8000298:	2200      	movs	r2, #0
 800029a:	2101      	movs	r1, #1
 800029c:	484c      	ldr	r0, [pc, #304]	; (80003d0 <LCD_Write+0x160>)
 800029e:	f000 fd57 	bl	8000d50 <HAL_GPIO_WritePin>

/* ____________________________Write 4bit high_____________________________________________ */

	if(data & 0x80)
 80002a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	da05      	bge.n	80002b6 <LCD_Write+0x46>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80002aa:	2201      	movs	r2, #1
 80002ac:	2110      	movs	r1, #16
 80002ae:	4849      	ldr	r0, [pc, #292]	; (80003d4 <LCD_Write+0x164>)
 80002b0:	f000 fd4e 	bl	8000d50 <HAL_GPIO_WritePin>
 80002b4:	e004      	b.n	80002c0 <LCD_Write+0x50>
	} else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2110      	movs	r1, #16
 80002ba:	4846      	ldr	r0, [pc, #280]	; (80003d4 <LCD_Write+0x164>)
 80002bc:	f000 fd48 	bl	8000d50 <HAL_GPIO_WritePin>
	}

	if(data & 0x40)
 80002c0:	79bb      	ldrb	r3, [r7, #6]
 80002c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d005      	beq.n	80002d6 <LCD_Write+0x66>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4841      	ldr	r0, [pc, #260]	; (80003d4 <LCD_Write+0x164>)
 80002d0:	f000 fd3e 	bl	8000d50 <HAL_GPIO_WritePin>
 80002d4:	e004      	b.n	80002e0 <LCD_Write+0x70>
	} else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2108      	movs	r1, #8
 80002da:	483e      	ldr	r0, [pc, #248]	; (80003d4 <LCD_Write+0x164>)
 80002dc:	f000 fd38 	bl	8000d50 <HAL_GPIO_WritePin>
	}

	if(data & 0x20)
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	f003 0320 	and.w	r3, r3, #32
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d005      	beq.n	80002f6 <LCD_Write+0x86>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2104      	movs	r1, #4
 80002ee:	4839      	ldr	r0, [pc, #228]	; (80003d4 <LCD_Write+0x164>)
 80002f0:	f000 fd2e 	bl	8000d50 <HAL_GPIO_WritePin>
 80002f4:	e004      	b.n	8000300 <LCD_Write+0x90>
	} else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2104      	movs	r1, #4
 80002fa:	4836      	ldr	r0, [pc, #216]	; (80003d4 <LCD_Write+0x164>)
 80002fc:	f000 fd28 	bl	8000d50 <HAL_GPIO_WritePin>
	}

	if(data & 0x10)
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	f003 0310 	and.w	r3, r3, #16
 8000306:	2b00      	cmp	r3, #0
 8000308:	d005      	beq.n	8000316 <LCD_Write+0xa6>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 800030a:	2201      	movs	r2, #1
 800030c:	2102      	movs	r1, #2
 800030e:	4831      	ldr	r0, [pc, #196]	; (80003d4 <LCD_Write+0x164>)
 8000310:	f000 fd1e 	bl	8000d50 <HAL_GPIO_WritePin>
 8000314:	e004      	b.n	8000320 <LCD_Write+0xb0>
	} else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000316:	2200      	movs	r2, #0
 8000318:	2102      	movs	r1, #2
 800031a:	482e      	ldr	r0, [pc, #184]	; (80003d4 <LCD_Write+0x164>)
 800031c:	f000 fd18 	bl	8000d50 <HAL_GPIO_WritePin>
	}

	PIN_HIGH(EN_PORT,EN_PIN);
 8000320:	2201      	movs	r2, #1
 8000322:	2102      	movs	r1, #2
 8000324:	482a      	ldr	r0, [pc, #168]	; (80003d0 <LCD_Write+0x160>)
 8000326:	f000 fd13 	bl	8000d50 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800032a:	2200      	movs	r2, #0
 800032c:	2102      	movs	r1, #2
 800032e:	4828      	ldr	r0, [pc, #160]	; (80003d0 <LCD_Write+0x160>)
 8000330:	f000 fd0e 	bl	8000d50 <HAL_GPIO_WritePin>

/* ____________________________Write 4bit low_____________________________________________ */

	if(data & 0x08)
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d005      	beq.n	800034a <LCD_Write+0xda>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 800033e:	2201      	movs	r2, #1
 8000340:	2110      	movs	r1, #16
 8000342:	4824      	ldr	r0, [pc, #144]	; (80003d4 <LCD_Write+0x164>)
 8000344:	f000 fd04 	bl	8000d50 <HAL_GPIO_WritePin>
 8000348:	e004      	b.n	8000354 <LCD_Write+0xe4>
	} else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 800034a:	2200      	movs	r2, #0
 800034c:	2110      	movs	r1, #16
 800034e:	4821      	ldr	r0, [pc, #132]	; (80003d4 <LCD_Write+0x164>)
 8000350:	f000 fcfe 	bl	8000d50 <HAL_GPIO_WritePin>
	}

	if(data & 0x04)
 8000354:	79bb      	ldrb	r3, [r7, #6]
 8000356:	f003 0304 	and.w	r3, r3, #4
 800035a:	2b00      	cmp	r3, #0
 800035c:	d005      	beq.n	800036a <LCD_Write+0xfa>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 800035e:	2201      	movs	r2, #1
 8000360:	2108      	movs	r1, #8
 8000362:	481c      	ldr	r0, [pc, #112]	; (80003d4 <LCD_Write+0x164>)
 8000364:	f000 fcf4 	bl	8000d50 <HAL_GPIO_WritePin>
 8000368:	e004      	b.n	8000374 <LCD_Write+0x104>
	} else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 800036a:	2200      	movs	r2, #0
 800036c:	2108      	movs	r1, #8
 800036e:	4819      	ldr	r0, [pc, #100]	; (80003d4 <LCD_Write+0x164>)
 8000370:	f000 fcee 	bl	8000d50 <HAL_GPIO_WritePin>
	}

	if(data & 0x02)
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	f003 0302 	and.w	r3, r3, #2
 800037a:	2b00      	cmp	r3, #0
 800037c:	d005      	beq.n	800038a <LCD_Write+0x11a>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800037e:	2201      	movs	r2, #1
 8000380:	2104      	movs	r1, #4
 8000382:	4814      	ldr	r0, [pc, #80]	; (80003d4 <LCD_Write+0x164>)
 8000384:	f000 fce4 	bl	8000d50 <HAL_GPIO_WritePin>
 8000388:	e004      	b.n	8000394 <LCD_Write+0x124>
	} else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 800038a:	2200      	movs	r2, #0
 800038c:	2104      	movs	r1, #4
 800038e:	4811      	ldr	r0, [pc, #68]	; (80003d4 <LCD_Write+0x164>)
 8000390:	f000 fcde 	bl	8000d50 <HAL_GPIO_WritePin>
	}

	if(data & 0x01)
 8000394:	79bb      	ldrb	r3, [r7, #6]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	2b00      	cmp	r3, #0
 800039c:	d005      	beq.n	80003aa <LCD_Write+0x13a>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 800039e:	2201      	movs	r2, #1
 80003a0:	2102      	movs	r1, #2
 80003a2:	480c      	ldr	r0, [pc, #48]	; (80003d4 <LCD_Write+0x164>)
 80003a4:	f000 fcd4 	bl	8000d50 <HAL_GPIO_WritePin>
 80003a8:	e004      	b.n	80003b4 <LCD_Write+0x144>
	} else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2102      	movs	r1, #2
 80003ae:	4809      	ldr	r0, [pc, #36]	; (80003d4 <LCD_Write+0x164>)
 80003b0:	f000 fcce 	bl	8000d50 <HAL_GPIO_WritePin>
	}

	PIN_HIGH(EN_PORT,EN_PIN);
 80003b4:	2201      	movs	r2, #1
 80003b6:	2102      	movs	r1, #2
 80003b8:	4805      	ldr	r0, [pc, #20]	; (80003d0 <LCD_Write+0x160>)
 80003ba:	f000 fcc9 	bl	8000d50 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80003be:	2200      	movs	r2, #0
 80003c0:	2102      	movs	r1, #2
 80003c2:	4803      	ldr	r0, [pc, #12]	; (80003d0 <LCD_Write+0x160>)
 80003c4:	f000 fcc4 	bl	8000d50 <HAL_GPIO_WritePin>
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40010c00 	.word	0x40010c00
 80003d4:	40010800 	.word	0x40010800

080003d8 <LCD_Puts>:

void LCD_Puts(uint8_t x, uint8_t y, int8_t *string)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	603a      	str	r2, [r7, #0]
 80003e2:	71fb      	strb	r3, [r7, #7]
 80003e4:	460b      	mov	r3, r1
 80003e6:	71bb      	strb	r3, [r7, #6]
	switch (x)
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d002      	beq.n	80003f4 <LCD_Puts+0x1c>
 80003ee:	2b02      	cmp	r3, #2
 80003f0:	d008      	beq.n	8000404 <LCD_Puts+0x2c>
 80003f2:	e00f      	b.n	8000414 <LCD_Puts+0x3c>
	{
	case 1:
		LCD_Write(0, 0x80+y);
 80003f4:	79bb      	ldrb	r3, [r7, #6]
 80003f6:	3b80      	subs	r3, #128	; 0x80
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	4619      	mov	r1, r3
 80003fc:	2000      	movs	r0, #0
 80003fe:	f7ff ff37 	bl	8000270 <LCD_Write>
		break;
 8000402:	e007      	b.n	8000414 <LCD_Puts+0x3c>
	case 2:
		LCD_Write(0, 0xC0+y);
 8000404:	79bb      	ldrb	r3, [r7, #6]
 8000406:	3b40      	subs	r3, #64	; 0x40
 8000408:	b2db      	uxtb	r3, r3
 800040a:	4619      	mov	r1, r3
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ff2f 	bl	8000270 <LCD_Write>
		break;
 8000412:	bf00      	nop
	}

	while(*string)
 8000414:	e00a      	b.n	800042c <LCD_Puts+0x54>
	{
		LCD_Write(1, *string);
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	f993 3000 	ldrsb.w	r3, [r3]
 800041c:	b2db      	uxtb	r3, r3
 800041e:	4619      	mov	r1, r3
 8000420:	2001      	movs	r0, #1
 8000422:	f7ff ff25 	bl	8000270 <LCD_Write>
		string++;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	603b      	str	r3, [r7, #0]
	while(*string)
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	f993 3000 	ldrsb.w	r3, [r3]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d1ef      	bne.n	8000416 <LCD_Puts+0x3e>
	}
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
	...

08000440 <main>:
void StartTask02(void *argument);

//______________________________________________________________________________________________________________________

int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0

  HAL_Init();
 8000444:	f000 f9e6 	bl	8000814 <HAL_Init>
  SystemClock_Config();
 8000448:	f000 f826 	bl	8000498 <SystemClock_Config>
  MX_GPIO_Init();
 800044c:	f000 f860 	bl	8000510 <MX_GPIO_Init>

  LCD_Init();
 8000450:	f7ff feee 	bl	8000230 <LCD_Init>

  osKernelInitialize();
 8000454:	f001 fadc 	bl	8001a10 <osKernelInitialize>

  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 8000458:	4a09      	ldr	r2, [pc, #36]	; (8000480 <main+0x40>)
 800045a:	2100      	movs	r1, #0
 800045c:	4809      	ldr	r0, [pc, #36]	; (8000484 <main+0x44>)
 800045e:	f001 fb3d 	bl	8001adc <osThreadNew>
 8000462:	4602      	mov	r2, r0
 8000464:	4b08      	ldr	r3, [pc, #32]	; (8000488 <main+0x48>)
 8000466:	601a      	str	r2, [r3, #0]

  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000468:	4a08      	ldr	r2, [pc, #32]	; (800048c <main+0x4c>)
 800046a:	2100      	movs	r1, #0
 800046c:	4808      	ldr	r0, [pc, #32]	; (8000490 <main+0x50>)
 800046e:	f001 fb35 	bl	8001adc <osThreadNew>
 8000472:	4602      	mov	r2, r0
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <main+0x54>)
 8000476:	601a      	str	r2, [r3, #0]

  osKernelStart();
 8000478:	f001 fafc 	bl	8001a74 <osKernelStart>

  while (1)
 800047c:	e7fe      	b.n	800047c <main+0x3c>
 800047e:	bf00      	nop
 8000480:	08004418 	.word	0x08004418
 8000484:	080005b5 	.word	0x080005b5
 8000488:	20001938 	.word	0x20001938
 800048c:	0800443c 	.word	0x0800443c
 8000490:	080005cd 	.word	0x080005cd
 8000494:	20001934 	.word	0x20001934

08000498 <SystemClock_Config>:

}
//_________________________________________________________________________________________________________________

void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b090      	sub	sp, #64	; 0x40
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	f107 0318 	add.w	r3, r7, #24
 80004a2:	2228      	movs	r2, #40	; 0x28
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f003 ff77 	bl	800439a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ba:	2302      	movs	r3, #2
 80004bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004be:	2301      	movs	r3, #1
 80004c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c2:	2310      	movs	r3, #16
 80004c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ca:	f107 0318 	add.w	r3, r7, #24
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 fc56 	bl	8000d80 <HAL_RCC_OscConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004da:	f000 f891 	bl	8000600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004de:	230f      	movs	r3, #15
 80004e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 fec2 	bl	8001280 <HAL_RCC_ClockConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000502:	f000 f87d 	bl	8000600 <Error_Handler>
  }
}
 8000506:	bf00      	nop
 8000508:	3740      	adds	r7, #64	; 0x40
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <MX_GPIO_Init+0x98>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a1f      	ldr	r2, [pc, #124]	; (80005a8 <MX_GPIO_Init+0x98>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <MX_GPIO_Init+0x98>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_GPIO_Init+0x98>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a19      	ldr	r2, [pc, #100]	; (80005a8 <MX_GPIO_Init+0x98>)
 8000542:	f043 0308 	orr.w	r3, r3, #8
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <MX_GPIO_Init+0x98>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0308 	and.w	r3, r3, #8
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_PIN|D5_PIN|D6_PIN|D7_PIN, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	211e      	movs	r1, #30
 8000558:	4814      	ldr	r0, [pc, #80]	; (80005ac <MX_GPIO_Init+0x9c>)
 800055a:	f000 fbf9 	bl	8000d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_PIN|EN_PIN, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2103      	movs	r1, #3
 8000562:	4813      	ldr	r0, [pc, #76]	; (80005b0 <MX_GPIO_Init+0xa0>)
 8000564:	f000 fbf4 	bl	8000d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_PIN|D5_PIN|D6_PIN|D7_PIN;
 8000568:	231e      	movs	r3, #30
 800056a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000574:	2303      	movs	r3, #3
 8000576:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	4619      	mov	r1, r3
 800057e:	480b      	ldr	r0, [pc, #44]	; (80005ac <MX_GPIO_Init+0x9c>)
 8000580:	f000 fa7c 	bl	8000a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_PIN|EN_PIN;
 8000584:	2303      	movs	r3, #3
 8000586:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	2301      	movs	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000590:	2303      	movs	r3, #3
 8000592:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	4619      	mov	r1, r3
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_GPIO_Init+0xa0>)
 800059c:	f000 fa6e 	bl	8000a7c <HAL_GPIO_Init>

}
 80005a0:	bf00      	nop
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010800 	.word	0x40010800
 80005b0:	40010c00 	.word	0x40010c00

080005b4 <StartTask01>:


//_____________________________________________________________________________________________________________________________________________

void StartTask01(void *argument)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	LCD_Puts(1, 1, (int8_t*) "Tran Thi Thuy");
 80005bc:	4a02      	ldr	r2, [pc, #8]	; (80005c8 <StartTask01+0x14>)
 80005be:	2101      	movs	r1, #1
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff ff09 	bl	80003d8 <LCD_Puts>

	for(;;)
 80005c6:	e7fe      	b.n	80005c6 <StartTask01+0x12>
 80005c8:	080043dc 	.word	0x080043dc

080005cc <StartTask02>:
}

//____________________________________________________________________________________________________________________________________________

void StartTask02(void *argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f001 fb2b 	bl	8001c30 <osDelay>
 80005da:	e7fb      	b.n	80005d4 <StartTask02+0x8>

080005dc <HAL_TIM_PeriodElapsedCallback>:

}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d101      	bne.n	80005f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ee:	f000 f927 	bl	8000840 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40012c00 	.word	0x40012c00

08000600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_MspInit+0x5c>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	4a14      	ldr	r2, [pc, #80]	; (8000668 <HAL_MspInit+0x5c>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6193      	str	r3, [r2, #24]
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_MspInit+0x5c>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <HAL_MspInit+0x5c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <HAL_MspInit+0x5c>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <HAL_MspInit+0x5c>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <HAL_MspInit+0x60>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <HAL_MspInit+0x60>)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	40021000 	.word	0x40021000
 800066c:	40010000 	.word	0x40010000

08000670 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000680:	2200      	movs	r2, #0
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	2019      	movs	r0, #25
 8000686:	f000 f9ce 	bl	8000a26 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800068a:	2019      	movs	r0, #25
 800068c:	f000 f9e7 	bl	8000a5e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <HAL_InitTick+0x9c>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a1d      	ldr	r2, [pc, #116]	; (800070c <HAL_InitTick+0x9c>)
 8000696:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <HAL_InitTick+0x9c>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006a8:	f107 0210 	add.w	r2, r7, #16
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ff4e 	bl	8001554 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006b8:	f000 ff38 	bl	800152c <HAL_RCC_GetPCLK2Freq>
 80006bc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80006be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c0:	4a13      	ldr	r2, [pc, #76]	; (8000710 <HAL_InitTick+0xa0>)
 80006c2:	fba2 2303 	umull	r2, r3, r2, r3
 80006c6:	0c9b      	lsrs	r3, r3, #18
 80006c8:	3b01      	subs	r3, #1
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <HAL_InitTick+0xa4>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <HAL_InitTick+0xa8>)
 80006d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_InitTick+0xa4>)
 80006d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <HAL_InitTick+0xa4>)
 80006dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_InitTick+0xa4>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <HAL_InitTick+0xa4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80006ec:	4809      	ldr	r0, [pc, #36]	; (8000714 <HAL_InitTick+0xa4>)
 80006ee:	f000 ff7f 	bl	80015f0 <HAL_TIM_Base_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d104      	bne.n	8000702 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80006f8:	4806      	ldr	r0, [pc, #24]	; (8000714 <HAL_InitTick+0xa4>)
 80006fa:	f000 ffad 	bl	8001658 <HAL_TIM_Base_Start_IT>
 80006fe:	4603      	mov	r3, r0
 8000700:	e000      	b.n	8000704 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	3730      	adds	r7, #48	; 0x30
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	431bde83 	.word	0x431bde83
 8000714:	2000193c 	.word	0x2000193c
 8000718:	40012c00 	.word	0x40012c00

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <HardFault_Handler+0x4>

0800072e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <MemManage_Handler+0x4>

08000734 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <BusFault_Handler+0x4>

0800073a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <UsageFault_Handler+0x4>

08000740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000750:	4802      	ldr	r0, [pc, #8]	; (800075c <TIM1_UP_IRQHandler+0x10>)
 8000752:	f000 ffa4 	bl	800169e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000193c 	.word	0x2000193c

08000760 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <SystemInit+0x5c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <SystemInit+0x5c>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <SystemInit+0x5c>)
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	4911      	ldr	r1, [pc, #68]	; (80007bc <SystemInit+0x5c>)
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <SystemInit+0x60>)
 8000778:	4013      	ands	r3, r2
 800077a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x5c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <SystemInit+0x5c>)
 8000782:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800078a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <SystemInit+0x5c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <SystemInit+0x5c>)
 8000792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000796:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <SystemInit+0x5c>)
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <SystemInit+0x5c>)
 800079e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <SystemInit+0x5c>)
 80007a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <SystemInit+0x64>)
 80007ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	40021000 	.word	0x40021000
 80007c0:	f8ff0000 	.word	0xf8ff0000
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007ca:	e003      	b.n	80007d4 <LoopCopyDataInit>

080007cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007d2:	3104      	adds	r1, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007d4:	480a      	ldr	r0, [pc, #40]	; (8000800 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007dc:	d3f6      	bcc.n	80007cc <CopyDataInit>
  ldr r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007e0:	e002      	b.n	80007e8 <LoopFillZerobss>

080007e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007e4:	f842 3b04 	str.w	r3, [r2], #4

080007e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007ec:	d3f9      	bcc.n	80007e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ee:	f7ff ffb7 	bl	8000760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f003 fda3 	bl	800433c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f6:	f7ff fe23 	bl	8000440 <main>
  bx lr
 80007fa:	4770      	bx	lr
  ldr r3, =_sidata
 80007fc:	08004480 	.word	0x08004480
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000804:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000808:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800080c:	200019c0 	.word	0x200019c0

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>
	...

08000814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_Init+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <HAL_Init+0x28>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 f8f3 	bl	8000a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff ff20 	bl	8000670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000830:	f7ff feec 	bl	800060c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x1c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_IncTick+0x20>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a03      	ldr	r2, [pc, #12]	; (8000860 <HAL_IncTick+0x20>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	20000008 	.word	0x20000008
 8000860:	2000197c 	.word	0x2000197c

08000864 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b02      	ldr	r3, [pc, #8]	; (8000874 <HAL_GetTick+0x10>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	2000197c 	.word	0x2000197c

08000878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000880:	f7ff fff0 	bl	8000864 <HAL_GetTick>
 8000884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000890:	d005      	beq.n	800089e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_Delay+0x40>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	4413      	add	r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800089e:	bf00      	nop
 80008a0:	f7ff ffe0 	bl	8000864 <HAL_GetTick>
 80008a4:	4602      	mov	r2, r0
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d8f7      	bhi.n	80008a0 <HAL_Delay+0x28>
  {
  }
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000008 	.word	0x20000008

080008bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <__NVIC_SetPriorityGrouping+0x44>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ee:	4a04      	ldr	r2, [pc, #16]	; (8000900 <__NVIC_SetPriorityGrouping+0x44>)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	60d3      	str	r3, [r2, #12]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <__NVIC_GetPriorityGrouping+0x18>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	f003 0307 	and.w	r3, r3, #7
}
 8000912:	4618      	mov	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	2b00      	cmp	r3, #0
 8000930:	db0b      	blt.n	800094a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	f003 021f 	and.w	r2, r3, #31
 8000938:	4906      	ldr	r1, [pc, #24]	; (8000954 <__NVIC_EnableIRQ+0x34>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	095b      	lsrs	r3, r3, #5
 8000940:	2001      	movs	r0, #1
 8000942:	fa00 f202 	lsl.w	r2, r0, r2
 8000946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	e000e100 	.word	0xe000e100

08000958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db0a      	blt.n	8000982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	490c      	ldr	r1, [pc, #48]	; (80009a4 <__NVIC_SetPriority+0x4c>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	0112      	lsls	r2, r2, #4
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	440b      	add	r3, r1
 800097c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000980:	e00a      	b.n	8000998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4908      	ldr	r1, [pc, #32]	; (80009a8 <__NVIC_SetPriority+0x50>)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	f003 030f 	and.w	r3, r3, #15
 800098e:	3b04      	subs	r3, #4
 8000990:	0112      	lsls	r2, r2, #4
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	440b      	add	r3, r1
 8000996:	761a      	strb	r2, [r3, #24]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000e100 	.word	0xe000e100
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b089      	sub	sp, #36	; 0x24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f1c3 0307 	rsb	r3, r3, #7
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	bf28      	it	cs
 80009ca:	2304      	movcs	r3, #4
 80009cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3304      	adds	r3, #4
 80009d2:	2b06      	cmp	r3, #6
 80009d4:	d902      	bls.n	80009dc <NVIC_EncodePriority+0x30>
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3b03      	subs	r3, #3
 80009da:	e000      	b.n	80009de <NVIC_EncodePriority+0x32>
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43da      	mvns	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	401a      	ands	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	43d9      	mvns	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	4313      	orrs	r3, r2
         );
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3724      	adds	r7, #36	; 0x24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff4f 	bl	80008bc <__NVIC_SetPriorityGrouping>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a38:	f7ff ff64 	bl	8000904 <__NVIC_GetPriorityGrouping>
 8000a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff ffb2 	bl	80009ac <NVIC_EncodePriority>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff81 	bl	8000958 <__NVIC_SetPriority>
}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff57 	bl	8000920 <__NVIC_EnableIRQ>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b08b      	sub	sp, #44	; 0x2c
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8e:	e133      	b.n	8000cf8 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a90:	2201      	movs	r2, #1
 8000a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	69fa      	ldr	r2, [r7, #28]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	f040 8122 	bne.w	8000cf2 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2b12      	cmp	r3, #18
 8000ab4:	d034      	beq.n	8000b20 <HAL_GPIO_Init+0xa4>
 8000ab6:	2b12      	cmp	r3, #18
 8000ab8:	d80d      	bhi.n	8000ad6 <HAL_GPIO_Init+0x5a>
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d02b      	beq.n	8000b16 <HAL_GPIO_Init+0x9a>
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d804      	bhi.n	8000acc <HAL_GPIO_Init+0x50>
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d031      	beq.n	8000b2a <HAL_GPIO_Init+0xae>
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d01c      	beq.n	8000b04 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aca:	e048      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d043      	beq.n	8000b58 <HAL_GPIO_Init+0xdc>
 8000ad0:	2b11      	cmp	r3, #17
 8000ad2:	d01b      	beq.n	8000b0c <HAL_GPIO_Init+0x90>
          break;
 8000ad4:	e043      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ad6:	4a8f      	ldr	r2, [pc, #572]	; (8000d14 <HAL_GPIO_Init+0x298>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d026      	beq.n	8000b2a <HAL_GPIO_Init+0xae>
 8000adc:	4a8d      	ldr	r2, [pc, #564]	; (8000d14 <HAL_GPIO_Init+0x298>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d806      	bhi.n	8000af0 <HAL_GPIO_Init+0x74>
 8000ae2:	4a8d      	ldr	r2, [pc, #564]	; (8000d18 <HAL_GPIO_Init+0x29c>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d020      	beq.n	8000b2a <HAL_GPIO_Init+0xae>
 8000ae8:	4a8c      	ldr	r2, [pc, #560]	; (8000d1c <HAL_GPIO_Init+0x2a0>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d01d      	beq.n	8000b2a <HAL_GPIO_Init+0xae>
          break;
 8000aee:	e036      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000af0:	4a8b      	ldr	r2, [pc, #556]	; (8000d20 <HAL_GPIO_Init+0x2a4>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d019      	beq.n	8000b2a <HAL_GPIO_Init+0xae>
 8000af6:	4a8b      	ldr	r2, [pc, #556]	; (8000d24 <HAL_GPIO_Init+0x2a8>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d016      	beq.n	8000b2a <HAL_GPIO_Init+0xae>
 8000afc:	4a8a      	ldr	r2, [pc, #552]	; (8000d28 <HAL_GPIO_Init+0x2ac>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d013      	beq.n	8000b2a <HAL_GPIO_Init+0xae>
          break;
 8000b02:	e02c      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	623b      	str	r3, [r7, #32]
          break;
 8000b0a:	e028      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	3304      	adds	r3, #4
 8000b12:	623b      	str	r3, [r7, #32]
          break;
 8000b14:	e023      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	3308      	adds	r3, #8
 8000b1c:	623b      	str	r3, [r7, #32]
          break;
 8000b1e:	e01e      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	330c      	adds	r3, #12
 8000b26:	623b      	str	r3, [r7, #32]
          break;
 8000b28:	e019      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d102      	bne.n	8000b38 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b32:	2304      	movs	r3, #4
 8000b34:	623b      	str	r3, [r7, #32]
          break;
 8000b36:	e012      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d105      	bne.n	8000b4c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b40:	2308      	movs	r3, #8
 8000b42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	611a      	str	r2, [r3, #16]
          break;
 8000b4a:	e008      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	615a      	str	r2, [r3, #20]
          break;
 8000b56:	e002      	b.n	8000b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
          break;
 8000b5c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	2bff      	cmp	r3, #255	; 0xff
 8000b62:	d801      	bhi.n	8000b68 <HAL_GPIO_Init+0xec>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	e001      	b.n	8000b6c <HAL_GPIO_Init+0xf0>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3304      	adds	r3, #4
 8000b6c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	2bff      	cmp	r3, #255	; 0xff
 8000b72:	d802      	bhi.n	8000b7a <HAL_GPIO_Init+0xfe>
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	e002      	b.n	8000b80 <HAL_GPIO_Init+0x104>
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	3b08      	subs	r3, #8
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	210f      	movs	r1, #15
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	401a      	ands	r2, r3
 8000b92:	6a39      	ldr	r1, [r7, #32]
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f000 80a2 	beq.w	8000cf2 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bae:	4b5f      	ldr	r3, [pc, #380]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a5e      	ldr	r2, [pc, #376]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
 8000bba:	4b5c      	ldr	r3, [pc, #368]	; (8000d2c <HAL_GPIO_Init+0x2b0>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bc6:	4a5a      	ldr	r2, [pc, #360]	; (8000d30 <HAL_GPIO_Init+0x2b4>)
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	3302      	adds	r3, #2
 8000bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	220f      	movs	r2, #15
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4013      	ands	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a51      	ldr	r2, [pc, #324]	; (8000d34 <HAL_GPIO_Init+0x2b8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d01f      	beq.n	8000c32 <HAL_GPIO_Init+0x1b6>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a50      	ldr	r2, [pc, #320]	; (8000d38 <HAL_GPIO_Init+0x2bc>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d019      	beq.n	8000c2e <HAL_GPIO_Init+0x1b2>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a4f      	ldr	r2, [pc, #316]	; (8000d3c <HAL_GPIO_Init+0x2c0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d013      	beq.n	8000c2a <HAL_GPIO_Init+0x1ae>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a4e      	ldr	r2, [pc, #312]	; (8000d40 <HAL_GPIO_Init+0x2c4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d00d      	beq.n	8000c26 <HAL_GPIO_Init+0x1aa>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a4d      	ldr	r2, [pc, #308]	; (8000d44 <HAL_GPIO_Init+0x2c8>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d007      	beq.n	8000c22 <HAL_GPIO_Init+0x1a6>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a4c      	ldr	r2, [pc, #304]	; (8000d48 <HAL_GPIO_Init+0x2cc>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d101      	bne.n	8000c1e <HAL_GPIO_Init+0x1a2>
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	e00a      	b.n	8000c34 <HAL_GPIO_Init+0x1b8>
 8000c1e:	2306      	movs	r3, #6
 8000c20:	e008      	b.n	8000c34 <HAL_GPIO_Init+0x1b8>
 8000c22:	2304      	movs	r3, #4
 8000c24:	e006      	b.n	8000c34 <HAL_GPIO_Init+0x1b8>
 8000c26:	2303      	movs	r3, #3
 8000c28:	e004      	b.n	8000c34 <HAL_GPIO_Init+0x1b8>
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	e002      	b.n	8000c34 <HAL_GPIO_Init+0x1b8>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e000      	b.n	8000c34 <HAL_GPIO_Init+0x1b8>
 8000c32:	2300      	movs	r3, #0
 8000c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c36:	f002 0203 	and.w	r2, r2, #3
 8000c3a:	0092      	lsls	r2, r2, #2
 8000c3c:	4093      	lsls	r3, r2
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c44:	493a      	ldr	r1, [pc, #232]	; (8000d30 <HAL_GPIO_Init+0x2b4>)
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d006      	beq.n	8000c6c <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c5e:	4b3b      	ldr	r3, [pc, #236]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	493a      	ldr	r1, [pc, #232]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	600b      	str	r3, [r1, #0]
 8000c6a:	e006      	b.n	8000c7a <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c6c:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	4935      	ldr	r1, [pc, #212]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d006      	beq.n	8000c94 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c86:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	4930      	ldr	r1, [pc, #192]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	604b      	str	r3, [r1, #4]
 8000c92:	e006      	b.n	8000ca2 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c94:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	492b      	ldr	r1, [pc, #172]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d006      	beq.n	8000cbc <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	4926      	ldr	r1, [pc, #152]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	608b      	str	r3, [r1, #8]
 8000cba:	e006      	b.n	8000cca <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	4921      	ldr	r1, [pc, #132]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	491c      	ldr	r1, [pc, #112]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	60cb      	str	r3, [r1, #12]
 8000ce2:	e006      	b.n	8000cf2 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	43db      	mvns	r3, r3
 8000cec:	4917      	ldr	r1, [pc, #92]	; (8000d4c <HAL_GPIO_Init+0x2d0>)
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f47f aec4 	bne.w	8000a90 <HAL_GPIO_Init+0x14>
  }
}
 8000d08:	bf00      	nop
 8000d0a:	372c      	adds	r7, #44	; 0x2c
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	10210000 	.word	0x10210000
 8000d18:	10110000 	.word	0x10110000
 8000d1c:	10120000 	.word	0x10120000
 8000d20:	10310000 	.word	0x10310000
 8000d24:	10320000 	.word	0x10320000
 8000d28:	10220000 	.word	0x10220000
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010000 	.word	0x40010000
 8000d34:	40010800 	.word	0x40010800
 8000d38:	40010c00 	.word	0x40010c00
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	40011400 	.word	0x40011400
 8000d44:	40011800 	.word	0x40011800
 8000d48:	40011c00 	.word	0x40011c00
 8000d4c:	40010400 	.word	0x40010400

08000d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d60:	787b      	ldrb	r3, [r7, #1]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d66:	887a      	ldrh	r2, [r7, #2]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d6c:	e003      	b.n	8000d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	041a      	lsls	r2, r3, #16
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	611a      	str	r2, [r3, #16]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e26c      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 8087 	beq.w	8000eae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000da0:	4b92      	ldr	r3, [pc, #584]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 030c 	and.w	r3, r3, #12
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d00c      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dac:	4b8f      	ldr	r3, [pc, #572]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 030c 	and.w	r3, r3, #12
 8000db4:	2b08      	cmp	r3, #8
 8000db6:	d112      	bne.n	8000dde <HAL_RCC_OscConfig+0x5e>
 8000db8:	4b8c      	ldr	r3, [pc, #560]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc4:	d10b      	bne.n	8000dde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc6:	4b89      	ldr	r3, [pc, #548]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d06c      	beq.n	8000eac <HAL_RCC_OscConfig+0x12c>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d168      	bne.n	8000eac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e246      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de6:	d106      	bne.n	8000df6 <HAL_RCC_OscConfig+0x76>
 8000de8:	4b80      	ldr	r3, [pc, #512]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a7f      	ldr	r2, [pc, #508]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e02e      	b.n	8000e54 <HAL_RCC_OscConfig+0xd4>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10c      	bne.n	8000e18 <HAL_RCC_OscConfig+0x98>
 8000dfe:	4b7b      	ldr	r3, [pc, #492]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a7a      	ldr	r2, [pc, #488]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4b78      	ldr	r3, [pc, #480]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a77      	ldr	r2, [pc, #476]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e01d      	b.n	8000e54 <HAL_RCC_OscConfig+0xd4>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e20:	d10c      	bne.n	8000e3c <HAL_RCC_OscConfig+0xbc>
 8000e22:	4b72      	ldr	r3, [pc, #456]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a71      	ldr	r2, [pc, #452]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	4b6f      	ldr	r3, [pc, #444]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a6e      	ldr	r2, [pc, #440]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	e00b      	b.n	8000e54 <HAL_RCC_OscConfig+0xd4>
 8000e3c:	4b6b      	ldr	r3, [pc, #428]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a6a      	ldr	r2, [pc, #424]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b68      	ldr	r3, [pc, #416]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a67      	ldr	r2, [pc, #412]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d013      	beq.n	8000e84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fd02 	bl	8000864 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e64:	f7ff fcfe 	bl	8000864 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b64      	cmp	r3, #100	; 0x64
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e1fa      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e76:	4b5d      	ldr	r3, [pc, #372]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d0f0      	beq.n	8000e64 <HAL_RCC_OscConfig+0xe4>
 8000e82:	e014      	b.n	8000eae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e84:	f7ff fcee 	bl	8000864 <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e8a:	e008      	b.n	8000e9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e8c:	f7ff fcea 	bl	8000864 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b64      	cmp	r3, #100	; 0x64
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e1e6      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9e:	4b53      	ldr	r3, [pc, #332]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1f0      	bne.n	8000e8c <HAL_RCC_OscConfig+0x10c>
 8000eaa:	e000      	b.n	8000eae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d063      	beq.n	8000f82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eba:	4b4c      	ldr	r3, [pc, #304]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 030c 	and.w	r3, r3, #12
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00b      	beq.n	8000ede <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ec6:	4b49      	ldr	r3, [pc, #292]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	2b08      	cmp	r3, #8
 8000ed0:	d11c      	bne.n	8000f0c <HAL_RCC_OscConfig+0x18c>
 8000ed2:	4b46      	ldr	r3, [pc, #280]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d116      	bne.n	8000f0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ede:	4b43      	ldr	r3, [pc, #268]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d005      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x176>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d001      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e1ba      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef6:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4939      	ldr	r1, [pc, #228]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000f06:	4313      	orrs	r3, r2
 8000f08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f0a:	e03a      	b.n	8000f82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d020      	beq.n	8000f56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f14:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fca3 	bl	8000864 <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f22:	f7ff fc9f 	bl	8000864 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e19b      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f34:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f0      	beq.n	8000f22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f40:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	4927      	ldr	r1, [pc, #156]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000f50:	4313      	orrs	r3, r2
 8000f52:	600b      	str	r3, [r1, #0]
 8000f54:	e015      	b.n	8000f82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fc82 	bl	8000864 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f64:	f7ff fc7e 	bl	8000864 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e17a      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f0      	bne.n	8000f64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d03a      	beq.n	8001004 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d019      	beq.n	8000fca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_RCC_OscConfig+0x274>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9c:	f7ff fc62 	bl	8000864 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa4:	f7ff fc5e 	bl	8000864 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e15a      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f000 faf6 	bl	80015b4 <RCC_Delay>
 8000fc8:	e01c      	b.n	8001004 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_RCC_OscConfig+0x274>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd0:	f7ff fc48 	bl	8000864 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd6:	e00f      	b.n	8000ff8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd8:	f7ff fc44 	bl	8000864 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d908      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e140      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	42420000 	.word	0x42420000
 8000ff4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff8:	4b9e      	ldr	r3, [pc, #632]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1e9      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 80a6 	beq.w	800115e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001012:	2300      	movs	r3, #0
 8001014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001016:	4b97      	ldr	r3, [pc, #604]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10d      	bne.n	800103e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b94      	ldr	r3, [pc, #592]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a93      	ldr	r2, [pc, #588]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b91      	ldr	r3, [pc, #580]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800103a:	2301      	movs	r3, #1
 800103c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103e:	4b8e      	ldr	r3, [pc, #568]	; (8001278 <HAL_RCC_OscConfig+0x4f8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001046:	2b00      	cmp	r3, #0
 8001048:	d118      	bne.n	800107c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800104a:	4b8b      	ldr	r3, [pc, #556]	; (8001278 <HAL_RCC_OscConfig+0x4f8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a8a      	ldr	r2, [pc, #552]	; (8001278 <HAL_RCC_OscConfig+0x4f8>)
 8001050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001056:	f7ff fc05 	bl	8000864 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800105e:	f7ff fc01 	bl	8000864 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b64      	cmp	r3, #100	; 0x64
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e0fd      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001070:	4b81      	ldr	r3, [pc, #516]	; (8001278 <HAL_RCC_OscConfig+0x4f8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f0      	beq.n	800105e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d106      	bne.n	8001092 <HAL_RCC_OscConfig+0x312>
 8001084:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	4a7a      	ldr	r2, [pc, #488]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6213      	str	r3, [r2, #32]
 8001090:	e02d      	b.n	80010ee <HAL_RCC_OscConfig+0x36e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10c      	bne.n	80010b4 <HAL_RCC_OscConfig+0x334>
 800109a:	4b76      	ldr	r3, [pc, #472]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	4a75      	ldr	r2, [pc, #468]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010a0:	f023 0301 	bic.w	r3, r3, #1
 80010a4:	6213      	str	r3, [r2, #32]
 80010a6:	4b73      	ldr	r3, [pc, #460]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a72      	ldr	r2, [pc, #456]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	f023 0304 	bic.w	r3, r3, #4
 80010b0:	6213      	str	r3, [r2, #32]
 80010b2:	e01c      	b.n	80010ee <HAL_RCC_OscConfig+0x36e>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	2b05      	cmp	r3, #5
 80010ba:	d10c      	bne.n	80010d6 <HAL_RCC_OscConfig+0x356>
 80010bc:	4b6d      	ldr	r3, [pc, #436]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	4a6c      	ldr	r2, [pc, #432]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	6213      	str	r3, [r2, #32]
 80010c8:	4b6a      	ldr	r3, [pc, #424]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	4a69      	ldr	r2, [pc, #420]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6213      	str	r3, [r2, #32]
 80010d4:	e00b      	b.n	80010ee <HAL_RCC_OscConfig+0x36e>
 80010d6:	4b67      	ldr	r3, [pc, #412]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	4a66      	ldr	r2, [pc, #408]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	6213      	str	r3, [r2, #32]
 80010e2:	4b64      	ldr	r3, [pc, #400]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a63      	ldr	r2, [pc, #396]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010e8:	f023 0304 	bic.w	r3, r3, #4
 80010ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d015      	beq.n	8001122 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f6:	f7ff fbb5 	bl	8000864 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fc:	e00a      	b.n	8001114 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fe:	f7ff fbb1 	bl	8000864 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	f241 3288 	movw	r2, #5000	; 0x1388
 800110c:	4293      	cmp	r3, r2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e0ab      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001114:	4b57      	ldr	r3, [pc, #348]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0ee      	beq.n	80010fe <HAL_RCC_OscConfig+0x37e>
 8001120:	e014      	b.n	800114c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001122:	f7ff fb9f 	bl	8000864 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001128:	e00a      	b.n	8001140 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800112a:	f7ff fb9b 	bl	8000864 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	f241 3288 	movw	r2, #5000	; 0x1388
 8001138:	4293      	cmp	r3, r2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e095      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001140:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1ee      	bne.n	800112a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d105      	bne.n	800115e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001152:	4b48      	ldr	r3, [pc, #288]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	4a47      	ldr	r2, [pc, #284]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800115c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8081 	beq.w	800126a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001168:	4b42      	ldr	r3, [pc, #264]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 030c 	and.w	r3, r3, #12
 8001170:	2b08      	cmp	r3, #8
 8001172:	d061      	beq.n	8001238 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d146      	bne.n	800120a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800117c:	4b3f      	ldr	r3, [pc, #252]	; (800127c <HAL_RCC_OscConfig+0x4fc>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001182:	f7ff fb6f 	bl	8000864 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800118a:	f7ff fb6b 	bl	8000864 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e067      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119c:	4b35      	ldr	r3, [pc, #212]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f0      	bne.n	800118a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b0:	d108      	bne.n	80011c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011b2:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	492d      	ldr	r1, [pc, #180]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a19      	ldr	r1, [r3, #32]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	430b      	orrs	r3, r1
 80011d6:	4927      	ldr	r1, [pc, #156]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <HAL_RCC_OscConfig+0x4fc>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e2:	f7ff fb3f 	bl	8000864 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ea:	f7ff fb3b 	bl	8000864 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e037      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f0      	beq.n	80011ea <HAL_RCC_OscConfig+0x46a>
 8001208:	e02f      	b.n	800126a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <HAL_RCC_OscConfig+0x4fc>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fb28 	bl	8000864 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001218:	f7ff fb24 	bl	8000864 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e020      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x498>
 8001236:	e018      	b.n	800126a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e013      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	429a      	cmp	r2, r3
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001262:	429a      	cmp	r2, r3
 8001264:	d001      	beq.n	800126a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	40007000 	.word	0x40007000
 800127c:	42420060 	.word	0x42420060

08001280 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0d0      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001294:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d910      	bls.n	80012c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a2:	4b67      	ldr	r3, [pc, #412]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 0207 	bic.w	r2, r3, #7
 80012aa:	4965      	ldr	r1, [pc, #404]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b2:	4b63      	ldr	r3, [pc, #396]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d001      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e0b8      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d020      	beq.n	8001312 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012dc:	4b59      	ldr	r3, [pc, #356]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4a58      	ldr	r2, [pc, #352]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012f4:	4b53      	ldr	r3, [pc, #332]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001300:	4b50      	ldr	r3, [pc, #320]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	494d      	ldr	r1, [pc, #308]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d040      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d107      	bne.n	8001336 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4b47      	ldr	r3, [pc, #284]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d115      	bne.n	800135e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e07f      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133e:	4b41      	ldr	r3, [pc, #260]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d109      	bne.n	800135e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e073      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e06b      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800135e:	4b39      	ldr	r3, [pc, #228]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f023 0203 	bic.w	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4936      	ldr	r1, [pc, #216]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001370:	f7ff fa78 	bl	8000864 <HAL_GetTick>
 8001374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001376:	e00a      	b.n	800138e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001378:	f7ff fa74 	bl	8000864 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	f241 3288 	movw	r2, #5000	; 0x1388
 8001386:	4293      	cmp	r3, r2
 8001388:	d901      	bls.n	800138e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e053      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 020c 	and.w	r2, r3, #12
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	429a      	cmp	r2, r3
 800139e:	d1eb      	bne.n	8001378 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d210      	bcs.n	80013d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 0207 	bic.w	r2, r3, #7
 80013b6:	4922      	ldr	r1, [pc, #136]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e032      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d008      	beq.n	80013ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	4916      	ldr	r1, [pc, #88]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d009      	beq.n	800140e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	490e      	ldr	r1, [pc, #56]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800140e:	f000 f821 	bl	8001454 <HAL_RCC_GetSysClockFreq>
 8001412:	4601      	mov	r1, r0
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_RCC_ClockConfig+0x1c8>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
 8001422:	fa21 f303 	lsr.w	r3, r1, r3
 8001426:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_RCC_ClockConfig+0x1cc>)
 8001428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_RCC_ClockConfig+0x1d0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f91e 	bl	8000670 <HAL_InitTick>

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40022000 	.word	0x40022000
 8001444:	40021000 	.word	0x40021000
 8001448:	08004460 	.word	0x08004460
 800144c:	20000000 	.word	0x20000000
 8001450:	20000004 	.word	0x20000004

08001454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001454:	b490      	push	{r4, r7}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800145a:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <HAL_RCC_GetSysClockFreq+0xb0>)
 800145c:	1d3c      	adds	r4, r7, #4
 800145e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001460:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800147e:	4b23      	ldr	r3, [pc, #140]	; (800150c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b04      	cmp	r3, #4
 800148c:	d002      	beq.n	8001494 <HAL_RCC_GetSysClockFreq+0x40>
 800148e:	2b08      	cmp	r3, #8
 8001490:	d003      	beq.n	800149a <HAL_RCC_GetSysClockFreq+0x46>
 8001492:	e02d      	b.n	80014f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001496:	623b      	str	r3, [r7, #32]
      break;
 8001498:	e02d      	b.n	80014f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	0c9b      	lsrs	r3, r3, #18
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014a6:	4413      	add	r3, r2
 80014a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d013      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_RCC_GetSysClockFreq+0xb8>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	0c5b      	lsrs	r3, r3, #17
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014c6:	4413      	add	r3, r2
 80014c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014d2:	fb02 f203 	mul.w	r2, r2, r3
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
 80014de:	e004      	b.n	80014ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014e4:	fb02 f303 	mul.w	r3, r2, r3
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	623b      	str	r3, [r7, #32]
      break;
 80014ee:	e002      	b.n	80014f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014f2:	623b      	str	r3, [r7, #32]
      break;
 80014f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014f6:	6a3b      	ldr	r3, [r7, #32]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc90      	pop	{r4, r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	080043ec 	.word	0x080043ec
 8001508:	080043fc 	.word	0x080043fc
 800150c:	40021000 	.word	0x40021000
 8001510:	007a1200 	.word	0x007a1200
 8001514:	003d0900 	.word	0x003d0900

08001518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800151c:	4b02      	ldr	r3, [pc, #8]	; (8001528 <HAL_RCC_GetHCLKFreq+0x10>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	20000000 	.word	0x20000000

0800152c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001530:	f7ff fff2 	bl	8001518 <HAL_RCC_GetHCLKFreq>
 8001534:	4601      	mov	r1, r0
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	0adb      	lsrs	r3, r3, #11
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	4a03      	ldr	r2, [pc, #12]	; (8001550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001548:	4618      	mov	r0, r3
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	08004470 	.word	0x08004470

08001554 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	220f      	movs	r2, #15
 8001562:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_RCC_GetClockConfig+0x58>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_RCC_GetClockConfig+0x58>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_RCC_GetClockConfig+0x58>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_RCC_GetClockConfig+0x58>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	08db      	lsrs	r3, r3, #3
 800158e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0207 	and.w	r2, r3, #7
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40022000 	.word	0x40022000

080015b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <RCC_Delay+0x34>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <RCC_Delay+0x38>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0a5b      	lsrs	r3, r3, #9
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015d0:	bf00      	nop
  }
  while (Delay --);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1e5a      	subs	r2, r3, #1
 80015d6:	60fa      	str	r2, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f9      	bne.n	80015d0 <RCC_Delay+0x1c>
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000000 	.word	0x20000000
 80015ec:	10624dd3 	.word	0x10624dd3

080015f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e01d      	b.n	800163e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f815 	bl	8001646 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3304      	adds	r3, #4
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f000 f962 	bl	80018f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0201 	orr.w	r2, r2, #1
 800166e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b06      	cmp	r3, #6
 8001680:	d007      	beq.n	8001692 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0201 	orr.w	r2, r2, #1
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d122      	bne.n	80016fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d11b      	bne.n	80016fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f06f 0202 	mvn.w	r2, #2
 80016ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f8ed 	bl	80018c0 <HAL_TIM_IC_CaptureCallback>
 80016e6:	e005      	b.n	80016f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f8e0 	bl	80018ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f8ef 	bl	80018d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b04      	cmp	r3, #4
 8001706:	d122      	bne.n	800174e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b04      	cmp	r3, #4
 8001714:	d11b      	bne.n	800174e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f06f 0204 	mvn.w	r2, #4
 800171e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2202      	movs	r2, #2
 8001724:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f8c3 	bl	80018c0 <HAL_TIM_IC_CaptureCallback>
 800173a:	e005      	b.n	8001748 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f8b6 	bl	80018ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f8c5 	bl	80018d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b08      	cmp	r3, #8
 800175a:	d122      	bne.n	80017a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b08      	cmp	r3, #8
 8001768:	d11b      	bne.n	80017a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f06f 0208 	mvn.w	r2, #8
 8001772:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2204      	movs	r2, #4
 8001778:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f899 	bl	80018c0 <HAL_TIM_IC_CaptureCallback>
 800178e:	e005      	b.n	800179c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f88c 	bl	80018ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f89b 	bl	80018d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	2b10      	cmp	r3, #16
 80017ae:	d122      	bne.n	80017f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d11b      	bne.n	80017f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f06f 0210 	mvn.w	r2, #16
 80017c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2208      	movs	r2, #8
 80017cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f86f 	bl	80018c0 <HAL_TIM_IC_CaptureCallback>
 80017e2:	e005      	b.n	80017f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f862 	bl	80018ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f871 	bl	80018d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d10e      	bne.n	8001822 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f06f 0201 	mvn.w	r2, #1
 800181a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7fe fedd 	bl	80005dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182c:	2b80      	cmp	r3, #128	; 0x80
 800182e:	d10e      	bne.n	800184e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	2b80      	cmp	r3, #128	; 0x80
 800183c:	d107      	bne.n	800184e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f8d8 	bl	80019fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001858:	2b40      	cmp	r3, #64	; 0x40
 800185a:	d10e      	bne.n	800187a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001866:	2b40      	cmp	r3, #64	; 0x40
 8001868:	d107      	bne.n	800187a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f835 	bl	80018e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	2b20      	cmp	r3, #32
 8001886:	d10e      	bne.n	80018a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	2b20      	cmp	r3, #32
 8001894:	d107      	bne.n	80018a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f06f 0220 	mvn.w	r2, #32
 800189e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f8a3 	bl	80019ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
	...

080018f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a33      	ldr	r2, [pc, #204]	; (80019d8 <TIM_Base_SetConfig+0xe0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d013      	beq.n	8001938 <TIM_Base_SetConfig+0x40>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a32      	ldr	r2, [pc, #200]	; (80019dc <TIM_Base_SetConfig+0xe4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d00f      	beq.n	8001938 <TIM_Base_SetConfig+0x40>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191e:	d00b      	beq.n	8001938 <TIM_Base_SetConfig+0x40>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a2f      	ldr	r2, [pc, #188]	; (80019e0 <TIM_Base_SetConfig+0xe8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d007      	beq.n	8001938 <TIM_Base_SetConfig+0x40>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a2e      	ldr	r2, [pc, #184]	; (80019e4 <TIM_Base_SetConfig+0xec>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d003      	beq.n	8001938 <TIM_Base_SetConfig+0x40>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a2d      	ldr	r2, [pc, #180]	; (80019e8 <TIM_Base_SetConfig+0xf0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d108      	bne.n	800194a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800193e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a22      	ldr	r2, [pc, #136]	; (80019d8 <TIM_Base_SetConfig+0xe0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <TIM_Base_SetConfig+0x82>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a21      	ldr	r2, [pc, #132]	; (80019dc <TIM_Base_SetConfig+0xe4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00f      	beq.n	800197a <TIM_Base_SetConfig+0x82>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001960:	d00b      	beq.n	800197a <TIM_Base_SetConfig+0x82>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <TIM_Base_SetConfig+0xe8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d007      	beq.n	800197a <TIM_Base_SetConfig+0x82>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <TIM_Base_SetConfig+0xec>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d003      	beq.n	800197a <TIM_Base_SetConfig+0x82>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <TIM_Base_SetConfig+0xf0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d108      	bne.n	800198c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4313      	orrs	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	4313      	orrs	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <TIM_Base_SetConfig+0xe0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d003      	beq.n	80019c0 <TIM_Base_SetConfig+0xc8>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a08      	ldr	r2, [pc, #32]	; (80019dc <TIM_Base_SetConfig+0xe4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d103      	bne.n	80019c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	615a      	str	r2, [r3, #20]
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	40012c00 	.word	0x40012c00
 80019dc:	40013400 	.word	0x40013400
 80019e0:	40000400 	.word	0x40000400
 80019e4:	40000800 	.word	0x40000800
 80019e8:	40000c00 	.word	0x40000c00

080019ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a16:	f3ef 8305 	mrs	r3, IPSR
 8001a1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10f      	bne.n	8001a42 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a22:	f3ef 8310 	mrs	r3, PRIMASK
 8001a26:	607b      	str	r3, [r7, #4]
  return(result);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <osKernelInitialize+0x32>
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <osKernelInitialize+0x60>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d109      	bne.n	8001a4a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a36:	f3ef 8311 	mrs	r3, BASEPRI
 8001a3a:	603b      	str	r3, [r7, #0]
  return(result);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001a42:	f06f 0305 	mvn.w	r3, #5
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e00c      	b.n	8001a64 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <osKernelInitialize+0x60>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <osKernelInitialize+0x60>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	e002      	b.n	8001a64 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a64:	68fb      	ldr	r3, [r7, #12]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	2000002c 	.word	0x2000002c

08001a74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a7a:	f3ef 8305 	mrs	r3, IPSR
 8001a7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10f      	bne.n	8001aa6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a86:	f3ef 8310 	mrs	r3, PRIMASK
 8001a8a:	607b      	str	r3, [r7, #4]
  return(result);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <osKernelStart+0x32>
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <osKernelStart+0x64>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d109      	bne.n	8001aae <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a9a:	f3ef 8311 	mrs	r3, BASEPRI
 8001a9e:	603b      	str	r3, [r7, #0]
  return(result);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <osKernelStart+0x3a>
    stat = osErrorISR;
 8001aa6:	f06f 0305 	mvn.w	r3, #5
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	e00e      	b.n	8001acc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <osKernelStart+0x64>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d107      	bne.n	8001ac6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <osKernelStart+0x64>)
 8001ab8:	2202      	movs	r2, #2
 8001aba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001abc:	f001 f864 	bl	8002b88 <vTaskStartScheduler>
      stat = osOK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e002      	b.n	8001acc <osKernelStart+0x58>
    } else {
      stat = osError;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001acc:	68fb      	ldr	r3, [r7, #12]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000002c 	.word	0x2000002c

08001adc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b092      	sub	sp, #72	; 0x48
 8001ae0:	af04      	add	r7, sp, #16
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001aec:	f3ef 8305 	mrs	r3, IPSR
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f040 8094 	bne.w	8001c22 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001afa:	f3ef 8310 	mrs	r3, PRIMASK
 8001afe:	623b      	str	r3, [r7, #32]
  return(result);
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 808d 	bne.w	8001c22 <osThreadNew+0x146>
 8001b08:	4b48      	ldr	r3, [pc, #288]	; (8001c2c <osThreadNew+0x150>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d106      	bne.n	8001b1e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b10:	f3ef 8311 	mrs	r3, BASEPRI
 8001b14:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f040 8082 	bne.w	8001c22 <osThreadNew+0x146>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d07e      	beq.n	8001c22 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001b28:	2318      	movs	r3, #24
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001b30:	f107 031b 	add.w	r3, r7, #27
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d045      	beq.n	8001bce <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <osThreadNew+0x74>
        name = attr->name;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <osThreadNew+0x9a>
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	2b38      	cmp	r3, #56	; 0x38
 8001b68:	d805      	bhi.n	8001b76 <osThreadNew+0x9a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <osThreadNew+0x9e>
        return (NULL);
 8001b76:	2300      	movs	r3, #0
 8001b78:	e054      	b.n	8001c24 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00e      	beq.n	8001bb0 <osThreadNew+0xd4>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b5b      	cmp	r3, #91	; 0x5b
 8001b98:	d90a      	bls.n	8001bb0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d006      	beq.n	8001bb0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <osThreadNew+0xd4>
        mem = 1;
 8001baa:	2301      	movs	r3, #1
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bae:	e010      	b.n	8001bd2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10c      	bne.n	8001bd2 <osThreadNew+0xf6>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d108      	bne.n	8001bd2 <osThreadNew+0xf6>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d104      	bne.n	8001bd2 <osThreadNew+0xf6>
          mem = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bcc:	e001      	b.n	8001bd2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d110      	bne.n	8001bfa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001be0:	9202      	str	r2, [sp, #8]
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 fe02 	bl	80027f8 <xTaskCreateStatic>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e013      	b.n	8001c22 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d110      	bne.n	8001c22 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 fe49 	bl	80028aa <xTaskCreate>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d001      	beq.n	8001c22 <osThreadNew+0x146>
          hTask = NULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001c22:	697b      	ldr	r3, [r7, #20]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3738      	adds	r7, #56	; 0x38
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2000002c 	.word	0x2000002c

08001c30 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c38:	f3ef 8305 	mrs	r3, IPSR
 8001c3c:	613b      	str	r3, [r7, #16]
  return(result);
 8001c3e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10f      	bne.n	8001c64 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c44:	f3ef 8310 	mrs	r3, PRIMASK
 8001c48:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d109      	bne.n	8001c64 <osDelay+0x34>
 8001c50:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <osDelay+0x58>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d109      	bne.n	8001c6c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c58:	f3ef 8311 	mrs	r3, BASEPRI
 8001c5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <osDelay+0x3c>
    stat = osErrorISR;
 8001c64:	f06f 0305 	mvn.w	r3, #5
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	e007      	b.n	8001c7c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <osDelay+0x4c>
      vTaskDelay(ticks);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 ff52 	bl	8002b20 <vTaskDelay>
    }
  }

  return (stat);
 8001c7c:	697b      	ldr	r3, [r7, #20]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000002c 	.word	0x2000002c

08001c8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <vApplicationGetIdleTaskMemory+0x28>)
 8001c9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ca2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2280      	movs	r2, #128	; 0x80
 8001ca8:	601a      	str	r2, [r3, #0]
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000030 	.word	0x20000030
 8001cb8:	2000008c 	.word	0x2000008c

08001cbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <vApplicationGetTimerTaskMemory+0x2c>)
 8001ccc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	4a06      	ldr	r2, [pc, #24]	; (8001cec <vApplicationGetTimerTaskMemory+0x30>)
 8001cd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cda:	601a      	str	r2, [r3, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	2000028c 	.word	0x2000028c
 8001cec:	200002e8 	.word	0x200002e8

08001cf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f103 0208 	add.w	r2, r3, #8
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f103 0208 	add.w	r2, r3, #8
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f103 0208 	add.w	r2, r3, #8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d46:	b480      	push	{r7}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	601a      	str	r2, [r3, #0]
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da2:	d103      	bne.n	8001dac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	e00c      	b.n	8001dc6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3308      	adds	r3, #8
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	e002      	b.n	8001dba <vListInsert+0x2e>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d2f6      	bcs.n	8001db4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	601a      	str	r2, [r3, #0]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6892      	ldr	r2, [r2, #8]
 8001e12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6852      	ldr	r2, [r2, #4]
 8001e1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d103      	bne.n	8001e30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	1e5a      	subs	r2, r3, #1
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
	...

08001e50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e68:	f383 8811 	msr	BASEPRI, r3
 8001e6c:	f3bf 8f6f 	isb	sy
 8001e70:	f3bf 8f4f 	dsb	sy
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	e7fe      	b.n	8001e76 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001e78:	f001 ff96 	bl	8003da8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	68f9      	ldr	r1, [r7, #12]
 8001e86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e88:	fb01 f303 	mul.w	r3, r1, r3
 8001e8c:	441a      	add	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	68f9      	ldr	r1, [r7, #12]
 8001eac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	441a      	add	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	22ff      	movs	r2, #255	; 0xff
 8001ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	22ff      	movs	r2, #255	; 0xff
 8001ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d114      	bne.n	8001ef8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d01a      	beq.n	8001f0c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3310      	adds	r3, #16
 8001eda:	4618      	mov	r0, r3
 8001edc:	f001 f8d8 	bl	8003090 <xTaskRemoveFromEventList>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d012      	beq.n	8001f0c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <xQueueGenericReset+0xcc>)
 8001ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f3bf 8f4f 	dsb	sy
 8001ef2:	f3bf 8f6f 	isb	sy
 8001ef6:	e009      	b.n	8001f0c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3310      	adds	r3, #16
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fef7 	bl	8001cf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3324      	adds	r3, #36	; 0x24
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fef2 	bl	8001cf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001f0c:	f001 ff7a 	bl	8003e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001f10:	2301      	movs	r3, #1
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000ed04 	.word	0xe000ed04

08001f20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08e      	sub	sp, #56	; 0x38
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d109      	bne.n	8001f48 <xQueueGenericCreateStatic+0x28>
 8001f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f38:	f383 8811 	msr	BASEPRI, r3
 8001f3c:	f3bf 8f6f 	isb	sy
 8001f40:	f3bf 8f4f 	dsb	sy
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f46:	e7fe      	b.n	8001f46 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <xQueueGenericCreateStatic+0x42>
 8001f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f52:	f383 8811 	msr	BASEPRI, r3
 8001f56:	f3bf 8f6f 	isb	sy
 8001f5a:	f3bf 8f4f 	dsb	sy
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f60:	e7fe      	b.n	8001f60 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <xQueueGenericCreateStatic+0x4e>
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <xQueueGenericCreateStatic+0x52>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <xQueueGenericCreateStatic+0x54>
 8001f72:	2300      	movs	r3, #0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d109      	bne.n	8001f8c <xQueueGenericCreateStatic+0x6c>
 8001f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7c:	f383 8811 	msr	BASEPRI, r3
 8001f80:	f3bf 8f6f 	isb	sy
 8001f84:	f3bf 8f4f 	dsb	sy
 8001f88:	623b      	str	r3, [r7, #32]
 8001f8a:	e7fe      	b.n	8001f8a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d102      	bne.n	8001f98 <xQueueGenericCreateStatic+0x78>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <xQueueGenericCreateStatic+0x7c>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <xQueueGenericCreateStatic+0x7e>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <xQueueGenericCreateStatic+0x96>
 8001fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa6:	f383 8811 	msr	BASEPRI, r3
 8001faa:	f3bf 8f6f 	isb	sy
 8001fae:	f3bf 8f4f 	dsb	sy
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	e7fe      	b.n	8001fb4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001fb6:	2350      	movs	r3, #80	; 0x50
 8001fb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b50      	cmp	r3, #80	; 0x50
 8001fbe:	d009      	beq.n	8001fd4 <xQueueGenericCreateStatic+0xb4>
 8001fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc4:	f383 8811 	msr	BASEPRI, r3
 8001fc8:	f3bf 8f6f 	isb	sy
 8001fcc:	f3bf 8f4f 	dsb	sy
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	e7fe      	b.n	8001fd2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00d      	beq.n	8001ffa <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001fe6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68b9      	ldr	r1, [r7, #8]
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f805 	bl	8002004 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3730      	adds	r7, #48	; 0x30
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d103      	bne.n	8002020 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	e002      	b.n	8002026 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002032:	2101      	movs	r1, #1
 8002034:	69b8      	ldr	r0, [r7, #24]
 8002036:	f7ff ff0b 	bl	8001e50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08e      	sub	sp, #56	; 0x38
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800205a:	2300      	movs	r3, #0
 800205c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <xQueueGenericSend+0x30>
 8002068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800206c:	f383 8811 	msr	BASEPRI, r3
 8002070:	f3bf 8f6f 	isb	sy
 8002074:	f3bf 8f4f 	dsb	sy
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
 800207a:	e7fe      	b.n	800207a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d103      	bne.n	800208a <xQueueGenericSend+0x3e>
 8002082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <xQueueGenericSend+0x42>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <xQueueGenericSend+0x44>
 800208e:	2300      	movs	r3, #0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <xQueueGenericSend+0x5c>
 8002094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002098:	f383 8811 	msr	BASEPRI, r3
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	f3bf 8f4f 	dsb	sy
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
 80020a6:	e7fe      	b.n	80020a6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d103      	bne.n	80020b6 <xQueueGenericSend+0x6a>
 80020ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <xQueueGenericSend+0x6e>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <xQueueGenericSend+0x70>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <xQueueGenericSend+0x88>
 80020c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c4:	f383 8811 	msr	BASEPRI, r3
 80020c8:	f3bf 8f6f 	isb	sy
 80020cc:	f3bf 8f4f 	dsb	sy
 80020d0:	623b      	str	r3, [r7, #32]
 80020d2:	e7fe      	b.n	80020d2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020d4:	f001 f996 	bl	8003404 <xTaskGetSchedulerState>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <xQueueGenericSend+0x98>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <xQueueGenericSend+0x9c>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <xQueueGenericSend+0x9e>
 80020e8:	2300      	movs	r3, #0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <xQueueGenericSend+0xb6>
 80020ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f2:	f383 8811 	msr	BASEPRI, r3
 80020f6:	f3bf 8f6f 	isb	sy
 80020fa:	f3bf 8f4f 	dsb	sy
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	e7fe      	b.n	8002100 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002102:	f001 fe51 	bl	8003da8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210e:	429a      	cmp	r2, r3
 8002110:	d302      	bcc.n	8002118 <xQueueGenericSend+0xcc>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d129      	bne.n	800216c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800211e:	f000 f9ff 	bl	8002520 <prvCopyDataToQueue>
 8002122:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	2b00      	cmp	r3, #0
 800212a:	d010      	beq.n	800214e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212e:	3324      	adds	r3, #36	; 0x24
 8002130:	4618      	mov	r0, r3
 8002132:	f000 ffad 	bl	8003090 <xTaskRemoveFromEventList>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d013      	beq.n	8002164 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800213c:	4b3f      	ldr	r3, [pc, #252]	; (800223c <xQueueGenericSend+0x1f0>)
 800213e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	f3bf 8f4f 	dsb	sy
 8002148:	f3bf 8f6f 	isb	sy
 800214c:	e00a      	b.n	8002164 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002154:	4b39      	ldr	r3, [pc, #228]	; (800223c <xQueueGenericSend+0x1f0>)
 8002156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002164:	f001 fe4e 	bl	8003e04 <vPortExitCritical>
				return pdPASS;
 8002168:	2301      	movs	r3, #1
 800216a:	e063      	b.n	8002234 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d103      	bne.n	800217a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002172:	f001 fe47 	bl	8003e04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002176:	2300      	movs	r3, #0
 8002178:	e05c      	b.n	8002234 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800217a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217c:	2b00      	cmp	r3, #0
 800217e:	d106      	bne.n	800218e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4618      	mov	r0, r3
 8002186:	f000 ffe5 	bl	8003154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800218a:	2301      	movs	r3, #1
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800218e:	f001 fe39 	bl	8003e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002192:	f000 fd5d 	bl	8002c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002196:	f001 fe07 	bl	8003da8 <vPortEnterCritical>
 800219a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d103      	bne.n	80021b0 <xQueueGenericSend+0x164>
 80021a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d103      	bne.n	80021c6 <xQueueGenericSend+0x17a>
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021c6:	f001 fe1d 	bl	8003e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021ca:	1d3a      	adds	r2, r7, #4
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 ffd4 	bl	8003180 <xTaskCheckForTimeOut>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d124      	bne.n	8002228 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80021de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021e0:	f000 fa96 	bl	8002710 <prvIsQueueFull>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d018      	beq.n	800221c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80021ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ec:	3310      	adds	r3, #16
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fefe 	bl	8002ff4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80021f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021fa:	f000 fa21 	bl	8002640 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80021fe:	f000 fd35 	bl	8002c6c <xTaskResumeAll>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	f47f af7c 	bne.w	8002102 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <xQueueGenericSend+0x1f0>)
 800220c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	f3bf 8f4f 	dsb	sy
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	e772      	b.n	8002102 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800221c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800221e:	f000 fa0f 	bl	8002640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002222:	f000 fd23 	bl	8002c6c <xTaskResumeAll>
 8002226:	e76c      	b.n	8002102 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800222a:	f000 fa09 	bl	8002640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800222e:	f000 fd1d 	bl	8002c6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002232:	2300      	movs	r3, #0
		}
	}
}
 8002234:	4618      	mov	r0, r3
 8002236:	3738      	adds	r7, #56	; 0x38
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	e000ed04 	.word	0xe000ed04

08002240 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08e      	sub	sp, #56	; 0x38
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	2b00      	cmp	r3, #0
 8002256:	d109      	bne.n	800226c <xQueueGenericSendFromISR+0x2c>
 8002258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
 800226a:	e7fe      	b.n	800226a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d103      	bne.n	800227a <xQueueGenericSendFromISR+0x3a>
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <xQueueGenericSendFromISR+0x3e>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <xQueueGenericSendFromISR+0x40>
 800227e:	2300      	movs	r3, #0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <xQueueGenericSendFromISR+0x58>
 8002284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002288:	f383 8811 	msr	BASEPRI, r3
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	623b      	str	r3, [r7, #32]
 8002296:	e7fe      	b.n	8002296 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d103      	bne.n	80022a6 <xQueueGenericSendFromISR+0x66>
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <xQueueGenericSendFromISR+0x6a>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <xQueueGenericSendFromISR+0x6c>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <xQueueGenericSendFromISR+0x84>
 80022b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b4:	f383 8811 	msr	BASEPRI, r3
 80022b8:	f3bf 8f6f 	isb	sy
 80022bc:	f3bf 8f4f 	dsb	sy
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	e7fe      	b.n	80022c2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80022c4:	f001 fe2a 	bl	8003f1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80022c8:	f3ef 8211 	mrs	r2, BASEPRI
 80022cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	61ba      	str	r2, [r7, #24]
 80022de:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80022e0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d302      	bcc.n	80022f6 <xQueueGenericSendFromISR+0xb6>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d12c      	bne.n	8002350 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	68b9      	ldr	r1, [r7, #8]
 8002304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002306:	f000 f90b 	bl	8002520 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800230a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800230e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002312:	d112      	bne.n	800233a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	2b00      	cmp	r3, #0
 800231a:	d016      	beq.n	800234a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800231c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231e:	3324      	adds	r3, #36	; 0x24
 8002320:	4618      	mov	r0, r3
 8002322:	f000 feb5 	bl	8003090 <xTaskRemoveFromEventList>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00e      	beq.n	800234a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	e007      	b.n	800234a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800233a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800233e:	3301      	adds	r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	b25a      	sxtb	r2, r3
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800234a:	2301      	movs	r3, #1
 800234c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800234e:	e001      	b.n	8002354 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002350:	2300      	movs	r3, #0
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
 8002354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002356:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800235e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002360:	4618      	mov	r0, r3
 8002362:	3738      	adds	r7, #56	; 0x38
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08c      	sub	sp, #48	; 0x30
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002374:	2300      	movs	r3, #0
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800237c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <xQueueReceive+0x2e>
	__asm volatile
 8002382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002386:	f383 8811 	msr	BASEPRI, r3
 800238a:	f3bf 8f6f 	isb	sy
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	623b      	str	r3, [r7, #32]
 8002394:	e7fe      	b.n	8002394 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d103      	bne.n	80023a4 <xQueueReceive+0x3c>
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <xQueueReceive+0x40>
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <xQueueReceive+0x42>
 80023a8:	2300      	movs	r3, #0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <xQueueReceive+0x5a>
 80023ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b2:	f383 8811 	msr	BASEPRI, r3
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	e7fe      	b.n	80023c0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023c2:	f001 f81f 	bl	8003404 <xTaskGetSchedulerState>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <xQueueReceive+0x6a>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <xQueueReceive+0x6e>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <xQueueReceive+0x70>
 80023d6:	2300      	movs	r3, #0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <xQueueReceive+0x88>
 80023dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	e7fe      	b.n	80023ee <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80023f0:	f001 fcda 	bl	8003da8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01f      	beq.n	8002440 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002404:	f000 f8f6 	bl	80025f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	1e5a      	subs	r2, r3, #1
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00f      	beq.n	8002438 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241a:	3310      	adds	r3, #16
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fe37 	bl	8003090 <xTaskRemoveFromEventList>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002428:	4b3c      	ldr	r3, [pc, #240]	; (800251c <xQueueReceive+0x1b4>)
 800242a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002438:	f001 fce4 	bl	8003e04 <vPortExitCritical>
				return pdPASS;
 800243c:	2301      	movs	r3, #1
 800243e:	e069      	b.n	8002514 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d103      	bne.n	800244e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002446:	f001 fcdd 	bl	8003e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800244a:	2300      	movs	r3, #0
 800244c:	e062      	b.n	8002514 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	2b00      	cmp	r3, #0
 8002452:	d106      	bne.n	8002462 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002454:	f107 0310 	add.w	r3, r7, #16
 8002458:	4618      	mov	r0, r3
 800245a:	f000 fe7b 	bl	8003154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800245e:	2301      	movs	r3, #1
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002462:	f001 fccf 	bl	8003e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002466:	f000 fbf3 	bl	8002c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800246a:	f001 fc9d 	bl	8003da8 <vPortEnterCritical>
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002474:	b25b      	sxtb	r3, r3
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247a:	d103      	bne.n	8002484 <xQueueReceive+0x11c>
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800248a:	b25b      	sxtb	r3, r3
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d103      	bne.n	800249a <xQueueReceive+0x132>
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800249a:	f001 fcb3 	bl	8003e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800249e:	1d3a      	adds	r2, r7, #4
 80024a0:	f107 0310 	add.w	r3, r7, #16
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fe6a 	bl	8003180 <xTaskCheckForTimeOut>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d123      	bne.n	80024fa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024b4:	f000 f916 	bl	80026e4 <prvIsQueueEmpty>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d017      	beq.n	80024ee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	3324      	adds	r3, #36	; 0x24
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 fd94 	bl	8002ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80024cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024ce:	f000 f8b7 	bl	8002640 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80024d2:	f000 fbcb 	bl	8002c6c <xTaskResumeAll>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d189      	bne.n	80023f0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <xQueueReceive+0x1b4>)
 80024de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	e780      	b.n	80023f0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80024ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024f0:	f000 f8a6 	bl	8002640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024f4:	f000 fbba 	bl	8002c6c <xTaskResumeAll>
 80024f8:	e77a      	b.n	80023f0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80024fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024fc:	f000 f8a0 	bl	8002640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002500:	f000 fbb4 	bl	8002c6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002506:	f000 f8ed 	bl	80026e4 <prvIsQueueEmpty>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	f43f af6f 	beq.w	80023f0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002512:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002514:	4618      	mov	r0, r3
 8002516:	3730      	adds	r7, #48	; 0x30
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	e000ed04 	.word	0xe000ed04

08002520 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002534:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10d      	bne.n	800255a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d14d      	bne.n	80025e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 ff78 	bl	8003440 <xTaskPriorityDisinherit>
 8002550:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	e043      	b.n	80025e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d119      	bne.n	8002594 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6898      	ldr	r0, [r3, #8]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	461a      	mov	r2, r3
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	f001 ff0a 	bl	8004384 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	441a      	add	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	429a      	cmp	r2, r3
 8002588:	d32b      	bcc.n	80025e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	e026      	b.n	80025e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	68d8      	ldr	r0, [r3, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	461a      	mov	r2, r3
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	f001 fef0 	bl	8004384 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	425b      	negs	r3, r3
 80025ae:	441a      	add	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d207      	bcs.n	80025d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	425b      	negs	r3, r3
 80025ca:	441a      	add	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d105      	bne.n	80025e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	3b01      	subs	r3, #1
 80025e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80025ea:	697b      	ldr	r3, [r7, #20]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d018      	beq.n	8002638 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	441a      	add	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	d303      	bcc.n	8002628 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68d9      	ldr	r1, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	461a      	mov	r2, r3
 8002632:	6838      	ldr	r0, [r7, #0]
 8002634:	f001 fea6 	bl	8004384 <memcpy>
	}
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002648:	f001 fbae 	bl	8003da8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002652:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002654:	e011      	b.n	800267a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	2b00      	cmp	r3, #0
 800265c:	d012      	beq.n	8002684 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3324      	adds	r3, #36	; 0x24
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fd14 	bl	8003090 <xTaskRemoveFromEventList>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800266e:	f000 fde7 	bl	8003240 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	3b01      	subs	r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800267a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267e:	2b00      	cmp	r3, #0
 8002680:	dce9      	bgt.n	8002656 <prvUnlockQueue+0x16>
 8002682:	e000      	b.n	8002686 <prvUnlockQueue+0x46>
					break;
 8002684:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	22ff      	movs	r2, #255	; 0xff
 800268a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800268e:	f001 fbb9 	bl	8003e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002692:	f001 fb89 	bl	8003da8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800269c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800269e:	e011      	b.n	80026c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d012      	beq.n	80026ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3310      	adds	r3, #16
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fcef 	bl	8003090 <xTaskRemoveFromEventList>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80026b8:	f000 fdc2 	bl	8003240 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80026bc:	7bbb      	ldrb	r3, [r7, #14]
 80026be:	3b01      	subs	r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80026c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	dce9      	bgt.n	80026a0 <prvUnlockQueue+0x60>
 80026cc:	e000      	b.n	80026d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80026ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	22ff      	movs	r2, #255	; 0xff
 80026d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80026d8:	f001 fb94 	bl	8003e04 <vPortExitCritical>
}
 80026dc:	bf00      	nop
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026ec:	f001 fb5c 	bl	8003da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80026f8:	2301      	movs	r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e001      	b.n	8002702 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002702:	f001 fb7f 	bl	8003e04 <vPortExitCritical>

	return xReturn;
 8002706:	68fb      	ldr	r3, [r7, #12]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002718:	f001 fb46 	bl	8003da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002724:	429a      	cmp	r2, r3
 8002726:	d102      	bne.n	800272e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002728:	2301      	movs	r3, #1
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	e001      	b.n	8002732 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002732:	f001 fb67 	bl	8003e04 <vPortExitCritical>

	return xReturn;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	e014      	b.n	800277a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002750:	4a0e      	ldr	r2, [pc, #56]	; (800278c <vQueueAddToRegistry+0x4c>)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800275c:	490b      	ldr	r1, [pc, #44]	; (800278c <vQueueAddToRegistry+0x4c>)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <vQueueAddToRegistry+0x4c>)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002772:	e005      	b.n	8002780 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3301      	adds	r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b07      	cmp	r3, #7
 800277e:	d9e7      	bls.n	8002750 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20001980 	.word	0x20001980

08002790 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80027a0:	f001 fb02 	bl	8003da8 <vPortEnterCritical>
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d103      	bne.n	80027ba <vQueueWaitForMessageRestricted+0x2a>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c6:	d103      	bne.n	80027d0 <vQueueWaitForMessageRestricted+0x40>
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027d0:	f001 fb18 	bl	8003e04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d106      	bne.n	80027ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3324      	adds	r3, #36	; 0x24
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fc29 	bl	800303c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff28 	bl	8002640 <prvUnlockQueue>
	}
 80027f0:	bf00      	nop
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08e      	sub	sp, #56	; 0x38
 80027fc:	af04      	add	r7, sp, #16
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <xTaskCreateStatic+0x28>
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	623b      	str	r3, [r7, #32]
 800281e:	e7fe      	b.n	800281e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <xTaskCreateStatic+0x42>
 8002826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282a:	f383 8811 	msr	BASEPRI, r3
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	61fb      	str	r3, [r7, #28]
 8002838:	e7fe      	b.n	8002838 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800283a:	235c      	movs	r3, #92	; 0x5c
 800283c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	2b5c      	cmp	r3, #92	; 0x5c
 8002842:	d009      	beq.n	8002858 <xTaskCreateStatic+0x60>
 8002844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e7fe      	b.n	8002856 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285a:	2b00      	cmp	r3, #0
 800285c:	d01e      	beq.n	800289c <xTaskCreateStatic+0xa4>
 800285e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800286c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	2202      	movs	r2, #2
 8002872:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002876:	2300      	movs	r3, #0
 8002878:	9303      	str	r3, [sp, #12]
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	9302      	str	r3, [sp, #8]
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f850 	bl	8002934 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002896:	f000 f8d3 	bl	8002a40 <prvAddNewTaskToReadyList>
 800289a:	e001      	b.n	80028a0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80028a0:	697b      	ldr	r3, [r7, #20]
	}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3728      	adds	r7, #40	; 0x28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b08c      	sub	sp, #48	; 0x30
 80028ae:	af04      	add	r7, sp, #16
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	4613      	mov	r3, r2
 80028b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 fb68 	bl	8003f94 <pvPortMalloc>
 80028c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00e      	beq.n	80028ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80028cc:	205c      	movs	r0, #92	; 0x5c
 80028ce:	f001 fb61 	bl	8003f94 <pvPortMalloc>
 80028d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
 80028e0:	e005      	b.n	80028ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f001 fc18 	bl	8004118 <vPortFree>
 80028e8:	e001      	b.n	80028ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d017      	beq.n	8002924 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028fc:	88fa      	ldrh	r2, [r7, #6]
 80028fe:	2300      	movs	r3, #0
 8002900:	9303      	str	r3, [sp, #12]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	9302      	str	r3, [sp, #8]
 8002906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f80e 	bl	8002934 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002918:	69f8      	ldr	r0, [r7, #28]
 800291a:	f000 f891 	bl	8002a40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800291e:	2301      	movs	r3, #1
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	e002      	b.n	800292a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002924:	f04f 33ff 	mov.w	r3, #4294967295
 8002928:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800292a:	69bb      	ldr	r3, [r7, #24]
	}
 800292c:	4618      	mov	r0, r3
 800292e:	3720      	adds	r7, #32
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	461a      	mov	r2, r3
 800294c:	21a5      	movs	r1, #165	; 0xa5
 800294e:	f001 fd24 	bl	800439a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800295c:	3b01      	subs	r3, #1
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	f023 0307 	bic.w	r3, r3, #7
 800296a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <prvInitialiseNewTask+0x56>
 8002976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297a:	f383 8811 	msr	BASEPRI, r3
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	f3bf 8f4f 	dsb	sy
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	e7fe      	b.n	8002988 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	e012      	b.n	80029b6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	4413      	add	r3, r2
 8002996:	7819      	ldrb	r1, [r3, #0]
 8002998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	4413      	add	r3, r2
 800299e:	3334      	adds	r3, #52	; 0x34
 80029a0:	460a      	mov	r2, r1
 80029a2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	4413      	add	r3, r2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d006      	beq.n	80029be <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	3301      	adds	r3, #1
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	2b0f      	cmp	r3, #15
 80029ba:	d9e9      	bls.n	8002990 <prvInitialiseNewTask+0x5c>
 80029bc:	e000      	b.n	80029c0 <prvInitialiseNewTask+0x8c>
		{
			break;
 80029be:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	2b37      	cmp	r3, #55	; 0x37
 80029cc:	d901      	bls.n	80029d2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029ce:	2337      	movs	r3, #55	; 0x37
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80029d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	2200      	movs	r2, #0
 80029e2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e6:	3304      	adds	r3, #4
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f9a0 	bl	8001d2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	3318      	adds	r3, #24
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff f99b 	bl	8001d2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	2200      	movs	r2, #0
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	69b8      	ldr	r0, [r7, #24]
 8002a22:	f001 f8d7 	bl	8003bd4 <pxPortInitialiseStack>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a38:	bf00      	nop
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a48:	f001 f9ae 	bl	8003da8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <prvAddNewTaskToReadyList+0xc4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	4a2c      	ldr	r2, [pc, #176]	; (8002b04 <prvAddNewTaskToReadyList+0xc4>)
 8002a54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a56:	4b2c      	ldr	r3, [pc, #176]	; (8002b08 <prvAddNewTaskToReadyList+0xc8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a5e:	4a2a      	ldr	r2, [pc, #168]	; (8002b08 <prvAddNewTaskToReadyList+0xc8>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a64:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <prvAddNewTaskToReadyList+0xc4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d110      	bne.n	8002a8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002a6c:	f000 fc0c 	bl	8003288 <prvInitialiseTaskLists>
 8002a70:	e00d      	b.n	8002a8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002a72:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <prvAddNewTaskToReadyList+0xcc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a7a:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <prvAddNewTaskToReadyList+0xc8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d802      	bhi.n	8002a8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a88:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <prvAddNewTaskToReadyList+0xc8>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <prvAddNewTaskToReadyList+0xd0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3301      	adds	r3, #1
 8002a94:	4a1e      	ldr	r2, [pc, #120]	; (8002b10 <prvAddNewTaskToReadyList+0xd0>)
 8002a96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a98:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <prvAddNewTaskToReadyList+0xd0>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <prvAddNewTaskToReadyList+0xd4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d903      	bls.n	8002ab4 <prvAddNewTaskToReadyList+0x74>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	4a18      	ldr	r2, [pc, #96]	; (8002b14 <prvAddNewTaskToReadyList+0xd4>)
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <prvAddNewTaskToReadyList+0xd8>)
 8002ac2:	441a      	add	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4610      	mov	r0, r2
 8002acc:	f7ff f93b 	bl	8001d46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ad0:	f001 f998 	bl	8003e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <prvAddNewTaskToReadyList+0xcc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00e      	beq.n	8002afa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <prvAddNewTaskToReadyList+0xc8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d207      	bcs.n	8002afa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <prvAddNewTaskToReadyList+0xdc>)
 8002aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000bbc 	.word	0x20000bbc
 8002b08:	200006e8 	.word	0x200006e8
 8002b0c:	20000bc8 	.word	0x20000bc8
 8002b10:	20000bd8 	.word	0x20000bd8
 8002b14:	20000bc4 	.word	0x20000bc4
 8002b18:	200006ec 	.word	0x200006ec
 8002b1c:	e000ed04 	.word	0xe000ed04

08002b20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d016      	beq.n	8002b60 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <vTaskDelay+0x60>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <vTaskDelay+0x2e>
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	e7fe      	b.n	8002b4c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002b4e:	f000 f87f 	bl	8002c50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b52:	2100      	movs	r1, #0
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fcdf 	bl	8003518 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002b5a:	f000 f887 	bl	8002c6c <xTaskResumeAll>
 8002b5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d107      	bne.n	8002b76 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <vTaskDelay+0x64>)
 8002b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000be4 	.word	0x20000be4
 8002b84:	e000ed04 	.word	0xe000ed04

08002b88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b96:	463a      	mov	r2, r7
 8002b98:	1d39      	adds	r1, r7, #4
 8002b9a:	f107 0308 	add.w	r3, r7, #8
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f874 	bl	8001c8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ba4:	6839      	ldr	r1, [r7, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	9202      	str	r2, [sp, #8]
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	460a      	mov	r2, r1
 8002bb6:	4920      	ldr	r1, [pc, #128]	; (8002c38 <vTaskStartScheduler+0xb0>)
 8002bb8:	4820      	ldr	r0, [pc, #128]	; (8002c3c <vTaskStartScheduler+0xb4>)
 8002bba:	f7ff fe1d 	bl	80027f8 <xTaskCreateStatic>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <vTaskStartScheduler+0xb8>)
 8002bc2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002bc4:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <vTaskStartScheduler+0xb8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	e001      	b.n	8002bd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d102      	bne.n	8002be2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002bdc:	f000 fcf0 	bl	80035c0 <xTimerCreateTimerTask>
 8002be0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d115      	bne.n	8002c14 <vTaskStartScheduler+0x8c>
 8002be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <vTaskStartScheduler+0xbc>)
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002c00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <vTaskStartScheduler+0xc0>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002c08:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <vTaskStartScheduler+0xc4>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002c0e:	f001 f85b 	bl	8003cc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002c12:	e00d      	b.n	8002c30 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1a:	d109      	bne.n	8002c30 <vTaskStartScheduler+0xa8>
 8002c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c20:	f383 8811 	msr	BASEPRI, r3
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	e7fe      	b.n	8002c2e <vTaskStartScheduler+0xa6>
}
 8002c30:	bf00      	nop
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	08004400 	.word	0x08004400
 8002c3c:	08003259 	.word	0x08003259
 8002c40:	20000be0 	.word	0x20000be0
 8002c44:	20000bdc 	.word	0x20000bdc
 8002c48:	20000bc8 	.word	0x20000bc8
 8002c4c:	20000bc0 	.word	0x20000bc0

08002c50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <vTaskSuspendAll+0x18>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	4a03      	ldr	r2, [pc, #12]	; (8002c68 <vTaskSuspendAll+0x18>)
 8002c5c:	6013      	str	r3, [r2, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000be4 	.word	0x20000be4

08002c6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c7a:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <xTaskResumeAll+0x114>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <xTaskResumeAll+0x2a>
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	e7fe      	b.n	8002c94 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c96:	f001 f887 	bl	8003da8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c9a:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <xTaskResumeAll+0x114>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	4a37      	ldr	r2, [pc, #220]	; (8002d80 <xTaskResumeAll+0x114>)
 8002ca2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ca4:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <xTaskResumeAll+0x114>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d162      	bne.n	8002d72 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002cac:	4b35      	ldr	r3, [pc, #212]	; (8002d84 <xTaskResumeAll+0x118>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d05e      	beq.n	8002d72 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cb4:	e02f      	b.n	8002d16 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002cb6:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <xTaskResumeAll+0x11c>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3318      	adds	r3, #24
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff f89a 	bl	8001dfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff f895 	bl	8001dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <xTaskResumeAll+0x120>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d903      	bls.n	8002ce6 <xTaskResumeAll+0x7a>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	4a2a      	ldr	r2, [pc, #168]	; (8002d8c <xTaskResumeAll+0x120>)
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <xTaskResumeAll+0x124>)
 8002cf4:	441a      	add	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	f7ff f822 	bl	8001d46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d06:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <xTaskResumeAll+0x128>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d302      	bcc.n	8002d16 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002d10:	4b21      	ldr	r3, [pc, #132]	; (8002d98 <xTaskResumeAll+0x12c>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d16:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <xTaskResumeAll+0x11c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1cb      	bne.n	8002cb6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002d24:	f000 fb4a 	bl	80033bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002d28:	4b1c      	ldr	r3, [pc, #112]	; (8002d9c <xTaskResumeAll+0x130>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d010      	beq.n	8002d56 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002d34:	f000 f844 	bl	8002dc0 <xTaskIncrementTick>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <xTaskResumeAll+0x12c>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f1      	bne.n	8002d34 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002d50:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <xTaskResumeAll+0x130>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002d56:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <xTaskResumeAll+0x12c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002d62:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <xTaskResumeAll+0x134>)
 8002d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d72:	f001 f847 	bl	8003e04 <vPortExitCritical>

	return xAlreadyYielded;
 8002d76:	68bb      	ldr	r3, [r7, #8]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000be4 	.word	0x20000be4
 8002d84:	20000bbc 	.word	0x20000bbc
 8002d88:	20000b7c 	.word	0x20000b7c
 8002d8c:	20000bc4 	.word	0x20000bc4
 8002d90:	200006ec 	.word	0x200006ec
 8002d94:	200006e8 	.word	0x200006e8
 8002d98:	20000bd0 	.word	0x20000bd0
 8002d9c:	20000bcc 	.word	0x20000bcc
 8002da0:	e000ed04 	.word	0xe000ed04

08002da4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <xTaskGetTickCount+0x18>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002db0:	687b      	ldr	r3, [r7, #4]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	20000bc0 	.word	0x20000bc0

08002dc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dca:	4b51      	ldr	r3, [pc, #324]	; (8002f10 <xTaskIncrementTick+0x150>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f040 808d 	bne.w	8002eee <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002dd4:	4b4f      	ldr	r3, [pc, #316]	; (8002f14 <xTaskIncrementTick+0x154>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ddc:	4a4d      	ldr	r2, [pc, #308]	; (8002f14 <xTaskIncrementTick+0x154>)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d11f      	bne.n	8002e28 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002de8:	4b4b      	ldr	r3, [pc, #300]	; (8002f18 <xTaskIncrementTick+0x158>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <xTaskIncrementTick+0x46>
 8002df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df6:	f383 8811 	msr	BASEPRI, r3
 8002dfa:	f3bf 8f6f 	isb	sy
 8002dfe:	f3bf 8f4f 	dsb	sy
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	e7fe      	b.n	8002e04 <xTaskIncrementTick+0x44>
 8002e06:	4b44      	ldr	r3, [pc, #272]	; (8002f18 <xTaskIncrementTick+0x158>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <xTaskIncrementTick+0x15c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a41      	ldr	r2, [pc, #260]	; (8002f18 <xTaskIncrementTick+0x158>)
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4a41      	ldr	r2, [pc, #260]	; (8002f1c <xTaskIncrementTick+0x15c>)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <xTaskIncrementTick+0x160>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	4a3f      	ldr	r2, [pc, #252]	; (8002f20 <xTaskIncrementTick+0x160>)
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	f000 faca 	bl	80033bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e28:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <xTaskIncrementTick+0x164>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d34e      	bcc.n	8002ed0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e32:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <xTaskIncrementTick+0x158>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <xTaskIncrementTick+0x80>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <xTaskIncrementTick+0x82>
 8002e40:	2300      	movs	r3, #0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d004      	beq.n	8002e50 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e46:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <xTaskIncrementTick+0x164>)
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	601a      	str	r2, [r3, #0]
					break;
 8002e4e:	e03f      	b.n	8002ed0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e50:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <xTaskIncrementTick+0x158>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d203      	bcs.n	8002e70 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002e68:	4a2e      	ldr	r2, [pc, #184]	; (8002f24 <xTaskIncrementTick+0x164>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6013      	str	r3, [r2, #0]
						break;
 8002e6e:	e02f      	b.n	8002ed0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe ffc1 	bl	8001dfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d004      	beq.n	8002e8c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3318      	adds	r3, #24
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe ffb8 	bl	8001dfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e90:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <xTaskIncrementTick+0x168>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d903      	bls.n	8002ea0 <xTaskIncrementTick+0xe0>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	4a22      	ldr	r2, [pc, #136]	; (8002f28 <xTaskIncrementTick+0x168>)
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <xTaskIncrementTick+0x16c>)
 8002eae:	441a      	add	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f7fe ff45 	bl	8001d46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <xTaskIncrementTick+0x170>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d3b3      	bcc.n	8002e32 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ece:	e7b0      	b.n	8002e32 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ed0:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <xTaskIncrementTick+0x170>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed6:	4915      	ldr	r1, [pc, #84]	; (8002f2c <xTaskIncrementTick+0x16c>)
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d907      	bls.n	8002ef8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	e004      	b.n	8002ef8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002eee:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <xTaskIncrementTick+0x174>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	4a0f      	ldr	r2, [pc, #60]	; (8002f34 <xTaskIncrementTick+0x174>)
 8002ef6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <xTaskIncrementTick+0x178>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002f00:	2301      	movs	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002f04:	697b      	ldr	r3, [r7, #20]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000be4 	.word	0x20000be4
 8002f14:	20000bc0 	.word	0x20000bc0
 8002f18:	20000b74 	.word	0x20000b74
 8002f1c:	20000b78 	.word	0x20000b78
 8002f20:	20000bd4 	.word	0x20000bd4
 8002f24:	20000bdc 	.word	0x20000bdc
 8002f28:	20000bc4 	.word	0x20000bc4
 8002f2c:	200006ec 	.word	0x200006ec
 8002f30:	200006e8 	.word	0x200006e8
 8002f34:	20000bcc 	.word	0x20000bcc
 8002f38:	20000bd0 	.word	0x20000bd0

08002f3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f42:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <vTaskSwitchContext+0xa4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <vTaskSwitchContext+0xa8>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002f50:	e040      	b.n	8002fd4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <vTaskSwitchContext+0xa8>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002f58:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <vTaskSwitchContext+0xac>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	e00f      	b.n	8002f80 <vTaskSwitchContext+0x44>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <vTaskSwitchContext+0x3e>
 8002f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	607b      	str	r3, [r7, #4]
 8002f78:	e7fe      	b.n	8002f78 <vTaskSwitchContext+0x3c>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	491a      	ldr	r1, [pc, #104]	; (8002fec <vTaskSwitchContext+0xb0>)
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0e5      	beq.n	8002f60 <vTaskSwitchContext+0x24>
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <vTaskSwitchContext+0xb0>)
 8002fa0:	4413      	add	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d104      	bne.n	8002fc4 <vTaskSwitchContext+0x88>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <vTaskSwitchContext+0xb4>)
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4a06      	ldr	r2, [pc, #24]	; (8002fe8 <vTaskSwitchContext+0xac>)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6013      	str	r3, [r2, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000be4 	.word	0x20000be4
 8002fe4:	20000bd0 	.word	0x20000bd0
 8002fe8:	20000bc4 	.word	0x20000bc4
 8002fec:	200006ec 	.word	0x200006ec
 8002ff0:	200006e8 	.word	0x200006e8

08002ff4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d109      	bne.n	8003018 <vTaskPlaceOnEventList+0x24>
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	e7fe      	b.n	8003016 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003018:	4b07      	ldr	r3, [pc, #28]	; (8003038 <vTaskPlaceOnEventList+0x44>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3318      	adds	r3, #24
 800301e:	4619      	mov	r1, r3
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7fe feb3 	bl	8001d8c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003026:	2101      	movs	r1, #1
 8003028:	6838      	ldr	r0, [r7, #0]
 800302a:	f000 fa75 	bl	8003518 <prvAddCurrentTaskToDelayedList>
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200006e8 	.word	0x200006e8

0800303c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <vTaskPlaceOnEventListRestricted+0x26>
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e7fe      	b.n	8003060 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <vTaskPlaceOnEventListRestricted+0x50>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3318      	adds	r3, #24
 8003068:	4619      	mov	r1, r3
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f7fe fe6b 	bl	8001d46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295
 800307a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	68b8      	ldr	r0, [r7, #8]
 8003080:	f000 fa4a 	bl	8003518 <prvAddCurrentTaskToDelayedList>
	}
 8003084:	bf00      	nop
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	200006e8 	.word	0x200006e8

08003090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <xTaskRemoveFromEventList+0x2a>
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	e7fe      	b.n	80030b8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	3318      	adds	r3, #24
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe fe9c 	bl	8001dfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030c4:	4b1d      	ldr	r3, [pc, #116]	; (800313c <xTaskRemoveFromEventList+0xac>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d11d      	bne.n	8003108 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	3304      	adds	r3, #4
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe fe93 	bl	8001dfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030da:	4b19      	ldr	r3, [pc, #100]	; (8003140 <xTaskRemoveFromEventList+0xb0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d903      	bls.n	80030ea <xTaskRemoveFromEventList+0x5a>
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	4a16      	ldr	r2, [pc, #88]	; (8003140 <xTaskRemoveFromEventList+0xb0>)
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4a13      	ldr	r2, [pc, #76]	; (8003144 <xTaskRemoveFromEventList+0xb4>)
 80030f8:	441a      	add	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	3304      	adds	r3, #4
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f7fe fe20 	bl	8001d46 <vListInsertEnd>
 8003106:	e005      	b.n	8003114 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	3318      	adds	r3, #24
 800310c:	4619      	mov	r1, r3
 800310e:	480e      	ldr	r0, [pc, #56]	; (8003148 <xTaskRemoveFromEventList+0xb8>)
 8003110:	f7fe fe19 	bl	8001d46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <xTaskRemoveFromEventList+0xbc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	429a      	cmp	r2, r3
 8003120:	d905      	bls.n	800312e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003122:	2301      	movs	r3, #1
 8003124:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <xTaskRemoveFromEventList+0xc0>)
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	e001      	b.n	8003132 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003132:	697b      	ldr	r3, [r7, #20]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000be4 	.word	0x20000be4
 8003140:	20000bc4 	.word	0x20000bc4
 8003144:	200006ec 	.word	0x200006ec
 8003148:	20000b7c 	.word	0x20000b7c
 800314c:	200006e8 	.word	0x200006e8
 8003150:	20000bd0 	.word	0x20000bd0

08003154 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <vTaskInternalSetTimeOutState+0x24>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <vTaskInternalSetTimeOutState+0x28>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	605a      	str	r2, [r3, #4]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000bd4 	.word	0x20000bd4
 800317c:	20000bc0 	.word	0x20000bc0

08003180 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d109      	bne.n	80031a4 <xTaskCheckForTimeOut+0x24>
 8003190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	e7fe      	b.n	80031a2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <xTaskCheckForTimeOut+0x3e>
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	e7fe      	b.n	80031bc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80031be:	f000 fdf3 	bl	8003da8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <xTaskCheckForTimeOut+0xb8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031da:	d102      	bne.n	80031e2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	e023      	b.n	800322a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <xTaskCheckForTimeOut+0xbc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d007      	beq.n	80031fe <xTaskCheckForTimeOut+0x7e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d302      	bcc.n	80031fe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80031f8:	2301      	movs	r3, #1
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	e015      	b.n	800322a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	429a      	cmp	r2, r3
 8003206:	d20b      	bcs.n	8003220 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	1ad2      	subs	r2, r2, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff ff9d 	bl	8003154 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	e004      	b.n	800322a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003226:	2301      	movs	r3, #1
 8003228:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800322a:	f000 fdeb 	bl	8003e04 <vPortExitCritical>

	return xReturn;
 800322e:	69fb      	ldr	r3, [r7, #28]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3720      	adds	r7, #32
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000bc0 	.word	0x20000bc0
 800323c:	20000bd4 	.word	0x20000bd4

08003240 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <vTaskMissedYield+0x14>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]
}
 800324a:	bf00      	nop
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000bd0 	.word	0x20000bd0

08003258 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003260:	f000 f852 	bl	8003308 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <prvIdleTask+0x28>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d9f9      	bls.n	8003260 <prvIdleTask+0x8>
			{
				taskYIELD();
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <prvIdleTask+0x2c>)
 800326e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800327c:	e7f0      	b.n	8003260 <prvIdleTask+0x8>
 800327e:	bf00      	nop
 8003280:	200006ec 	.word	0x200006ec
 8003284:	e000ed04 	.word	0xe000ed04

08003288 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	e00c      	b.n	80032ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4a12      	ldr	r2, [pc, #72]	; (80032e8 <prvInitialiseTaskLists+0x60>)
 80032a0:	4413      	add	r3, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fd24 	bl	8001cf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3301      	adds	r3, #1
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b37      	cmp	r3, #55	; 0x37
 80032b2:	d9ef      	bls.n	8003294 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80032b4:	480d      	ldr	r0, [pc, #52]	; (80032ec <prvInitialiseTaskLists+0x64>)
 80032b6:	f7fe fd1b 	bl	8001cf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032ba:	480d      	ldr	r0, [pc, #52]	; (80032f0 <prvInitialiseTaskLists+0x68>)
 80032bc:	f7fe fd18 	bl	8001cf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032c0:	480c      	ldr	r0, [pc, #48]	; (80032f4 <prvInitialiseTaskLists+0x6c>)
 80032c2:	f7fe fd15 	bl	8001cf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80032c6:	480c      	ldr	r0, [pc, #48]	; (80032f8 <prvInitialiseTaskLists+0x70>)
 80032c8:	f7fe fd12 	bl	8001cf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80032cc:	480b      	ldr	r0, [pc, #44]	; (80032fc <prvInitialiseTaskLists+0x74>)
 80032ce:	f7fe fd0f 	bl	8001cf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <prvInitialiseTaskLists+0x78>)
 80032d4:	4a05      	ldr	r2, [pc, #20]	; (80032ec <prvInitialiseTaskLists+0x64>)
 80032d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <prvInitialiseTaskLists+0x7c>)
 80032da:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <prvInitialiseTaskLists+0x68>)
 80032dc:	601a      	str	r2, [r3, #0]
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	200006ec 	.word	0x200006ec
 80032ec:	20000b4c 	.word	0x20000b4c
 80032f0:	20000b60 	.word	0x20000b60
 80032f4:	20000b7c 	.word	0x20000b7c
 80032f8:	20000b90 	.word	0x20000b90
 80032fc:	20000ba8 	.word	0x20000ba8
 8003300:	20000b74 	.word	0x20000b74
 8003304:	20000b78 	.word	0x20000b78

08003308 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800330e:	e019      	b.n	8003344 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003310:	f000 fd4a 	bl	8003da8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <prvCheckTasksWaitingTermination+0x4c>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3304      	adds	r3, #4
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe fd6b 	bl	8001dfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003326:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <prvCheckTasksWaitingTermination+0x50>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3b01      	subs	r3, #1
 800332c:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <prvCheckTasksWaitingTermination+0x50>)
 800332e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003330:	4b0a      	ldr	r3, [pc, #40]	; (800335c <prvCheckTasksWaitingTermination+0x54>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3b01      	subs	r3, #1
 8003336:	4a09      	ldr	r2, [pc, #36]	; (800335c <prvCheckTasksWaitingTermination+0x54>)
 8003338:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800333a:	f000 fd63 	bl	8003e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f80e 	bl	8003360 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <prvCheckTasksWaitingTermination+0x54>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1e1      	bne.n	8003310 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000b90 	.word	0x20000b90
 8003358:	20000bbc 	.word	0x20000bbc
 800335c:	20000ba4 	.word	0x20000ba4

08003360 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800336e:	2b00      	cmp	r3, #0
 8003370:	d108      	bne.n	8003384 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fece 	bl	8004118 <vPortFree>
				vPortFree( pxTCB );
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fecb 	bl	8004118 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003382:	e017      	b.n	80033b4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800338a:	2b01      	cmp	r3, #1
 800338c:	d103      	bne.n	8003396 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fec2 	bl	8004118 <vPortFree>
	}
 8003394:	e00e      	b.n	80033b4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800339c:	2b02      	cmp	r3, #2
 800339e:	d009      	beq.n	80033b4 <prvDeleteTCB+0x54>
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	e7fe      	b.n	80033b2 <prvDeleteTCB+0x52>
	}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <prvResetNextTaskUnblockTime+0x40>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <prvResetNextTaskUnblockTime+0x14>
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <prvResetNextTaskUnblockTime+0x16>
 80033d0:	2300      	movs	r3, #0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d004      	beq.n	80033e0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <prvResetNextTaskUnblockTime+0x44>)
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80033de:	e008      	b.n	80033f2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <prvResetNextTaskUnblockTime+0x40>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4a04      	ldr	r2, [pc, #16]	; (8003400 <prvResetNextTaskUnblockTime+0x44>)
 80033f0:	6013      	str	r3, [r2, #0]
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	20000b74 	.word	0x20000b74
 8003400:	20000bdc 	.word	0x20000bdc

08003404 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <xTaskGetSchedulerState+0x34>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d102      	bne.n	8003418 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003412:	2301      	movs	r3, #1
 8003414:	607b      	str	r3, [r7, #4]
 8003416:	e008      	b.n	800342a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <xTaskGetSchedulerState+0x38>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003420:	2302      	movs	r3, #2
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	e001      	b.n	800342a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003426:	2300      	movs	r3, #0
 8003428:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800342a:	687b      	ldr	r3, [r7, #4]
	}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000bc8 	.word	0x20000bc8
 800343c:	20000be4 	.word	0x20000be4

08003440 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d054      	beq.n	8003500 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003456:	4b2d      	ldr	r3, [pc, #180]	; (800350c <xTaskPriorityDisinherit+0xcc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	429a      	cmp	r2, r3
 800345e:	d009      	beq.n	8003474 <xTaskPriorityDisinherit+0x34>
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e7fe      	b.n	8003472 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <xTaskPriorityDisinherit+0x50>
 800347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	e7fe      	b.n	800348e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003494:	1e5a      	subs	r2, r3, #1
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d02c      	beq.n	8003500 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d128      	bne.n	8003500 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	3304      	adds	r3, #4
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fca2 	bl	8001dfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <xTaskPriorityDisinherit+0xd0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d903      	bls.n	80034e0 <xTaskPriorityDisinherit+0xa0>
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	4a0c      	ldr	r2, [pc, #48]	; (8003510 <xTaskPriorityDisinherit+0xd0>)
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4a09      	ldr	r2, [pc, #36]	; (8003514 <xTaskPriorityDisinherit+0xd4>)
 80034ee:	441a      	add	r2, r3
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	3304      	adds	r3, #4
 80034f4:	4619      	mov	r1, r3
 80034f6:	4610      	mov	r0, r2
 80034f8:	f7fe fc25 	bl	8001d46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80034fc:	2301      	movs	r3, #1
 80034fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003500:	697b      	ldr	r3, [r7, #20]
	}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	200006e8 	.word	0x200006e8
 8003510:	20000bc4 	.word	0x20000bc4
 8003514:	200006ec 	.word	0x200006ec

08003518 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003522:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003528:	4b20      	ldr	r3, [pc, #128]	; (80035ac <prvAddCurrentTaskToDelayedList+0x94>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3304      	adds	r3, #4
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe fc64 	bl	8001dfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353a:	d10a      	bne.n	8003552 <prvAddCurrentTaskToDelayedList+0x3a>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003542:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <prvAddCurrentTaskToDelayedList+0x94>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3304      	adds	r3, #4
 8003548:	4619      	mov	r1, r3
 800354a:	4819      	ldr	r0, [pc, #100]	; (80035b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800354c:	f7fe fbfb 	bl	8001d46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003550:	e026      	b.n	80035a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800355a:	4b14      	ldr	r3, [pc, #80]	; (80035ac <prvAddCurrentTaskToDelayedList+0x94>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	429a      	cmp	r2, r3
 8003568:	d209      	bcs.n	800357e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <prvAddCurrentTaskToDelayedList+0x94>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3304      	adds	r3, #4
 8003574:	4619      	mov	r1, r3
 8003576:	4610      	mov	r0, r2
 8003578:	f7fe fc08 	bl	8001d8c <vListInsert>
}
 800357c:	e010      	b.n	80035a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800357e:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <prvAddCurrentTaskToDelayedList+0x94>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3304      	adds	r3, #4
 8003588:	4619      	mov	r1, r3
 800358a:	4610      	mov	r0, r2
 800358c:	f7fe fbfe 	bl	8001d8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	d202      	bcs.n	80035a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800359a:	4a08      	ldr	r2, [pc, #32]	; (80035bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	6013      	str	r3, [r2, #0]
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000bc0 	.word	0x20000bc0
 80035ac:	200006e8 	.word	0x200006e8
 80035b0:	20000ba8 	.word	0x20000ba8
 80035b4:	20000b78 	.word	0x20000b78
 80035b8:	20000b74 	.word	0x20000b74
 80035bc:	20000bdc 	.word	0x20000bdc

080035c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	; 0x28
 80035c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80035ca:	f000 fac3 	bl	8003b54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80035ce:	4b1c      	ldr	r3, [pc, #112]	; (8003640 <xTimerCreateTimerTask+0x80>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d021      	beq.n	800361a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80035de:	1d3a      	adds	r2, r7, #4
 80035e0:	f107 0108 	add.w	r1, r7, #8
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fe fb67 	bl	8001cbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	9202      	str	r2, [sp, #8]
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	2302      	movs	r3, #2
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	2300      	movs	r3, #0
 80035fe:	460a      	mov	r2, r1
 8003600:	4910      	ldr	r1, [pc, #64]	; (8003644 <xTimerCreateTimerTask+0x84>)
 8003602:	4811      	ldr	r0, [pc, #68]	; (8003648 <xTimerCreateTimerTask+0x88>)
 8003604:	f7ff f8f8 	bl	80027f8 <xTaskCreateStatic>
 8003608:	4602      	mov	r2, r0
 800360a:	4b10      	ldr	r3, [pc, #64]	; (800364c <xTimerCreateTimerTask+0x8c>)
 800360c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800360e:	4b0f      	ldr	r3, [pc, #60]	; (800364c <xTimerCreateTimerTask+0x8c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003616:	2301      	movs	r3, #1
 8003618:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d109      	bne.n	8003634 <xTimerCreateTimerTask+0x74>
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	e7fe      	b.n	8003632 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003634:	697b      	ldr	r3, [r7, #20]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000c18 	.word	0x20000c18
 8003644:	08004408 	.word	0x08004408
 8003648:	08003769 	.word	0x08003769
 800364c:	20000c1c 	.word	0x20000c1c

08003650 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <xTimerGenericCommand+0x2c>
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	623b      	str	r3, [r7, #32]
 800367a:	e7fe      	b.n	800367a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800367c:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <xTimerGenericCommand+0x94>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d02a      	beq.n	80036da <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b05      	cmp	r3, #5
 8003694:	dc18      	bgt.n	80036c8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003696:	f7ff feb5 	bl	8003404 <xTaskGetSchedulerState>
 800369a:	4603      	mov	r3, r0
 800369c:	2b02      	cmp	r3, #2
 800369e:	d109      	bne.n	80036b4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80036a0:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <xTimerGenericCommand+0x94>)
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	f107 0110 	add.w	r1, r7, #16
 80036a8:	2300      	movs	r3, #0
 80036aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ac:	f7fe fcce 	bl	800204c <xQueueGenericSend>
 80036b0:	6278      	str	r0, [r7, #36]	; 0x24
 80036b2:	e012      	b.n	80036da <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <xTimerGenericCommand+0x94>)
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	f107 0110 	add.w	r1, r7, #16
 80036bc:	2300      	movs	r3, #0
 80036be:	2200      	movs	r2, #0
 80036c0:	f7fe fcc4 	bl	800204c <xQueueGenericSend>
 80036c4:	6278      	str	r0, [r7, #36]	; 0x24
 80036c6:	e008      	b.n	80036da <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <xTimerGenericCommand+0x94>)
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	f107 0110 	add.w	r1, r7, #16
 80036d0:	2300      	movs	r3, #0
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	f7fe fdb4 	bl	8002240 <xQueueGenericSendFromISR>
 80036d8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3728      	adds	r7, #40	; 0x28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000c18 	.word	0x20000c18

080036e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036f2:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <prvProcessExpiredTimer+0x7c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	3304      	adds	r3, #4
 8003700:	4618      	mov	r0, r3
 8003702:	f7fe fb7b 	bl	8001dfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d121      	bne.n	8003752 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	18d1      	adds	r1, r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	6978      	ldr	r0, [r7, #20]
 800371c:	f000 f8c8 	bl	80038b0 <prvInsertTimerInActiveList>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d015      	beq.n	8003752 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003726:	2300      	movs	r3, #0
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	2300      	movs	r3, #0
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	2100      	movs	r1, #0
 8003730:	6978      	ldr	r0, [r7, #20]
 8003732:	f7ff ff8d 	bl	8003650 <xTimerGenericCommand>
 8003736:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <prvProcessExpiredTimer+0x6a>
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e7fe      	b.n	8003750 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	6978      	ldr	r0, [r7, #20]
 8003758:	4798      	blx	r3
}
 800375a:	bf00      	nop
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000c10 	.word	0x20000c10

08003768 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003770:	f107 0308 	add.w	r3, r7, #8
 8003774:	4618      	mov	r0, r3
 8003776:	f000 f857 	bl	8003828 <prvGetNextExpireTime>
 800377a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4619      	mov	r1, r3
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f803 	bl	800378c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003786:	f000 f8d5 	bl	8003934 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800378a:	e7f1      	b.n	8003770 <prvTimerTask+0x8>

0800378c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003796:	f7ff fa5b 	bl	8002c50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800379a:	f107 0308 	add.w	r3, r7, #8
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 f866 	bl	8003870 <prvSampleTimeNow>
 80037a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d130      	bne.n	800380e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10a      	bne.n	80037c8 <prvProcessTimerOrBlockTask+0x3c>
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d806      	bhi.n	80037c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80037ba:	f7ff fa57 	bl	8002c6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80037be:	68f9      	ldr	r1, [r7, #12]
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ff91 	bl	80036e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80037c6:	e024      	b.n	8003812 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d008      	beq.n	80037e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80037ce:	4b13      	ldr	r3, [pc, #76]	; (800381c <prvProcessTimerOrBlockTask+0x90>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf0c      	ite	eq
 80037d8:	2301      	moveq	r3, #1
 80037da:	2300      	movne	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <prvProcessTimerOrBlockTask+0x94>)
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	4619      	mov	r1, r3
 80037ee:	f7fe ffcf 	bl	8002790 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80037f2:	f7ff fa3b 	bl	8002c6c <xTaskResumeAll>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <prvProcessTimerOrBlockTask+0x98>)
 80037fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	f3bf 8f6f 	isb	sy
}
 800380c:	e001      	b.n	8003812 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800380e:	f7ff fa2d 	bl	8002c6c <xTaskResumeAll>
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000c14 	.word	0x20000c14
 8003820:	20000c18 	.word	0x20000c18
 8003824:	e000ed04 	.word	0xe000ed04

08003828 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003830:	4b0e      	ldr	r3, [pc, #56]	; (800386c <prvGetNextExpireTime+0x44>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf0c      	ite	eq
 800383a:	2301      	moveq	r3, #1
 800383c:	2300      	movne	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d105      	bne.n	800385a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800384e:	4b07      	ldr	r3, [pc, #28]	; (800386c <prvGetNextExpireTime+0x44>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e001      	b.n	800385e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800385e:	68fb      	ldr	r3, [r7, #12]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	20000c10 	.word	0x20000c10

08003870 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003878:	f7ff fa94 	bl	8002da4 <xTaskGetTickCount>
 800387c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <prvSampleTimeNow+0x3c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	429a      	cmp	r2, r3
 8003886:	d205      	bcs.n	8003894 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003888:	f000 f904 	bl	8003a94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e002      	b.n	800389a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800389a:	4a04      	ldr	r2, [pc, #16]	; (80038ac <prvSampleTimeNow+0x3c>)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80038a0:	68fb      	ldr	r3, [r7, #12]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000c20 	.word	0x20000c20

080038b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d812      	bhi.n	80038fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	1ad2      	subs	r2, r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d302      	bcc.n	80038ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80038e4:	2301      	movs	r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e01b      	b.n	8003922 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80038ea:	4b10      	ldr	r3, [pc, #64]	; (800392c <prvInsertTimerInActiveList+0x7c>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	3304      	adds	r3, #4
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f7fe fa49 	bl	8001d8c <vListInsert>
 80038fa:	e012      	b.n	8003922 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d206      	bcs.n	8003912 <prvInsertTimerInActiveList+0x62>
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d302      	bcc.n	8003912 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800390c:	2301      	movs	r3, #1
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e007      	b.n	8003922 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <prvInsertTimerInActiveList+0x80>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3304      	adds	r3, #4
 800391a:	4619      	mov	r1, r3
 800391c:	4610      	mov	r0, r2
 800391e:	f7fe fa35 	bl	8001d8c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003922:	697b      	ldr	r3, [r7, #20]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20000c14 	.word	0x20000c14
 8003930:	20000c10 	.word	0x20000c10

08003934 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08e      	sub	sp, #56	; 0x38
 8003938:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800393a:	e099      	b.n	8003a70 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	da17      	bge.n	8003972 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003942:	1d3b      	adds	r3, r7, #4
 8003944:	3304      	adds	r3, #4
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <prvProcessReceivedCommands+0x2e>
 800394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	e7fe      	b.n	8003960 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003968:	6850      	ldr	r0, [r2, #4]
 800396a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800396c:	6892      	ldr	r2, [r2, #8]
 800396e:	4611      	mov	r1, r2
 8003970:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	db7a      	blt.n	8003a6e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d004      	beq.n	800398e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	3304      	adds	r3, #4
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe fa37 	bl	8001dfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800398e:	463b      	mov	r3, r7
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff6d 	bl	8003870 <prvSampleTimeNow>
 8003996:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b09      	cmp	r3, #9
 800399c:	d868      	bhi.n	8003a70 <prvProcessReceivedCommands+0x13c>
 800399e:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <prvProcessReceivedCommands+0x70>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	080039cd 	.word	0x080039cd
 80039a8:	080039cd 	.word	0x080039cd
 80039ac:	080039cd 	.word	0x080039cd
 80039b0:	08003a71 	.word	0x08003a71
 80039b4:	08003a27 	.word	0x08003a27
 80039b8:	08003a5d 	.word	0x08003a5d
 80039bc:	080039cd 	.word	0x080039cd
 80039c0:	080039cd 	.word	0x080039cd
 80039c4:	08003a71 	.word	0x08003a71
 80039c8:	08003a27 	.word	0x08003a27
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	18d1      	adds	r1, r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039da:	f7ff ff69 	bl	80038b0 <prvInsertTimerInActiveList>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d045      	beq.n	8003a70 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d13d      	bne.n	8003a70 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	441a      	add	r2, r3
 80039fc:	2300      	movs	r3, #0
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	2300      	movs	r3, #0
 8003a02:	2100      	movs	r1, #0
 8003a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a06:	f7ff fe23 	bl	8003650 <xTimerGenericCommand>
 8003a0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d12e      	bne.n	8003a70 <prvProcessReceivedCommands+0x13c>
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	e7fe      	b.n	8003a24 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <prvProcessReceivedCommands+0x114>
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	e7fe      	b.n	8003a46 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	699a      	ldr	r2, [r3, #24]
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	18d1      	adds	r1, r2, r3
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a56:	f7ff ff2b 	bl	80038b0 <prvInsertTimerInActiveList>
					break;
 8003a5a:	e009      	b.n	8003a70 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8003a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a68:	f000 fb56 	bl	8004118 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003a6c:	e000      	b.n	8003a70 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003a6e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a70:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <prvProcessReceivedCommands+0x15c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	1d39      	adds	r1, r7, #4
 8003a76:	2200      	movs	r2, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe fc75 	bl	8002368 <xQueueReceive>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f47f af5b 	bne.w	800393c <prvProcessReceivedCommands+0x8>
	}
}
 8003a86:	bf00      	nop
 8003a88:	3730      	adds	r7, #48	; 0x30
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000c18 	.word	0x20000c18

08003a94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a9a:	e044      	b.n	8003b26 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <prvSwitchTimerLists+0xb8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003aa6:	4b29      	ldr	r3, [pc, #164]	; (8003b4c <prvSwitchTimerLists+0xb8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe f9a1 	bl	8001dfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d12d      	bne.n	8003b26 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d90e      	bls.n	8003afa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ae8:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <prvSwitchTimerLists+0xb8>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4619      	mov	r1, r3
 8003af2:	4610      	mov	r0, r2
 8003af4:	f7fe f94a 	bl	8001d8c <vListInsert>
 8003af8:	e015      	b.n	8003b26 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003afa:	2300      	movs	r3, #0
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	2300      	movs	r3, #0
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	2100      	movs	r1, #0
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f7ff fda3 	bl	8003650 <xTimerGenericCommand>
 8003b0a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d109      	bne.n	8003b26 <prvSwitchTimerLists+0x92>
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	e7fe      	b.n	8003b24 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <prvSwitchTimerLists+0xb8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1b5      	bne.n	8003a9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003b30:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <prvSwitchTimerLists+0xb8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <prvSwitchTimerLists+0xbc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <prvSwitchTimerLists+0xb8>)
 8003b3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003b3e:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <prvSwitchTimerLists+0xbc>)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	6013      	str	r3, [r2, #0]
}
 8003b44:	bf00      	nop
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000c10 	.word	0x20000c10
 8003b50:	20000c14 	.word	0x20000c14

08003b54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003b5a:	f000 f925 	bl	8003da8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003b5e:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <prvCheckForValidListAndQueue+0x60>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d120      	bne.n	8003ba8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003b66:	4814      	ldr	r0, [pc, #80]	; (8003bb8 <prvCheckForValidListAndQueue+0x64>)
 8003b68:	f7fe f8c2 	bl	8001cf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003b6c:	4813      	ldr	r0, [pc, #76]	; (8003bbc <prvCheckForValidListAndQueue+0x68>)
 8003b6e:	f7fe f8bf 	bl	8001cf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003b72:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <prvCheckForValidListAndQueue+0x6c>)
 8003b74:	4a10      	ldr	r2, [pc, #64]	; (8003bb8 <prvCheckForValidListAndQueue+0x64>)
 8003b76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003b78:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <prvCheckForValidListAndQueue+0x70>)
 8003b7a:	4a10      	ldr	r2, [pc, #64]	; (8003bbc <prvCheckForValidListAndQueue+0x68>)
 8003b7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <prvCheckForValidListAndQueue+0x74>)
 8003b84:	4a11      	ldr	r2, [pc, #68]	; (8003bcc <prvCheckForValidListAndQueue+0x78>)
 8003b86:	2110      	movs	r1, #16
 8003b88:	200a      	movs	r0, #10
 8003b8a:	f7fe f9c9 	bl	8001f20 <xQueueGenericCreateStatic>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <prvCheckForValidListAndQueue+0x60>)
 8003b92:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b94:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <prvCheckForValidListAndQueue+0x60>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <prvCheckForValidListAndQueue+0x60>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	490b      	ldr	r1, [pc, #44]	; (8003bd0 <prvCheckForValidListAndQueue+0x7c>)
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe fdcc 	bl	8002740 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ba8:	f000 f92c 	bl	8003e04 <vPortExitCritical>
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000c18 	.word	0x20000c18
 8003bb8:	20000be8 	.word	0x20000be8
 8003bbc:	20000bfc 	.word	0x20000bfc
 8003bc0:	20000c10 	.word	0x20000c10
 8003bc4:	20000c14 	.word	0x20000c14
 8003bc8:	20000cc4 	.word	0x20000cc4
 8003bcc:	20000c24 	.word	0x20000c24
 8003bd0:	08004410 	.word	0x08004410

08003bd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3b04      	subs	r3, #4
 8003be4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3b04      	subs	r3, #4
 8003bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f023 0201 	bic.w	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3b04      	subs	r3, #4
 8003c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c04:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <pxPortInitialiseStack+0x54>)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3b14      	subs	r3, #20
 8003c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3b20      	subs	r3, #32
 8003c1a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr
 8003c28:	08003c2d 	.word	0x08003c2d

08003c2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c36:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <prvTaskExitError+0x4c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3e:	d009      	beq.n	8003c54 <prvTaskExitError+0x28>
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	e7fe      	b.n	8003c52 <prvTaskExitError+0x26>
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c66:	bf00      	nop
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0fc      	beq.n	8003c68 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr
 8003c78:	2000000c 	.word	0x2000000c
 8003c7c:	00000000 	.word	0x00000000

08003c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c80:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <pxCurrentTCBConst2>)
 8003c82:	6819      	ldr	r1, [r3, #0]
 8003c84:	6808      	ldr	r0, [r1, #0]
 8003c86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c8a:	f380 8809 	msr	PSP, r0
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f380 8811 	msr	BASEPRI, r0
 8003c9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003c9e:	4770      	bx	lr

08003ca0 <pxCurrentTCBConst2>:
 8003ca0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop

08003ca8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003ca8:	4806      	ldr	r0, [pc, #24]	; (8003cc4 <prvPortStartFirstTask+0x1c>)
 8003caa:	6800      	ldr	r0, [r0, #0]
 8003cac:	6800      	ldr	r0, [r0, #0]
 8003cae:	f380 8808 	msr	MSP, r0
 8003cb2:	b662      	cpsie	i
 8003cb4:	b661      	cpsie	f
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	df00      	svc	0
 8003cc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003cc2:	bf00      	nop
 8003cc4:	e000ed08 	.word	0xe000ed08

08003cc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <xPortStartScheduler+0xcc>)
 8003cd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	22ff      	movs	r2, #255	; 0xff
 8003cde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	4b29      	ldr	r3, [pc, #164]	; (8003d98 <xPortStartScheduler+0xd0>)
 8003cf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cf6:	4b29      	ldr	r3, [pc, #164]	; (8003d9c <xPortStartScheduler+0xd4>)
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cfc:	e009      	b.n	8003d12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003cfe:	4b27      	ldr	r3, [pc, #156]	; (8003d9c <xPortStartScheduler+0xd4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	4a25      	ldr	r2, [pc, #148]	; (8003d9c <xPortStartScheduler+0xd4>)
 8003d06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1a:	2b80      	cmp	r3, #128	; 0x80
 8003d1c:	d0ef      	beq.n	8003cfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d1e:	4b1f      	ldr	r3, [pc, #124]	; (8003d9c <xPortStartScheduler+0xd4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f1c3 0307 	rsb	r3, r3, #7
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d009      	beq.n	8003d3e <xPortStartScheduler+0x76>
 8003d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	e7fe      	b.n	8003d3c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <xPortStartScheduler+0xd4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <xPortStartScheduler+0xd4>)
 8003d46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d48:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <xPortStartScheduler+0xd4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d50:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <xPortStartScheduler+0xd4>)
 8003d52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d5c:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <xPortStartScheduler+0xd8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a0f      	ldr	r2, [pc, #60]	; (8003da0 <xPortStartScheduler+0xd8>)
 8003d62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <xPortStartScheduler+0xd8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a0c      	ldr	r2, [pc, #48]	; (8003da0 <xPortStartScheduler+0xd8>)
 8003d6e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d74:	f000 f8b0 	bl	8003ed8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <xPortStartScheduler+0xdc>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d7e:	f7ff ff93 	bl	8003ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d82:	f7ff f8db 	bl	8002f3c <vTaskSwitchContext>
	prvTaskExitError();
 8003d86:	f7ff ff51 	bl	8003c2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	e000e400 	.word	0xe000e400
 8003d98:	20000d14 	.word	0x20000d14
 8003d9c:	20000d18 	.word	0x20000d18
 8003da0:	e000ed20 	.word	0xe000ed20
 8003da4:	2000000c 	.word	0x2000000c

08003da8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003dc0:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <vPortEnterCritical+0x54>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <vPortEnterCritical+0x54>)
 8003dc8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <vPortEnterCritical+0x54>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d10e      	bne.n	8003df0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <vPortEnterCritical+0x58>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d009      	beq.n	8003df0 <vPortEnterCritical+0x48>
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	e7fe      	b.n	8003dee <vPortEnterCritical+0x46>
	}
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	2000000c 	.word	0x2000000c
 8003e00:	e000ed04 	.word	0xe000ed04

08003e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <vPortExitCritical+0x48>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <vPortExitCritical+0x22>
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	e7fe      	b.n	8003e24 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <vPortExitCritical+0x48>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	4a07      	ldr	r2, [pc, #28]	; (8003e4c <vPortExitCritical+0x48>)
 8003e2e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <vPortExitCritical+0x48>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <vPortExitCritical+0x3e>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	2000000c 	.word	0x2000000c

08003e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e50:	f3ef 8009 	mrs	r0, PSP
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <pxCurrentTCBConst>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e60:	6010      	str	r0, [r2, #0]
 8003e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003e66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e6a:	f380 8811 	msr	BASEPRI, r0
 8003e6e:	f7ff f865 	bl	8002f3c <vTaskSwitchContext>
 8003e72:	f04f 0000 	mov.w	r0, #0
 8003e76:	f380 8811 	msr	BASEPRI, r0
 8003e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003e7e:	6819      	ldr	r1, [r3, #0]
 8003e80:	6808      	ldr	r0, [r1, #0]
 8003e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e86:	f380 8809 	msr	PSP, r0
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	4770      	bx	lr

08003e90 <pxCurrentTCBConst>:
 8003e90:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop

08003e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003eb0:	f7fe ff86 	bl	8002dc0 <xTaskIncrementTick>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003eba:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <SysTick_Handler+0x3c>)
 8003ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	e000ed04 	.word	0xe000ed04

08003ed8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <vPortSetupTimerInterrupt+0x30>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <vPortSetupTimerInterrupt+0x34>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <vPortSetupTimerInterrupt+0x38>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <vPortSetupTimerInterrupt+0x3c>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	099b      	lsrs	r3, r3, #6
 8003ef4:	4a08      	ldr	r2, [pc, #32]	; (8003f18 <vPortSetupTimerInterrupt+0x40>)
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003efa:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <vPortSetupTimerInterrupt+0x30>)
 8003efc:	2207      	movs	r2, #7
 8003efe:	601a      	str	r2, [r3, #0]
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	e000e010 	.word	0xe000e010
 8003f0c:	e000e018 	.word	0xe000e018
 8003f10:	20000000 	.word	0x20000000
 8003f14:	10624dd3 	.word	0x10624dd3
 8003f18:	e000e014 	.word	0xe000e014

08003f1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003f22:	f3ef 8305 	mrs	r3, IPSR
 8003f26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b0f      	cmp	r3, #15
 8003f2c:	d913      	bls.n	8003f56 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f2e:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <vPortValidateInterruptPriority+0x68>)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f38:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <vPortValidateInterruptPriority+0x6c>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	7afa      	ldrb	r2, [r7, #11]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d209      	bcs.n	8003f56 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	607b      	str	r3, [r7, #4]
 8003f54:	e7fe      	b.n	8003f54 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f56:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <vPortValidateInterruptPriority+0x70>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f5e:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <vPortValidateInterruptPriority+0x74>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d909      	bls.n	8003f7a <vPortValidateInterruptPriority+0x5e>
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	e7fe      	b.n	8003f78 <vPortValidateInterruptPriority+0x5c>
	}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr
 8003f84:	e000e3f0 	.word	0xe000e3f0
 8003f88:	20000d14 	.word	0x20000d14
 8003f8c:	e000ed0c 	.word	0xe000ed0c
 8003f90:	20000d18 	.word	0x20000d18

08003f94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003fa0:	f7fe fe56 	bl	8002c50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003fa4:	4b57      	ldr	r3, [pc, #348]	; (8004104 <pvPortMalloc+0x170>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003fac:	f000 f90c 	bl	80041c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003fb0:	4b55      	ldr	r3, [pc, #340]	; (8004108 <pvPortMalloc+0x174>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f040 808c 	bne.w	80040d6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01c      	beq.n	8003ffe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003fc4:	2208      	movs	r2, #8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4413      	add	r3, r2
 8003fca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d013      	beq.n	8003ffe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f023 0307 	bic.w	r3, r3, #7
 8003fdc:	3308      	adds	r3, #8
 8003fde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <pvPortMalloc+0x6a>
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	e7fe      	b.n	8003ffc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d068      	beq.n	80040d6 <pvPortMalloc+0x142>
 8004004:	4b41      	ldr	r3, [pc, #260]	; (800410c <pvPortMalloc+0x178>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d863      	bhi.n	80040d6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800400e:	4b40      	ldr	r3, [pc, #256]	; (8004110 <pvPortMalloc+0x17c>)
 8004010:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004012:	4b3f      	ldr	r3, [pc, #252]	; (8004110 <pvPortMalloc+0x17c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004018:	e004      	b.n	8004024 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	429a      	cmp	r2, r3
 800402c:	d903      	bls.n	8004036 <pvPortMalloc+0xa2>
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f1      	bne.n	800401a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004036:	4b33      	ldr	r3, [pc, #204]	; (8004104 <pvPortMalloc+0x170>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	429a      	cmp	r2, r3
 800403e:	d04a      	beq.n	80040d6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2208      	movs	r2, #8
 8004046:	4413      	add	r3, r2
 8004048:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	1ad2      	subs	r2, r2, r3
 800405a:	2308      	movs	r3, #8
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	429a      	cmp	r2, r3
 8004060:	d91e      	bls.n	80040a0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	2b00      	cmp	r3, #0
 8004072:	d009      	beq.n	8004088 <pvPortMalloc+0xf4>
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e7fe      	b.n	8004086 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800409a:	69b8      	ldr	r0, [r7, #24]
 800409c:	f000 f8f6 	bl	800428c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <pvPortMalloc+0x178>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	4a18      	ldr	r2, [pc, #96]	; (800410c <pvPortMalloc+0x178>)
 80040ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040ae:	4b17      	ldr	r3, [pc, #92]	; (800410c <pvPortMalloc+0x178>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b18      	ldr	r3, [pc, #96]	; (8004114 <pvPortMalloc+0x180>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d203      	bcs.n	80040c2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040ba:	4b14      	ldr	r3, [pc, #80]	; (800410c <pvPortMalloc+0x178>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a15      	ldr	r2, [pc, #84]	; (8004114 <pvPortMalloc+0x180>)
 80040c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <pvPortMalloc+0x174>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80040d6:	f7fe fdc9 	bl	8002c6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d009      	beq.n	80040f8 <pvPortMalloc+0x164>
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	e7fe      	b.n	80040f6 <pvPortMalloc+0x162>
	return pvReturn;
 80040f8:	69fb      	ldr	r3, [r7, #28]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3728      	adds	r7, #40	; 0x28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20001924 	.word	0x20001924
 8004108:	20001930 	.word	0x20001930
 800410c:	20001928 	.word	0x20001928
 8004110:	2000191c 	.word	0x2000191c
 8004114:	2000192c 	.word	0x2000192c

08004118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d046      	beq.n	80041b8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800412a:	2308      	movs	r3, #8
 800412c:	425b      	negs	r3, r3
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4413      	add	r3, r2
 8004132:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <vPortFree+0xa8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4013      	ands	r3, r2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <vPortFree+0x42>
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	e7fe      	b.n	8004158 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d009      	beq.n	8004176 <vPortFree+0x5e>
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	e7fe      	b.n	8004174 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <vPortFree+0xa8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d019      	beq.n	80041b8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d115      	bne.n	80041b8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <vPortFree+0xa8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	43db      	mvns	r3, r3
 8004196:	401a      	ands	r2, r3
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800419c:	f7fe fd58 	bl	8002c50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <vPortFree+0xac>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4413      	add	r3, r2
 80041aa:	4a06      	ldr	r2, [pc, #24]	; (80041c4 <vPortFree+0xac>)
 80041ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041ae:	6938      	ldr	r0, [r7, #16]
 80041b0:	f000 f86c 	bl	800428c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80041b4:	f7fe fd5a 	bl	8002c6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80041b8:	bf00      	nop
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20001930 	.word	0x20001930
 80041c4:	20001928 	.word	0x20001928

080041c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80041d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80041d4:	4b27      	ldr	r3, [pc, #156]	; (8004274 <prvHeapInit+0xac>)
 80041d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00c      	beq.n	80041fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3307      	adds	r3, #7
 80041e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0307 	bic.w	r3, r3, #7
 80041ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	4a1f      	ldr	r2, [pc, #124]	; (8004274 <prvHeapInit+0xac>)
 80041f8:	4413      	add	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004200:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <prvHeapInit+0xb0>)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004206:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <prvHeapInit+0xb0>)
 8004208:	2200      	movs	r2, #0
 800420a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	4413      	add	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004214:	2208      	movs	r2, #8
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0307 	bic.w	r3, r3, #7
 8004222:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4a15      	ldr	r2, [pc, #84]	; (800427c <prvHeapInit+0xb4>)
 8004228:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800422a:	4b14      	ldr	r3, [pc, #80]	; (800427c <prvHeapInit+0xb4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2200      	movs	r2, #0
 8004230:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <prvHeapInit+0xb4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	1ad2      	subs	r2, r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <prvHeapInit+0xb4>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <prvHeapInit+0xb8>)
 8004256:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a09      	ldr	r2, [pc, #36]	; (8004284 <prvHeapInit+0xbc>)
 800425e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <prvHeapInit+0xc0>)
 8004262:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004266:	601a      	str	r2, [r3, #0]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000d1c 	.word	0x20000d1c
 8004278:	2000191c 	.word	0x2000191c
 800427c:	20001924 	.word	0x20001924
 8004280:	2000192c 	.word	0x2000192c
 8004284:	20001928 	.word	0x20001928
 8004288:	20001930 	.word	0x20001930

0800428c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004294:	4b27      	ldr	r3, [pc, #156]	; (8004334 <prvInsertBlockIntoFreeList+0xa8>)
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	e002      	b.n	80042a0 <prvInsertBlockIntoFreeList+0x14>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d8f7      	bhi.n	800429a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	4413      	add	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d108      	bne.n	80042ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	441a      	add	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	441a      	add	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d118      	bne.n	8004314 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	4b14      	ldr	r3, [pc, #80]	; (8004338 <prvInsertBlockIntoFreeList+0xac>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d00d      	beq.n	800430a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	441a      	add	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	e008      	b.n	800431c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <prvInsertBlockIntoFreeList+0xac>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e003      	b.n	800431c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	429a      	cmp	r2, r3
 8004322:	d002      	beq.n	800432a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800432a:	bf00      	nop
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	2000191c 	.word	0x2000191c
 8004338:	20001924 	.word	0x20001924

0800433c <__libc_init_array>:
 800433c:	b570      	push	{r4, r5, r6, lr}
 800433e:	2500      	movs	r5, #0
 8004340:	4e0c      	ldr	r6, [pc, #48]	; (8004374 <__libc_init_array+0x38>)
 8004342:	4c0d      	ldr	r4, [pc, #52]	; (8004378 <__libc_init_array+0x3c>)
 8004344:	1ba4      	subs	r4, r4, r6
 8004346:	10a4      	asrs	r4, r4, #2
 8004348:	42a5      	cmp	r5, r4
 800434a:	d109      	bne.n	8004360 <__libc_init_array+0x24>
 800434c:	f000 f82e 	bl	80043ac <_init>
 8004350:	2500      	movs	r5, #0
 8004352:	4e0a      	ldr	r6, [pc, #40]	; (800437c <__libc_init_array+0x40>)
 8004354:	4c0a      	ldr	r4, [pc, #40]	; (8004380 <__libc_init_array+0x44>)
 8004356:	1ba4      	subs	r4, r4, r6
 8004358:	10a4      	asrs	r4, r4, #2
 800435a:	42a5      	cmp	r5, r4
 800435c:	d105      	bne.n	800436a <__libc_init_array+0x2e>
 800435e:	bd70      	pop	{r4, r5, r6, pc}
 8004360:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004364:	4798      	blx	r3
 8004366:	3501      	adds	r5, #1
 8004368:	e7ee      	b.n	8004348 <__libc_init_array+0xc>
 800436a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800436e:	4798      	blx	r3
 8004370:	3501      	adds	r5, #1
 8004372:	e7f2      	b.n	800435a <__libc_init_array+0x1e>
 8004374:	08004478 	.word	0x08004478
 8004378:	08004478 	.word	0x08004478
 800437c:	08004478 	.word	0x08004478
 8004380:	0800447c 	.word	0x0800447c

08004384 <memcpy>:
 8004384:	b510      	push	{r4, lr}
 8004386:	1e43      	subs	r3, r0, #1
 8004388:	440a      	add	r2, r1
 800438a:	4291      	cmp	r1, r2
 800438c:	d100      	bne.n	8004390 <memcpy+0xc>
 800438e:	bd10      	pop	{r4, pc}
 8004390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004398:	e7f7      	b.n	800438a <memcpy+0x6>

0800439a <memset>:
 800439a:	4603      	mov	r3, r0
 800439c:	4402      	add	r2, r0
 800439e:	4293      	cmp	r3, r2
 80043a0:	d100      	bne.n	80043a4 <memset+0xa>
 80043a2:	4770      	bx	lr
 80043a4:	f803 1b01 	strb.w	r1, [r3], #1
 80043a8:	e7f9      	b.n	800439e <memset+0x4>
	...

080043ac <_init>:
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	bf00      	nop
 80043b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b2:	bc08      	pop	{r3}
 80043b4:	469e      	mov	lr, r3
 80043b6:	4770      	bx	lr

080043b8 <_fini>:
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ba:	bf00      	nop
 80043bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043be:	bc08      	pop	{r3}
 80043c0:	469e      	mov	lr, r3
 80043c2:	4770      	bx	lr
