
STM32F103RCT6_EXTI_Msk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003a0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000584  08000584  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000584  08000584  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000584  08000584  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000584  08000584  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000584  08000584  00010584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000588  08000588  00010588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800058c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000590  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000590  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000166b  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000576  00000000  00000000  00021698  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e0  00000000  00000000  00021c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  00021df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013e40  00000000  00000000  00021f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001b70  00000000  00000000  00035dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071e46  00000000  00000000  00037938  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a977e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005bc  00000000  00000000  000a97fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000004 	.word	0x20000004
 8000200:	00000000 	.word	0x00000000
 8000204:	0800056c 	.word	0x0800056c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000008 	.word	0x20000008
 8000220:	0800056c 	.word	0x0800056c

08000224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	2b00      	cmp	r3, #0
 8000234:	db0b      	blt.n	800024e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	f003 021f 	and.w	r2, r3, #31
 800023c:	4906      	ldr	r1, [pc, #24]	; (8000258 <__NVIC_EnableIRQ+0x34>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	095b      	lsrs	r3, r3, #5
 8000244:	2001      	movs	r0, #1
 8000246:	fa00 f202 	lsl.w	r2, r0, r2
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	e000e100 	.word	0xe000e100

0800025c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	6039      	str	r1, [r7, #0]
 8000266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026c:	2b00      	cmp	r3, #0
 800026e:	db0a      	blt.n	8000286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	b2da      	uxtb	r2, r3
 8000274:	490c      	ldr	r1, [pc, #48]	; (80002a8 <__NVIC_SetPriority+0x4c>)
 8000276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027a:	0112      	lsls	r2, r2, #4
 800027c:	b2d2      	uxtb	r2, r2
 800027e:	440b      	add	r3, r1
 8000280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000284:	e00a      	b.n	800029c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	b2da      	uxtb	r2, r3
 800028a:	4908      	ldr	r1, [pc, #32]	; (80002ac <__NVIC_SetPriority+0x50>)
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	f003 030f 	and.w	r3, r3, #15
 8000292:	3b04      	subs	r3, #4
 8000294:	0112      	lsls	r2, r2, #4
 8000296:	b2d2      	uxtb	r2, r2
 8000298:	440b      	add	r3, r1
 800029a:	761a      	strb	r2, [r3, #24]
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <SystemClock_Init>:
#define LGPIOC_BSRR_BS0_Pos                   0U
#define LGPIOC_BSRR_BS0_Msk                   (0x1U << LGPIOC_BSRR_BS0_Pos)
#define LGPIOC_BSRR_BS0                       LGPIOC_BSRR_BS0_Msk

void SystemClock_Init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	RCC->CR |= LRCC_APB2ENR_AFIOEN;    /* enable HSI clock */
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <SystemClock_Init+0x58>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a13      	ldr	r2, [pc, #76]	; (8000308 <SystemClock_Init+0x58>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6013      	str	r3, [r2, #0]
	while((RCC->CR & LRCC_CR_HSIRDY) ==0 );
 80002c0:	bf00      	nop
 80002c2:	4b11      	ldr	r3, [pc, #68]	; (8000308 <SystemClock_Init+0x58>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f003 0302 	and.w	r3, r3, #2
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <SystemClock_Init+0x12>
	RCC->CR |= LRCC_APB2ENR_AFIOEN;    /* Alternate Function I/O clock enabled */
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <SystemClock_Init+0x58>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <SystemClock_Init+0x58>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6013      	str	r3, [r2, #0]
	RCC->CR |= LRCC_APB2ENR_IOPAEN;    /* Port A enable */
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <SystemClock_Init+0x58>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a0a      	ldr	r2, [pc, #40]	; (8000308 <SystemClock_Init+0x58>)
 80002e0:	f043 0304 	orr.w	r3, r3, #4
 80002e4:	6013      	str	r3, [r2, #0]
	RCC->CR |= LRCC_APB2ENR_IOPAEN;    /* Port A enable */
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <SystemClock_Init+0x58>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a07      	ldr	r2, [pc, #28]	; (8000308 <SystemClock_Init+0x58>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	6013      	str	r3, [r2, #0]
	RCC->CR |= LRCC_APB2ENR_IOPAEN;    /* Port A enable */
 80002f2:	4b05      	ldr	r3, [pc, #20]	; (8000308 <SystemClock_Init+0x58>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a04      	ldr	r2, [pc, #16]	; (8000308 <SystemClock_Init+0x58>)
 80002f8:	f043 0304 	orr.w	r3, r3, #4
 80002fc:	6013      	str	r3, [r2, #0]

}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40021000 	.word	0x40021000

0800030c <GPIO_Init>:

void GPIO_Init(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
	GPIOC->CRL |= LGPIOC_CRL_MODE0;      /* Mode */
 8000310:	4b10      	ldr	r3, [pc, #64]	; (8000354 <GPIO_Init+0x48>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a0f      	ldr	r2, [pc, #60]	; (8000354 <GPIO_Init+0x48>)
 8000316:	f043 0303 	orr.w	r3, r3, #3
 800031a:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~LGPIOC_CRL_CNF0;      /* CNF */
 800031c:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <GPIO_Init+0x48>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a0c      	ldr	r2, [pc, #48]	; (8000354 <GPIO_Init+0x48>)
 8000322:	f023 030c 	bic.w	r3, r3, #12
 8000326:	6013      	str	r3, [r2, #0]

	GPIOB->CRH &= ~LGPIOB_CRH_CNF10;     /* Clear */
 8000328:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <GPIO_Init+0x4c>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <GPIO_Init+0x4c>)
 800032e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000332:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= LGPIOB_CRH_CNF10; /* Input mode with pull-up/ pull-down */
 8000334:	4b08      	ldr	r3, [pc, #32]	; (8000358 <GPIO_Init+0x4c>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	4a07      	ldr	r2, [pc, #28]	; (8000358 <GPIO_Init+0x4c>)
 800033a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800033e:	6053      	str	r3, [r2, #4]

	GPIOB->ODR |= LGPIOB_ODR_ODR10;      /* pull-up */
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <GPIO_Init+0x4c>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <GPIO_Init+0x4c>)
 8000346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800034a:	60d3      	str	r3, [r2, #12]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	40011000 	.word	0x40011000
 8000358:	40010c00 	.word	0x40010c00

0800035c <EXTI_Init>:

void EXTI_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

	AFIO->EXTICR[3] |= LAFIO_EXTICR3_EXTI10;
 8000360:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <EXTI_Init+0x48>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	4a0f      	ldr	r2, [pc, #60]	; (80003a4 <EXTI_Init+0x48>)
 8000366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800036a:	6153      	str	r3, [r2, #20]
	EXTI->IMR |= LEXTI_IMR_MR10; /* Interrupt request from Line x is not masked */
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <EXTI_Init+0x4c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <EXTI_Init+0x4c>)
 8000372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000376:	6013      	str	r3, [r2, #0]
	EXTI->EMR |= LEXTI_EMR_MR10; /* Event request from Line x is not masked */
 8000378:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <EXTI_Init+0x4c>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <EXTI_Init+0x4c>)
 800037e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000382:	6053      	str	r3, [r2, #4]
	EXTI->FTSR |= LEXTI_FTSR_MR10; /* Falling trigger enabled (for Event and Interrupt) for input line. */
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <EXTI_Init+0x4c>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	4a07      	ldr	r2, [pc, #28]	; (80003a8 <EXTI_Init+0x4c>)
 800038a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800038e:	60d3      	str	r3, [r2, #12]
	__NVIC_SetPriority(EXTI15_10_IRQn, 0);
 8000390:	2100      	movs	r1, #0
 8000392:	2028      	movs	r0, #40	; 0x28
 8000394:	f7ff ff62 	bl	800025c <__NVIC_SetPriority>
	__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000398:	2028      	movs	r0, #40	; 0x28
 800039a:	f7ff ff43 	bl	8000224 <__NVIC_EnableIRQ>
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40010000 	.word	0x40010000
 80003a8:	40010400 	.word	0x40010400

080003ac <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	if(led_status)led_status=0;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <EXTI15_10_IRQHandler+0x30>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d003      	beq.n	80003c0 <EXTI15_10_IRQHandler+0x14>
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <EXTI15_10_IRQHandler+0x30>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
 80003be:	e002      	b.n	80003c6 <EXTI15_10_IRQHandler+0x1a>
		else led_status = 1;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <EXTI15_10_IRQHandler+0x30>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	701a      	strb	r2, [r3, #0]
//		}
//		else
//		{
//			GPIOC->BRR |= LGPIOC_BRR_BR0; /* Reset PC0 */
//		}
		EXTI->PR |= EXTI_PR_PR10;
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <EXTI15_10_IRQHandler+0x34>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a05      	ldr	r2, [pc, #20]	; (80003e0 <EXTI15_10_IRQHandler+0x34>)
 80003cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003d0:	6153      	str	r3, [r2, #20]
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000020 	.word	0x20000020
 80003e0:	40010400 	.word	0x40010400

080003e4 <main>:

int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	SystemClock_Init();
 80003e8:	f7ff ff62 	bl	80002b0 <SystemClock_Init>
	GPIO_Init();
 80003ec:	f7ff ff8e 	bl	800030c <GPIO_Init>
	EXTI_Init();
 80003f0:	f7ff ffb4 	bl	800035c <EXTI_Init>
	while(1)
 80003f4:	e7fe      	b.n	80003f4 <main+0x10>

080003f6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000406:	e7fe      	b.n	8000406 <HardFault_Handler+0x4>

08000408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800040c:	e7fe      	b.n	800040c <MemManage_Handler+0x4>

0800040e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000412:	e7fe      	b.n	8000412 <BusFault_Handler+0x4>

08000414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000418:	e7fe      	b.n	8000418 <UsageFault_Handler+0x4>

0800041a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr

08000426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr

08000432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000432:	b480      	push	{r7}
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr

0800043e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000442:	f000 f85d 	bl	8000500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <SystemInit+0x5c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <SystemInit+0x5c>)
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <SystemInit+0x5c>)
 800045e:	685a      	ldr	r2, [r3, #4]
 8000460:	4911      	ldr	r1, [pc, #68]	; (80004a8 <SystemInit+0x5c>)
 8000462:	4b12      	ldr	r3, [pc, #72]	; (80004ac <SystemInit+0x60>)
 8000464:	4013      	ands	r3, r2
 8000466:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SystemInit+0x5c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <SystemInit+0x5c>)
 800046e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000476:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000478:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <SystemInit+0x5c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <SystemInit+0x5c>)
 800047e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000482:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <SystemInit+0x5c>)
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	4a07      	ldr	r2, [pc, #28]	; (80004a8 <SystemInit+0x5c>)
 800048a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800048e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <SystemInit+0x5c>)
 8000492:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000496:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <SystemInit+0x64>)
 800049a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800049e:	609a      	str	r2, [r3, #8]
#endif 
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000
 80004ac:	f8ff0000 	.word	0xf8ff0000
 80004b0:	e000ed00 	.word	0xe000ed00

080004b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004b6:	e003      	b.n	80004c0 <LoopCopyDataInit>

080004b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004be:	3104      	adds	r1, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004c0:	480a      	ldr	r0, [pc, #40]	; (80004ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004c8:	d3f6      	bcc.n	80004b8 <CopyDataInit>
  ldr r2, =_sbss
 80004ca:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004cc:	e002      	b.n	80004d4 <LoopFillZerobss>

080004ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004d0:	f842 3b04 	str.w	r3, [r2], #4

080004d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004d8:	d3f9      	bcc.n	80004ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004da:	f7ff ffb7 	bl	800044c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004de:	f000 f821 	bl	8000524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e2:	f7ff ff7f 	bl	80003e4 <main>
  bx lr
 80004e6:	4770      	bx	lr
  ldr r3, =_sidata
 80004e8:	0800058c 	.word	0x0800058c
  ldr r0, =_sdata
 80004ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004f0:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80004f4:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80004f8:	20000028 	.word	0x20000028

080004fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004fc:	e7fe      	b.n	80004fc <ADC1_2_IRQHandler>
	...

08000500 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <HAL_IncTick+0x1c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_IncTick+0x20>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4413      	add	r3, r2
 8000510:	4a03      	ldr	r2, [pc, #12]	; (8000520 <HAL_IncTick+0x20>)
 8000512:	6013      	str	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	20000000 	.word	0x20000000
 8000520:	20000024 	.word	0x20000024

08000524 <__libc_init_array>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	2500      	movs	r5, #0
 8000528:	4e0c      	ldr	r6, [pc, #48]	; (800055c <__libc_init_array+0x38>)
 800052a:	4c0d      	ldr	r4, [pc, #52]	; (8000560 <__libc_init_array+0x3c>)
 800052c:	1ba4      	subs	r4, r4, r6
 800052e:	10a4      	asrs	r4, r4, #2
 8000530:	42a5      	cmp	r5, r4
 8000532:	d109      	bne.n	8000548 <__libc_init_array+0x24>
 8000534:	f000 f81a 	bl	800056c <_init>
 8000538:	2500      	movs	r5, #0
 800053a:	4e0a      	ldr	r6, [pc, #40]	; (8000564 <__libc_init_array+0x40>)
 800053c:	4c0a      	ldr	r4, [pc, #40]	; (8000568 <__libc_init_array+0x44>)
 800053e:	1ba4      	subs	r4, r4, r6
 8000540:	10a4      	asrs	r4, r4, #2
 8000542:	42a5      	cmp	r5, r4
 8000544:	d105      	bne.n	8000552 <__libc_init_array+0x2e>
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800054c:	4798      	blx	r3
 800054e:	3501      	adds	r5, #1
 8000550:	e7ee      	b.n	8000530 <__libc_init_array+0xc>
 8000552:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000556:	4798      	blx	r3
 8000558:	3501      	adds	r5, #1
 800055a:	e7f2      	b.n	8000542 <__libc_init_array+0x1e>
 800055c:	08000584 	.word	0x08000584
 8000560:	08000584 	.word	0x08000584
 8000564:	08000584 	.word	0x08000584
 8000568:	08000588 	.word	0x08000588

0800056c <_init>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	bf00      	nop
 8000570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000572:	bc08      	pop	{r3}
 8000574:	469e      	mov	lr, r3
 8000576:	4770      	bx	lr

08000578 <_fini>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	bf00      	nop
 800057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057e:	bc08      	pop	{r3}
 8000580:	469e      	mov	lr, r3
 8000582:	4770      	bx	lr
