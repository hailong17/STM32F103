
UART_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000320  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000504  08000504  00010504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000514  08000514  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000514  08000514  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000514  08000514  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000514  08000514  00010514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000518  08000518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800051c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000520  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000520  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001186  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000051d  00000000  00000000  000211b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d8  00000000  00000000  000216d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000190  00000000  00000000  000218a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013f8f  00000000  00000000  00021a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001bbe  00000000  00000000  000359c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073111  00000000  00000000  00037585  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aa696  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005a0  00000000  00000000  000aa714  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000004 	.word	0x20000004
 8000200:	00000000 	.word	0x00000000
 8000204:	080004ec 	.word	0x080004ec

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000008 	.word	0x20000008
 8000220:	080004ec 	.word	0x080004ec

08000224 <SystemClockInit>:
#include "stm32f1xx.h"
/*****************************************************/
#define msg "Hello World!\n\r"
/*****************************************************/
void SystemClockInit(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	RCC->CR |= 1<<0; /* enable HSI clock */
 8000228:	4b11      	ldr	r3, [pc, #68]	; (8000270 <SystemClockInit+0x4c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a10      	ldr	r2, [pc, #64]	; (8000270 <SystemClockInit+0x4c>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6013      	str	r3, [r2, #0]
	while((RCC->CR & (uint32_t)(1<<1)) == 0);
 8000234:	bf00      	nop
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <SystemClockInit+0x4c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f003 0302 	and.w	r3, r3, #2
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0f9      	beq.n	8000236 <SystemClockInit+0x12>
	RCC->APB2ENR |= (uint32_t)(1<<0); /* Alternate Function I/O clock enabled */
 8000242:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <SystemClockInit+0x4c>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <SystemClockInit+0x4c>)
 8000248:	f043 0301 	orr.w	r3, r3, #1
 800024c:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (uint32_t)(1<<2);/* I/O port A clock enable */
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <SystemClockInit+0x4c>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	4a07      	ldr	r2, [pc, #28]	; (8000270 <SystemClockInit+0x4c>)
 8000254:	f043 0304 	orr.w	r3, r3, #4
 8000258:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (uint32_t)(1<<14);/* USART1 clock enabled */
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <SystemClockInit+0x4c>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a04      	ldr	r2, [pc, #16]	; (8000270 <SystemClockInit+0x4c>)
 8000260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000264:	6193      	str	r3, [r2, #24]
}
 8000266:	bf00      	nop
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40021000 	.word	0x40021000

08000274 <UART_Init>:
/*****************************************************/
void UART_Init(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	USART1->CR1 |= (uint32_t)(1<<2); /* Receiver is enabled and begins searching for a start bit */
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <UART_Init+0x48>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	4a0f      	ldr	r2, [pc, #60]	; (80002bc <UART_Init+0x48>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (uint32_t)(1<<3); /* Transmitter is enabled */
 8000284:	4b0d      	ldr	r3, [pc, #52]	; (80002bc <UART_Init+0x48>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	4a0c      	ldr	r2, [pc, #48]	; (80002bc <UART_Init+0x48>)
 800028a:	f043 0308 	orr.w	r3, r3, #8
 800028e:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (uint32_t)(1<<13); /* USART enabled */
 8000290:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <UART_Init+0x48>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a09      	ldr	r2, [pc, #36]	; (80002bc <UART_Init+0x48>)
 8000296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800029a:	60d3      	str	r3, [r2, #12]
	USART1->BRR |= (uint32_t)(4<<4); /* Mantissa */
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <UART_Init+0x48>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	4a06      	ldr	r2, [pc, #24]	; (80002bc <UART_Init+0x48>)
 80002a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a6:	6093      	str	r3, [r2, #8]
	USART1->BRR |= (uint32_t)(5<<0); /* Fraction */
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <UART_Init+0x48>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	4a03      	ldr	r2, [pc, #12]	; (80002bc <UART_Init+0x48>)
 80002ae:	f043 0305 	orr.w	r3, r3, #5
 80002b2:	6093      	str	r3, [r2, #8]

}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40013800 	.word	0x40013800

080002c0 <GPIO_Init>:
/*****************************************************/
void GPIO_Init(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	GPIOA->CRH |= (uint32_t)(2<<6); /* PA9 is Alternate function output Push-pull */
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <GPIO_Init+0x24>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4a06      	ldr	r2, [pc, #24]	; (80002e4 <GPIO_Init+0x24>)
 80002ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ce:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (uint32_t)(3<<4); /* PA9 max speed */
 80002d0:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <GPIO_Init+0x24>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a03      	ldr	r2, [pc, #12]	; (80002e4 <GPIO_Init+0x24>)
 80002d6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80002da:	6053      	str	r3, [r2, #4]
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	40010800 	.word	0x40010800

080002e8 <UartTxMsg>:
/*****************************************************/
void UartTxMsg(uint8_t *data, uint8_t size)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	460b      	mov	r3, r1
 80002f2:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0; i<size; i++)
 80002f4:	2300      	movs	r3, #0
 80002f6:	73fb      	strb	r3, [r7, #15]
 80002f8:	e00f      	b.n	800031a <UartTxMsg+0x32>
	{
		USART1->DR = *(data+i);
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	4413      	add	r3, r2
 8000300:	781a      	ldrb	r2, [r3, #0]
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <UartTxMsg+0x44>)
 8000304:	605a      	str	r2, [r3, #4]
		while((USART1->SR & (uint32_t)(1<<6))==0); /* Wait TC ==1 */
 8000306:	bf00      	nop
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <UartTxMsg+0x44>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0f9      	beq.n	8000308 <UartTxMsg+0x20>
	for(uint8_t i=0; i<size; i++)
 8000314:	7bfb      	ldrb	r3, [r7, #15]
 8000316:	3301      	adds	r3, #1
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	7bfa      	ldrb	r2, [r7, #15]
 800031c:	78fb      	ldrb	r3, [r7, #3]
 800031e:	429a      	cmp	r2, r3
 8000320:	d3eb      	bcc.n	80002fa <UartTxMsg+0x12>
	}
}
 8000322:	bf00      	nop
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40013800 	.word	0x40013800

08000330 <delay>:
/*****************************************************/
void delay(uint32_t time)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	while(time--);
 8000338:	bf00      	nop
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	1e5a      	subs	r2, r3, #1
 800033e:	607a      	str	r2, [r7, #4]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d1fa      	bne.n	800033a <delay+0xa>
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
	...

08000350 <main>:
int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	SystemClockInit();
 8000354:	f7ff ff66 	bl	8000224 <SystemClockInit>
	UART_Init();
 8000358:	f7ff ff8c 	bl	8000274 <UART_Init>
	GPIO_Init();
 800035c:	f7ff ffb0 	bl	80002c0 <GPIO_Init>
	while(1)
	{
		UartTxMsg((uint8_t*)msg, sizeof(msg));
 8000360:	210f      	movs	r1, #15
 8000362:	4803      	ldr	r0, [pc, #12]	; (8000370 <main+0x20>)
 8000364:	f7ff ffc0 	bl	80002e8 <UartTxMsg>
		delay(72000);
 8000368:	4802      	ldr	r0, [pc, #8]	; (8000374 <main+0x24>)
 800036a:	f7ff ffe1 	bl	8000330 <delay>
		UartTxMsg((uint8_t*)msg, sizeof(msg));
 800036e:	e7f7      	b.n	8000360 <main+0x10>
 8000370:	08000504 	.word	0x08000504
 8000374:	00011940 	.word	0x00011940

08000378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000388:	e7fe      	b.n	8000388 <HardFault_Handler+0x4>

0800038a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800038e:	e7fe      	b.n	800038e <MemManage_Handler+0x4>

08000390 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000394:	e7fe      	b.n	8000394 <BusFault_Handler+0x4>

08000396 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800039a:	e7fe      	b.n	800039a <UsageFault_Handler+0x4>

0800039c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003c4:	f000 f85c 	bl	8000480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}

080003cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <SystemInit+0x5c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a14      	ldr	r2, [pc, #80]	; (8000428 <SystemInit+0x5c>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <SystemInit+0x5c>)
 80003de:	685a      	ldr	r2, [r3, #4]
 80003e0:	4911      	ldr	r1, [pc, #68]	; (8000428 <SystemInit+0x5c>)
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <SystemInit+0x60>)
 80003e4:	4013      	ands	r3, r2
 80003e6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <SystemInit+0x5c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <SystemInit+0x5c>)
 80003ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <SystemInit+0x5c>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a0a      	ldr	r2, [pc, #40]	; (8000428 <SystemInit+0x5c>)
 80003fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000402:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <SystemInit+0x5c>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <SystemInit+0x5c>)
 800040a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800040e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <SystemInit+0x5c>)
 8000412:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000416:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <SystemInit+0x64>)
 800041a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800041e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000
 800042c:	f8ff0000 	.word	0xf8ff0000
 8000430:	e000ed00 	.word	0xe000ed00

08000434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000434:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000436:	e003      	b.n	8000440 <LoopCopyDataInit>

08000438 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800043a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800043c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800043e:	3104      	adds	r1, #4

08000440 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000440:	480a      	ldr	r0, [pc, #40]	; (800046c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000444:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000446:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000448:	d3f6      	bcc.n	8000438 <CopyDataInit>
  ldr r2, =_sbss
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800044c:	e002      	b.n	8000454 <LoopFillZerobss>

0800044e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000450:	f842 3b04 	str.w	r3, [r2], #4

08000454 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000456:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000458:	d3f9      	bcc.n	800044e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800045a:	f7ff ffb7 	bl	80003cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800045e:	f000 f821 	bl	80004a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000462:	f7ff ff75 	bl	8000350 <main>
  bx lr
 8000466:	4770      	bx	lr
  ldr r3, =_sidata
 8000468:	0800051c 	.word	0x0800051c
  ldr r0, =_sdata
 800046c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000470:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000474:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000478:	20000024 	.word	0x20000024

0800047c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800047c:	e7fe      	b.n	800047c <ADC1_2_IRQHandler>
	...

08000480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <HAL_IncTick+0x1c>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	461a      	mov	r2, r3
 800048a:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <HAL_IncTick+0x20>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4413      	add	r3, r2
 8000490:	4a03      	ldr	r2, [pc, #12]	; (80004a0 <HAL_IncTick+0x20>)
 8000492:	6013      	str	r3, [r2, #0]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	20000000 	.word	0x20000000
 80004a0:	20000020 	.word	0x20000020

080004a4 <__libc_init_array>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	2500      	movs	r5, #0
 80004a8:	4e0c      	ldr	r6, [pc, #48]	; (80004dc <__libc_init_array+0x38>)
 80004aa:	4c0d      	ldr	r4, [pc, #52]	; (80004e0 <__libc_init_array+0x3c>)
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	10a4      	asrs	r4, r4, #2
 80004b0:	42a5      	cmp	r5, r4
 80004b2:	d109      	bne.n	80004c8 <__libc_init_array+0x24>
 80004b4:	f000 f81a 	bl	80004ec <_init>
 80004b8:	2500      	movs	r5, #0
 80004ba:	4e0a      	ldr	r6, [pc, #40]	; (80004e4 <__libc_init_array+0x40>)
 80004bc:	4c0a      	ldr	r4, [pc, #40]	; (80004e8 <__libc_init_array+0x44>)
 80004be:	1ba4      	subs	r4, r4, r6
 80004c0:	10a4      	asrs	r4, r4, #2
 80004c2:	42a5      	cmp	r5, r4
 80004c4:	d105      	bne.n	80004d2 <__libc_init_array+0x2e>
 80004c6:	bd70      	pop	{r4, r5, r6, pc}
 80004c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004cc:	4798      	blx	r3
 80004ce:	3501      	adds	r5, #1
 80004d0:	e7ee      	b.n	80004b0 <__libc_init_array+0xc>
 80004d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004d6:	4798      	blx	r3
 80004d8:	3501      	adds	r5, #1
 80004da:	e7f2      	b.n	80004c2 <__libc_init_array+0x1e>
 80004dc:	08000514 	.word	0x08000514
 80004e0:	08000514 	.word	0x08000514
 80004e4:	08000514 	.word	0x08000514
 80004e8:	08000518 	.word	0x08000518

080004ec <_init>:
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ee:	bf00      	nop
 80004f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f2:	bc08      	pop	{r3}
 80004f4:	469e      	mov	lr, r3
 80004f6:	4770      	bx	lr

080004f8 <_fini>:
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	bf00      	nop
 80004fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fe:	bc08      	pop	{r3}
 8000500:	469e      	mov	lr, r3
 8000502:	4770      	bx	lr
