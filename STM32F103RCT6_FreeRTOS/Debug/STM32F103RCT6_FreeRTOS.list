
STM32F103RCT6_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003634  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003824  08003824  00013824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a0  080038a0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080038a0  080038a0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038a0  080038a0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080038a8  080038a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080038b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af0  2000007c  0800392c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b6c  0800392c  00021b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00007e9b  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000ef58  00000000  00000000  00027f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001dd9  00000000  00000000  00036e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000940  00000000  00000000  00038c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0006da4a  00000000  00000000  000395b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000888  00000000  00000000  000a7008  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00016261  00000000  00000000  000a7890  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bdaf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002710  00000000  00000000  000bdb6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000007c 	.word	0x2000007c
 800020c:	00000000 	.word	0x00000000
 8000210:	0800380c 	.word	0x0800380c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000080 	.word	0x20000080
 800022c:	0800380c 	.word	0x0800380c

08000230 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000230:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000232:	e003      	b.n	800023c <LoopCopyDataInit>

08000234 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000236:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000238:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800023a:	3104      	adds	r1, #4

0800023c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800023c:	480a      	ldr	r0, [pc, #40]	; (8000268 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800023e:	4b0b      	ldr	r3, [pc, #44]	; (800026c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000240:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000242:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000244:	d3f6      	bcc.n	8000234 <CopyDataInit>
  ldr r2, =_sbss
 8000246:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000248:	e002      	b.n	8000250 <LoopFillZerobss>

0800024a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800024c:	f842 3b04 	str.w	r3, [r2], #4

08000250 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000252:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000254:	d3f9      	bcc.n	800024a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000256:	f003 fa13 	bl	8003680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800025a:	f003 fa49 	bl	80036f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800025e:	f003 f933 	bl	80034c8 <main>
  bx lr
 8000262:	4770      	bx	lr
  ldr r3, =_sidata
 8000264:	080038b0 	.word	0x080038b0
  ldr r0, =_sdata
 8000268:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800026c:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8000270:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8000274:	20001b6c 	.word	0x20001b6c

08000278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000278:	e7fe      	b.n	8000278 <ADC1_2_IRQHandler>
	...

0800027c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000282:	f3ef 8305 	mrs	r3, IPSR
 8000286:	60bb      	str	r3, [r7, #8]
  return(result);
 8000288:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800028a:	2b00      	cmp	r3, #0
 800028c:	d10f      	bne.n	80002ae <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800028e:	f3ef 8310 	mrs	r3, PRIMASK
 8000292:	607b      	str	r3, [r7, #4]
  return(result);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d109      	bne.n	80002ae <osKernelInitialize+0x32>
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <osKernelInitialize+0x60>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2b02      	cmp	r3, #2
 80002a0:	d109      	bne.n	80002b6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80002a2:	f3ef 8311 	mrs	r3, BASEPRI
 80002a6:	603b      	str	r3, [r7, #0]
  return(result);
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d003      	beq.n	80002b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80002ae:	f06f 0305 	mvn.w	r3, #5
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	e00c      	b.n	80002d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <osKernelInitialize+0x60>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d105      	bne.n	80002ca <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <osKernelInitialize+0x60>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	e002      	b.n	80002d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80002ca:	f04f 33ff 	mov.w	r3, #4294967295
 80002ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80002d0:	68fb      	ldr	r3, [r7, #12]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	3714      	adds	r7, #20
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	20000098 	.word	0x20000098

080002e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80002e6:	f3ef 8305 	mrs	r3, IPSR
 80002ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80002ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d10f      	bne.n	8000312 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80002f2:	f3ef 8310 	mrs	r3, PRIMASK
 80002f6:	607b      	str	r3, [r7, #4]
  return(result);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d109      	bne.n	8000312 <osKernelStart+0x32>
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <osKernelStart+0x64>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b02      	cmp	r3, #2
 8000304:	d109      	bne.n	800031a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000306:	f3ef 8311 	mrs	r3, BASEPRI
 800030a:	603b      	str	r3, [r7, #0]
  return(result);
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d003      	beq.n	800031a <osKernelStart+0x3a>
    stat = osErrorISR;
 8000312:	f06f 0305 	mvn.w	r3, #5
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	e00e      	b.n	8000338 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <osKernelStart+0x64>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d107      	bne.n	8000332 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <osKernelStart+0x64>)
 8000324:	2202      	movs	r2, #2
 8000326:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8000328:	f001 f864 	bl	80013f4 <vTaskStartScheduler>
      stat = osOK;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	e002      	b.n	8000338 <osKernelStart+0x58>
    } else {
      stat = osError;
 8000332:	f04f 33ff 	mov.w	r3, #4294967295
 8000336:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8000338:	68fb      	ldr	r3, [r7, #12]
}
 800033a:	4618      	mov	r0, r3
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000098 	.word	0x20000098

08000348 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b092      	sub	sp, #72	; 0x48
 800034c:	af04      	add	r7, sp, #16
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000358:	f3ef 8305 	mrs	r3, IPSR
 800035c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800035e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8000360:	2b00      	cmp	r3, #0
 8000362:	f040 8094 	bne.w	800048e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000366:	f3ef 8310 	mrs	r3, PRIMASK
 800036a:	623b      	str	r3, [r7, #32]
  return(result);
 800036c:	6a3b      	ldr	r3, [r7, #32]
 800036e:	2b00      	cmp	r3, #0
 8000370:	f040 808d 	bne.w	800048e <osThreadNew+0x146>
 8000374:	4b48      	ldr	r3, [pc, #288]	; (8000498 <osThreadNew+0x150>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b02      	cmp	r3, #2
 800037a:	d106      	bne.n	800038a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800037c:	f3ef 8311 	mrs	r3, BASEPRI
 8000380:	61fb      	str	r3, [r7, #28]
  return(result);
 8000382:	69fb      	ldr	r3, [r7, #28]
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 8082 	bne.w	800048e <osThreadNew+0x146>
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d07e      	beq.n	800048e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8000390:	2380      	movs	r3, #128	; 0x80
 8000392:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8000394:	2318      	movs	r3, #24
 8000396:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8000398:	2300      	movs	r3, #0
 800039a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800039c:	f107 031b 	add.w	r3, r7, #27
 80003a0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80003a2:	f04f 33ff 	mov.w	r3, #4294967295
 80003a6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d045      	beq.n	800043a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d002      	beq.n	80003bc <osThreadNew+0x74>
        name = attr->name;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80003ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d008      	beq.n	80003e2 <osThreadNew+0x9a>
 80003d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003d2:	2b38      	cmp	r3, #56	; 0x38
 80003d4:	d805      	bhi.n	80003e2 <osThreadNew+0x9a>
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <osThreadNew+0x9e>
        return (NULL);
 80003e2:	2300      	movs	r3, #0
 80003e4:	e054      	b.n	8000490 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d003      	beq.n	80003f6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	089b      	lsrs	r3, r3, #2
 80003f4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d00e      	beq.n	800041c <osThreadNew+0xd4>
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	2b5b      	cmp	r3, #91	; 0x5b
 8000404:	d90a      	bls.n	800041c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800040a:	2b00      	cmp	r3, #0
 800040c:	d006      	beq.n	800041c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d002      	beq.n	800041c <osThreadNew+0xd4>
        mem = 1;
 8000416:	2301      	movs	r3, #1
 8000418:	62bb      	str	r3, [r7, #40]	; 0x28
 800041a:	e010      	b.n	800043e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d10c      	bne.n	800043e <osThreadNew+0xf6>
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d108      	bne.n	800043e <osThreadNew+0xf6>
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	691b      	ldr	r3, [r3, #16]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d104      	bne.n	800043e <osThreadNew+0xf6>
          mem = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	62bb      	str	r3, [r7, #40]	; 0x28
 8000438:	e001      	b.n	800043e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800043a:	2300      	movs	r3, #0
 800043c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800043e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000440:	2b01      	cmp	r3, #1
 8000442:	d110      	bne.n	8000466 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800044c:	9202      	str	r2, [sp, #8]
 800044e:	9301      	str	r3, [sp, #4]
 8000450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000458:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800045a:	68f8      	ldr	r0, [r7, #12]
 800045c:	f000 fe02 	bl	8001064 <xTaskCreateStatic>
 8000460:	4603      	mov	r3, r0
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	e013      	b.n	800048e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8000466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000468:	2b00      	cmp	r3, #0
 800046a:	d110      	bne.n	800048e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800046c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800046e:	b29a      	uxth	r2, r3
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	9301      	str	r3, [sp, #4]
 8000476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800047e:	68f8      	ldr	r0, [r7, #12]
 8000480:	f000 fe49 	bl	8001116 <xTaskCreate>
 8000484:	4603      	mov	r3, r0
 8000486:	2b01      	cmp	r3, #1
 8000488:	d001      	beq.n	800048e <osThreadNew+0x146>
          hTask = NULL;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800048e:	697b      	ldr	r3, [r7, #20]
}
 8000490:	4618      	mov	r0, r3
 8000492:	3738      	adds	r7, #56	; 0x38
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000098 	.word	0x20000098

0800049c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80004a4:	f3ef 8305 	mrs	r3, IPSR
 80004a8:	613b      	str	r3, [r7, #16]
  return(result);
 80004aa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d10f      	bne.n	80004d0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80004b0:	f3ef 8310 	mrs	r3, PRIMASK
 80004b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d109      	bne.n	80004d0 <osDelay+0x34>
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <osDelay+0x58>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d109      	bne.n	80004d8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80004c4:	f3ef 8311 	mrs	r3, BASEPRI
 80004c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d003      	beq.n	80004d8 <osDelay+0x3c>
    stat = osErrorISR;
 80004d0:	f06f 0305 	mvn.w	r3, #5
 80004d4:	617b      	str	r3, [r7, #20]
 80004d6:	e007      	b.n	80004e8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d002      	beq.n	80004e8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f000 ff52 	bl	800138c <vTaskDelay>
    }
  }

  return (stat);
 80004e8:	697b      	ldr	r3, [r7, #20]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3718      	adds	r7, #24
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000098 	.word	0x20000098

080004f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	4a06      	ldr	r2, [pc, #24]	; (8000520 <vApplicationGetIdleTaskMemory+0x28>)
 8000508:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	4a05      	ldr	r2, [pc, #20]	; (8000524 <vApplicationGetIdleTaskMemory+0x2c>)
 800050e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	601a      	str	r2, [r3, #0]
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	2000009c 	.word	0x2000009c
 8000524:	200000f8 	.word	0x200000f8

08000528 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetTimerTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetTimerTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000546:	601a      	str	r2, [r3, #0]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	200002f8 	.word	0x200002f8
 8000558:	20000354 	.word	0x20000354

0800055c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f103 0208 	add.w	r2, r3, #8
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f04f 32ff 	mov.w	r2, #4294967295
 8000574:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f103 0208 	add.w	r2, r3, #8
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f103 0208 	add.w	r2, r3, #8
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80005b2:	b480      	push	{r7}
 80005b4:	b085      	sub	sp, #20
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	683a      	ldr	r2, [r7, #0]
 80005dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	601a      	str	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060e:	d103      	bne.n	8000618 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	691b      	ldr	r3, [r3, #16]
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	e00c      	b.n	8000632 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3308      	adds	r3, #8
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	e002      	b.n	8000626 <vListInsert+0x2e>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	429a      	cmp	r2, r3
 8000630:	d2f6      	bcs.n	8000620 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	685a      	ldr	r2, [r3, #4]
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
}
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	691b      	ldr	r3, [r3, #16]
 8000674:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	6892      	ldr	r2, [r2, #8]
 800067e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	6852      	ldr	r2, [r2, #4]
 8000688:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	429a      	cmp	r2, r3
 8000692:	d103      	bne.n	800069c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	689a      	ldr	r2, [r3, #8]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	1e5a      	subs	r2, r3, #1
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	681b      	ldr	r3, [r3, #0]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
	...

080006bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d109      	bne.n	80006e4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d4:	f383 8811 	msr	BASEPRI, r3
 80006d8:	f3bf 8f6f 	isb	sy
 80006dc:	f3bf 8f4f 	dsb	sy
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	e7fe      	b.n	80006e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80006e4:	f002 f968 	bl	80029b8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006f0:	68f9      	ldr	r1, [r7, #12]
 80006f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80006f4:	fb01 f303 	mul.w	r3, r1, r3
 80006f8:	441a      	add	r2, r3
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2200      	movs	r2, #0
 8000702:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000714:	3b01      	subs	r3, #1
 8000716:	68f9      	ldr	r1, [r7, #12]
 8000718:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800071a:	fb01 f303 	mul.w	r3, r1, r3
 800071e:	441a      	add	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	22ff      	movs	r2, #255	; 0xff
 8000728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	22ff      	movs	r2, #255	; 0xff
 8000730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d114      	bne.n	8000764 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	691b      	ldr	r3, [r3, #16]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d01a      	beq.n	8000778 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3310      	adds	r3, #16
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f8d8 	bl	80018fc <xTaskRemoveFromEventList>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d012      	beq.n	8000778 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <xQueueGenericReset+0xcc>)
 8000754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	f3bf 8f4f 	dsb	sy
 800075e:	f3bf 8f6f 	isb	sy
 8000762:	e009      	b.n	8000778 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3310      	adds	r3, #16
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff fef7 	bl	800055c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3324      	adds	r3, #36	; 0x24
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fef2 	bl	800055c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000778:	f002 f94c 	bl	8002a14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800077c:	2301      	movs	r3, #1
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000ed04 	.word	0xe000ed04

0800078c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08e      	sub	sp, #56	; 0x38
 8000790:	af02      	add	r7, sp, #8
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
 8000798:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d109      	bne.n	80007b4 <xQueueGenericCreateStatic+0x28>
 80007a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a4:	f383 8811 	msr	BASEPRI, r3
 80007a8:	f3bf 8f6f 	isb	sy
 80007ac:	f3bf 8f4f 	dsb	sy
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80007b2:	e7fe      	b.n	80007b2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d109      	bne.n	80007ce <xQueueGenericCreateStatic+0x42>
 80007ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007be:	f383 8811 	msr	BASEPRI, r3
 80007c2:	f3bf 8f6f 	isb	sy
 80007c6:	f3bf 8f4f 	dsb	sy
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
 80007cc:	e7fe      	b.n	80007cc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d002      	beq.n	80007da <xQueueGenericCreateStatic+0x4e>
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <xQueueGenericCreateStatic+0x52>
 80007da:	2301      	movs	r3, #1
 80007dc:	e000      	b.n	80007e0 <xQueueGenericCreateStatic+0x54>
 80007de:	2300      	movs	r3, #0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d109      	bne.n	80007f8 <xQueueGenericCreateStatic+0x6c>
 80007e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007e8:	f383 8811 	msr	BASEPRI, r3
 80007ec:	f3bf 8f6f 	isb	sy
 80007f0:	f3bf 8f4f 	dsb	sy
 80007f4:	623b      	str	r3, [r7, #32]
 80007f6:	e7fe      	b.n	80007f6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d102      	bne.n	8000804 <xQueueGenericCreateStatic+0x78>
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <xQueueGenericCreateStatic+0x7c>
 8000804:	2301      	movs	r3, #1
 8000806:	e000      	b.n	800080a <xQueueGenericCreateStatic+0x7e>
 8000808:	2300      	movs	r3, #0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d109      	bne.n	8000822 <xQueueGenericCreateStatic+0x96>
 800080e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000812:	f383 8811 	msr	BASEPRI, r3
 8000816:	f3bf 8f6f 	isb	sy
 800081a:	f3bf 8f4f 	dsb	sy
 800081e:	61fb      	str	r3, [r7, #28]
 8000820:	e7fe      	b.n	8000820 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000822:	2350      	movs	r3, #80	; 0x50
 8000824:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	2b50      	cmp	r3, #80	; 0x50
 800082a:	d009      	beq.n	8000840 <xQueueGenericCreateStatic+0xb4>
 800082c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000830:	f383 8811 	msr	BASEPRI, r3
 8000834:	f3bf 8f6f 	isb	sy
 8000838:	f3bf 8f4f 	dsb	sy
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	e7fe      	b.n	800083e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00d      	beq.n	8000866 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800084a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800084c:	2201      	movs	r2, #1
 800084e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000852:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	4613      	mov	r3, r2
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	68b9      	ldr	r1, [r7, #8]
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f000 f805 	bl	8000870 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8000866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000868:	4618      	mov	r0, r3
 800086a:	3730      	adds	r7, #48	; 0x30
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d103      	bne.n	800088c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	e002      	b.n	8000892 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800089e:	2101      	movs	r1, #1
 80008a0:	69b8      	ldr	r0, [r7, #24]
 80008a2:	f7ff ff0b 	bl	80006bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	78fa      	ldrb	r2, [r7, #3]
 80008aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	; 0x38
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
 80008c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008c6:	2300      	movs	r3, #0
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80008ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d109      	bne.n	80008e8 <xQueueGenericSend+0x30>
 80008d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d8:	f383 8811 	msr	BASEPRI, r3
 80008dc:	f3bf 8f6f 	isb	sy
 80008e0:	f3bf 8f4f 	dsb	sy
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80008e6:	e7fe      	b.n	80008e6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d103      	bne.n	80008f6 <xQueueGenericSend+0x3e>
 80008ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d101      	bne.n	80008fa <xQueueGenericSend+0x42>
 80008f6:	2301      	movs	r3, #1
 80008f8:	e000      	b.n	80008fc <xQueueGenericSend+0x44>
 80008fa:	2300      	movs	r3, #0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d109      	bne.n	8000914 <xQueueGenericSend+0x5c>
 8000900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000904:	f383 8811 	msr	BASEPRI, r3
 8000908:	f3bf 8f6f 	isb	sy
 800090c:	f3bf 8f4f 	dsb	sy
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
 8000912:	e7fe      	b.n	8000912 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	2b02      	cmp	r3, #2
 8000918:	d103      	bne.n	8000922 <xQueueGenericSend+0x6a>
 800091a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800091c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800091e:	2b01      	cmp	r3, #1
 8000920:	d101      	bne.n	8000926 <xQueueGenericSend+0x6e>
 8000922:	2301      	movs	r3, #1
 8000924:	e000      	b.n	8000928 <xQueueGenericSend+0x70>
 8000926:	2300      	movs	r3, #0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d109      	bne.n	8000940 <xQueueGenericSend+0x88>
 800092c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000930:	f383 8811 	msr	BASEPRI, r3
 8000934:	f3bf 8f6f 	isb	sy
 8000938:	f3bf 8f4f 	dsb	sy
 800093c:	623b      	str	r3, [r7, #32]
 800093e:	e7fe      	b.n	800093e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000940:	f001 f996 	bl	8001c70 <xTaskGetSchedulerState>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d102      	bne.n	8000950 <xQueueGenericSend+0x98>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d101      	bne.n	8000954 <xQueueGenericSend+0x9c>
 8000950:	2301      	movs	r3, #1
 8000952:	e000      	b.n	8000956 <xQueueGenericSend+0x9e>
 8000954:	2300      	movs	r3, #0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d109      	bne.n	800096e <xQueueGenericSend+0xb6>
 800095a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800095e:	f383 8811 	msr	BASEPRI, r3
 8000962:	f3bf 8f6f 	isb	sy
 8000966:	f3bf 8f4f 	dsb	sy
 800096a:	61fb      	str	r3, [r7, #28]
 800096c:	e7fe      	b.n	800096c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800096e:	f002 f823 	bl	80029b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800097a:	429a      	cmp	r2, r3
 800097c:	d302      	bcc.n	8000984 <xQueueGenericSend+0xcc>
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d129      	bne.n	80009d8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	68b9      	ldr	r1, [r7, #8]
 8000988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800098a:	f000 f9ff 	bl	8000d8c <prvCopyDataToQueue>
 800098e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000994:	2b00      	cmp	r3, #0
 8000996:	d010      	beq.n	80009ba <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800099a:	3324      	adds	r3, #36	; 0x24
 800099c:	4618      	mov	r0, r3
 800099e:	f000 ffad 	bl	80018fc <xTaskRemoveFromEventList>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d013      	beq.n	80009d0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80009a8:	4b3f      	ldr	r3, [pc, #252]	; (8000aa8 <xQueueGenericSend+0x1f0>)
 80009aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	f3bf 8f4f 	dsb	sy
 80009b4:	f3bf 8f6f 	isb	sy
 80009b8:	e00a      	b.n	80009d0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80009ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d007      	beq.n	80009d0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80009c0:	4b39      	ldr	r3, [pc, #228]	; (8000aa8 <xQueueGenericSend+0x1f0>)
 80009c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	f3bf 8f4f 	dsb	sy
 80009cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80009d0:	f002 f820 	bl	8002a14 <vPortExitCritical>
				return pdPASS;
 80009d4:	2301      	movs	r3, #1
 80009d6:	e063      	b.n	8000aa0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80009de:	f002 f819 	bl	8002a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e05c      	b.n	8000aa0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80009e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d106      	bne.n	80009fa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 ffe5 	bl	80019c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80009f6:	2301      	movs	r3, #1
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80009fa:	f002 f80b 	bl	8002a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80009fe:	f000 fd5d 	bl	80014bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000a02:	f001 ffd9 	bl	80029b8 <vPortEnterCritical>
 8000a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a0c:	b25b      	sxtb	r3, r3
 8000a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a12:	d103      	bne.n	8000a1c <xQueueGenericSend+0x164>
 8000a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a22:	b25b      	sxtb	r3, r3
 8000a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a28:	d103      	bne.n	8000a32 <xQueueGenericSend+0x17a>
 8000a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a32:	f001 ffef 	bl	8002a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a36:	1d3a      	adds	r2, r7, #4
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 ffd4 	bl	80019ec <xTaskCheckForTimeOut>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d124      	bne.n	8000a94 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a4c:	f000 fa96 	bl	8000f7c <prvIsQueueFull>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d018      	beq.n	8000a88 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a58:	3310      	adds	r3, #16
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fefe 	bl	8001860 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a66:	f000 fa21 	bl	8000eac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000a6a:	f000 fd35 	bl	80014d8 <xTaskResumeAll>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f47f af7c 	bne.w	800096e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <xQueueGenericSend+0x1f0>)
 8000a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	f3bf 8f4f 	dsb	sy
 8000a82:	f3bf 8f6f 	isb	sy
 8000a86:	e772      	b.n	800096e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a8a:	f000 fa0f 	bl	8000eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000a8e:	f000 fd23 	bl	80014d8 <xTaskResumeAll>
 8000a92:	e76c      	b.n	800096e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a96:	f000 fa09 	bl	8000eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000a9a:	f000 fd1d 	bl	80014d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000a9e:	2300      	movs	r3, #0
		}
	}
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3738      	adds	r7, #56	; 0x38
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	e000ed04 	.word	0xe000ed04

08000aac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08e      	sub	sp, #56	; 0x38
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d109      	bne.n	8000ad8 <xQueueGenericSendFromISR+0x2c>
 8000ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ac8:	f383 8811 	msr	BASEPRI, r3
 8000acc:	f3bf 8f6f 	isb	sy
 8000ad0:	f3bf 8f4f 	dsb	sy
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad6:	e7fe      	b.n	8000ad6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d103      	bne.n	8000ae6 <xQueueGenericSendFromISR+0x3a>
 8000ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d101      	bne.n	8000aea <xQueueGenericSendFromISR+0x3e>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e000      	b.n	8000aec <xQueueGenericSendFromISR+0x40>
 8000aea:	2300      	movs	r3, #0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d109      	bne.n	8000b04 <xQueueGenericSendFromISR+0x58>
 8000af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000af4:	f383 8811 	msr	BASEPRI, r3
 8000af8:	f3bf 8f6f 	isb	sy
 8000afc:	f3bf 8f4f 	dsb	sy
 8000b00:	623b      	str	r3, [r7, #32]
 8000b02:	e7fe      	b.n	8000b02 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d103      	bne.n	8000b12 <xQueueGenericSendFromISR+0x66>
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d101      	bne.n	8000b16 <xQueueGenericSendFromISR+0x6a>
 8000b12:	2301      	movs	r3, #1
 8000b14:	e000      	b.n	8000b18 <xQueueGenericSendFromISR+0x6c>
 8000b16:	2300      	movs	r3, #0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d109      	bne.n	8000b30 <xQueueGenericSendFromISR+0x84>
 8000b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b20:	f383 8811 	msr	BASEPRI, r3
 8000b24:	f3bf 8f6f 	isb	sy
 8000b28:	f3bf 8f4f 	dsb	sy
 8000b2c:	61fb      	str	r3, [r7, #28]
 8000b2e:	e7fe      	b.n	8000b2e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b30:	f001 fffc 	bl	8002b2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000b34:	f3ef 8211 	mrs	r2, BASEPRI
 8000b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b3c:	f383 8811 	msr	BASEPRI, r3
 8000b40:	f3bf 8f6f 	isb	sy
 8000b44:	f3bf 8f4f 	dsb	sy
 8000b48:	61ba      	str	r2, [r7, #24]
 8000b4a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000b4c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d302      	bcc.n	8000b62 <xQueueGenericSendFromISR+0xb6>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d12c      	bne.n	8000bbc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b72:	f000 f90b 	bl	8000d8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000b76:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7e:	d112      	bne.n	8000ba6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d016      	beq.n	8000bb6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b8a:	3324      	adds	r3, #36	; 0x24
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 feb5 	bl	80018fc <xTaskRemoveFromEventList>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d00e      	beq.n	8000bb6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00b      	beq.n	8000bb6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	e007      	b.n	8000bb6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000baa:	3301      	adds	r3, #1
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	b25a      	sxtb	r2, r3
 8000bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000bba:	e001      	b.n	8000bc0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8000bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3738      	adds	r7, #56	; 0x38
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	; 0x30
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d109      	bne.n	8000c02 <xQueueReceive+0x2e>
	__asm volatile
 8000bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bf2:	f383 8811 	msr	BASEPRI, r3
 8000bf6:	f3bf 8f6f 	isb	sy
 8000bfa:	f3bf 8f4f 	dsb	sy
 8000bfe:	623b      	str	r3, [r7, #32]
 8000c00:	e7fe      	b.n	8000c00 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d103      	bne.n	8000c10 <xQueueReceive+0x3c>
 8000c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <xQueueReceive+0x40>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e000      	b.n	8000c16 <xQueueReceive+0x42>
 8000c14:	2300      	movs	r3, #0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d109      	bne.n	8000c2e <xQueueReceive+0x5a>
 8000c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c1e:	f383 8811 	msr	BASEPRI, r3
 8000c22:	f3bf 8f6f 	isb	sy
 8000c26:	f3bf 8f4f 	dsb	sy
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	e7fe      	b.n	8000c2c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c2e:	f001 f81f 	bl	8001c70 <xTaskGetSchedulerState>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <xQueueReceive+0x6a>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <xQueueReceive+0x6e>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <xQueueReceive+0x70>
 8000c42:	2300      	movs	r3, #0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d109      	bne.n	8000c5c <xQueueReceive+0x88>
 8000c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c4c:	f383 8811 	msr	BASEPRI, r3
 8000c50:	f3bf 8f6f 	isb	sy
 8000c54:	f3bf 8f4f 	dsb	sy
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	e7fe      	b.n	8000c5a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000c5c:	f001 feac 	bl	80029b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d01f      	beq.n	8000cac <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c70:	f000 f8f6 	bl	8000e60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	1e5a      	subs	r2, r3, #1
 8000c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d00f      	beq.n	8000ca4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c86:	3310      	adds	r3, #16
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 fe37 	bl	80018fc <xTaskRemoveFromEventList>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d007      	beq.n	8000ca4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000c94:	4b3c      	ldr	r3, [pc, #240]	; (8000d88 <xQueueReceive+0x1b4>)
 8000c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	f3bf 8f4f 	dsb	sy
 8000ca0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000ca4:	f001 feb6 	bl	8002a14 <vPortExitCritical>
				return pdPASS;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e069      	b.n	8000d80 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d103      	bne.n	8000cba <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000cb2:	f001 feaf 	bl	8002a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e062      	b.n	8000d80 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d106      	bne.n	8000cce <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fe7b 	bl	80019c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000cce:	f001 fea1 	bl	8002a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000cd2:	f000 fbf3 	bl	80014bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000cd6:	f001 fe6f 	bl	80029b8 <vPortEnterCritical>
 8000cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce6:	d103      	bne.n	8000cf0 <xQueueReceive+0x11c>
 8000ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d103      	bne.n	8000d06 <xQueueReceive+0x132>
 8000cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d06:	f001 fe85 	bl	8002a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d0a:	1d3a      	adds	r2, r7, #4
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fe6a 	bl	80019ec <xTaskCheckForTimeOut>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d123      	bne.n	8000d66 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d20:	f000 f916 	bl	8000f50 <prvIsQueueEmpty>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d017      	beq.n	8000d5a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2c:	3324      	adds	r3, #36	; 0x24
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	4611      	mov	r1, r2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fd94 	bl	8001860 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d3a:	f000 f8b7 	bl	8000eac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000d3e:	f000 fbcb 	bl	80014d8 <xTaskResumeAll>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d189      	bne.n	8000c5c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <xQueueReceive+0x1b4>)
 8000d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	f3bf 8f4f 	dsb	sy
 8000d54:	f3bf 8f6f 	isb	sy
 8000d58:	e780      	b.n	8000c5c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d5c:	f000 f8a6 	bl	8000eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000d60:	f000 fbba 	bl	80014d8 <xTaskResumeAll>
 8000d64:	e77a      	b.n	8000c5c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d68:	f000 f8a0 	bl	8000eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000d6c:	f000 fbb4 	bl	80014d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d72:	f000 f8ed 	bl	8000f50 <prvIsQueueEmpty>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f43f af6f 	beq.w	8000c5c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000d7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3730      	adds	r7, #48	; 0x30
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	e000ed04 	.word	0xe000ed04

08000d8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10d      	bne.n	8000dc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d14d      	bne.n	8000e4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 ff78 	bl	8001cac <xTaskPriorityDisinherit>
 8000dbc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	e043      	b.n	8000e4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d119      	bne.n	8000e00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6898      	ldr	r0, [r3, #8]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	f002 fcb6 	bl	8003748 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	441a      	add	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d32b      	bcc.n	8000e4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	e026      	b.n	8000e4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	68d8      	ldr	r0, [r3, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68b9      	ldr	r1, [r7, #8]
 8000e0c:	f002 fc9c 	bl	8003748 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	425b      	negs	r3, r3
 8000e1a:	441a      	add	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	425b      	negs	r3, r3
 8000e36:	441a      	add	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d105      	bne.n	8000e4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000e56:	697b      	ldr	r3, [r7, #20]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d018      	beq.n	8000ea4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	441a      	add	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d303      	bcc.n	8000e94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68d9      	ldr	r1, [r3, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	6838      	ldr	r0, [r7, #0]
 8000ea0:	f002 fc52 	bl	8003748 <memcpy>
	}
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000eb4:	f001 fd80 	bl	80029b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ebe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ec0:	e011      	b.n	8000ee6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d012      	beq.n	8000ef0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3324      	adds	r3, #36	; 0x24
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fd14 	bl	80018fc <xTaskRemoveFromEventList>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8000eda:	f000 fde7 	bl	8001aac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	dce9      	bgt.n	8000ec2 <prvUnlockQueue+0x16>
 8000eee:	e000      	b.n	8000ef2 <prvUnlockQueue+0x46>
					break;
 8000ef0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	22ff      	movs	r2, #255	; 0xff
 8000ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8000efa:	f001 fd8b 	bl	8002a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000efe:	f001 fd5b 	bl	80029b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f0a:	e011      	b.n	8000f30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d012      	beq.n	8000f3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3310      	adds	r3, #16
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fcef 	bl	80018fc <xTaskRemoveFromEventList>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8000f24:	f000 fdc2 	bl	8001aac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dce9      	bgt.n	8000f0c <prvUnlockQueue+0x60>
 8000f38:	e000      	b.n	8000f3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8000f3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	22ff      	movs	r2, #255	; 0xff
 8000f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8000f44:	f001 fd66 	bl	8002a14 <vPortExitCritical>
}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000f58:	f001 fd2e 	bl	80029b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000f64:	2301      	movs	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	e001      	b.n	8000f6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000f6e:	f001 fd51 	bl	8002a14 <vPortExitCritical>

	return xReturn;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000f84:	f001 fd18 	bl	80029b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d102      	bne.n	8000f9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8000f94:	2301      	movs	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e001      	b.n	8000f9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000f9e:	f001 fd39 	bl	8002a14 <vPortExitCritical>

	return xReturn;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	e014      	b.n	8000fe6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <vQueueAddToRegistry+0x4c>)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d10b      	bne.n	8000fe0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000fc8:	490b      	ldr	r1, [pc, #44]	; (8000ff8 <vQueueAddToRegistry+0x4c>)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8000fd2:	4a09      	ldr	r2, [pc, #36]	; (8000ff8 <vQueueAddToRegistry+0x4c>)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	4413      	add	r3, r2
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8000fde:	e005      	b.n	8000fec <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2b07      	cmp	r3, #7
 8000fea:	d9e7      	bls.n	8000fbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20001b2c 	.word	0x20001b2c

08000ffc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800100c:	f001 fcd4 	bl	80029b8 <vPortEnterCritical>
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001016:	b25b      	sxtb	r3, r3
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800101c:	d103      	bne.n	8001026 <vQueueWaitForMessageRestricted+0x2a>
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800102c:	b25b      	sxtb	r3, r3
 800102e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001032:	d103      	bne.n	800103c <vQueueWaitForMessageRestricted+0x40>
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800103c:	f001 fcea 	bl	8002a14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001044:	2b00      	cmp	r3, #0
 8001046:	d106      	bne.n	8001056 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3324      	adds	r3, #36	; 0x24
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 fc29 	bl	80018a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ff28 	bl	8000eac <prvUnlockQueue>
	}
 800105c:	bf00      	nop
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08e      	sub	sp, #56	; 0x38
 8001068:	af04      	add	r7, sp, #16
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001074:	2b00      	cmp	r3, #0
 8001076:	d109      	bne.n	800108c <xTaskCreateStatic+0x28>
 8001078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800107c:	f383 8811 	msr	BASEPRI, r3
 8001080:	f3bf 8f6f 	isb	sy
 8001084:	f3bf 8f4f 	dsb	sy
 8001088:	623b      	str	r3, [r7, #32]
 800108a:	e7fe      	b.n	800108a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800108c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800108e:	2b00      	cmp	r3, #0
 8001090:	d109      	bne.n	80010a6 <xTaskCreateStatic+0x42>
 8001092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001096:	f383 8811 	msr	BASEPRI, r3
 800109a:	f3bf 8f6f 	isb	sy
 800109e:	f3bf 8f4f 	dsb	sy
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	e7fe      	b.n	80010a4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80010a6:	235c      	movs	r3, #92	; 0x5c
 80010a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	2b5c      	cmp	r3, #92	; 0x5c
 80010ae:	d009      	beq.n	80010c4 <xTaskCreateStatic+0x60>
 80010b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b4:	f383 8811 	msr	BASEPRI, r3
 80010b8:	f3bf 8f6f 	isb	sy
 80010bc:	f3bf 8f4f 	dsb	sy
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	e7fe      	b.n	80010c2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80010c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d01e      	beq.n	8001108 <xTaskCreateStatic+0xa4>
 80010ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d01b      	beq.n	8001108 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80010d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	2202      	movs	r2, #2
 80010de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80010e2:	2300      	movs	r3, #0
 80010e4:	9303      	str	r3, [sp, #12]
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 f850 	bl	80011a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001102:	f000 f8d3 	bl	80012ac <prvAddNewTaskToReadyList>
 8001106:	e001      	b.n	800110c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800110c:	697b      	ldr	r3, [r7, #20]
	}
 800110e:	4618      	mov	r0, r3
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001116:	b580      	push	{r7, lr}
 8001118:	b08c      	sub	sp, #48	; 0x30
 800111a:	af04      	add	r7, sp, #16
 800111c:	60f8      	str	r0, [r7, #12]
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	4613      	mov	r3, r2
 8001124:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4618      	mov	r0, r3
 800112c:	f001 f988 	bl	8002440 <pvPortMalloc>
 8001130:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00e      	beq.n	8001156 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001138:	205c      	movs	r0, #92	; 0x5c
 800113a:	f001 f981 	bl	8002440 <pvPortMalloc>
 800113e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	631a      	str	r2, [r3, #48]	; 0x30
 800114c:	e005      	b.n	800115a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f001 fa38 	bl	80025c4 <vPortFree>
 8001154:	e001      	b.n	800115a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d017      	beq.n	8001190 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001168:	88fa      	ldrh	r2, [r7, #6]
 800116a:	2300      	movs	r3, #0
 800116c:	9303      	str	r3, [sp, #12]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	9302      	str	r3, [sp, #8]
 8001172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f000 f80e 	bl	80011a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001184:	69f8      	ldr	r0, [r7, #28]
 8001186:	f000 f891 	bl	80012ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	e002      	b.n	8001196 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001196:	69bb      	ldr	r3, [r7, #24]
	}
 8001198:	4618      	mov	r0, r3
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80011ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	461a      	mov	r2, r3
 80011b8:	21a5      	movs	r1, #165	; 0xa5
 80011ba:	f002 fad0 	bl	800375e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80011be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011c8:	3b01      	subs	r3, #1
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	f023 0307 	bic.w	r3, r3, #7
 80011d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d009      	beq.n	80011f6 <prvInitialiseNewTask+0x56>
 80011e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011e6:	f383 8811 	msr	BASEPRI, r3
 80011ea:	f3bf 8f6f 	isb	sy
 80011ee:	f3bf 8f4f 	dsb	sy
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e7fe      	b.n	80011f4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	e012      	b.n	8001222 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	4413      	add	r3, r2
 8001202:	7819      	ldrb	r1, [r3, #0]
 8001204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	4413      	add	r3, r2
 800120a:	3334      	adds	r3, #52	; 0x34
 800120c:	460a      	mov	r2, r1
 800120e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	3301      	adds	r3, #1
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d9e9      	bls.n	80011fc <prvInitialiseNewTask+0x5c>
 8001228:	e000      	b.n	800122c <prvInitialiseNewTask+0x8c>
		{
			break;
 800122a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	2b37      	cmp	r3, #55	; 0x37
 8001238:	d901      	bls.n	800123e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800123a:	2337      	movs	r3, #55	; 0x37
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001248:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124c:	2200      	movs	r2, #0
 800124e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001252:	3304      	adds	r3, #4
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f9a0 	bl	800059a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125c:	3318      	adds	r3, #24
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f99b 	bl	800059a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001268:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800126a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001272:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800127a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127c:	2200      	movs	r2, #0
 800127e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	68f9      	ldr	r1, [r7, #12]
 800128c:	69b8      	ldr	r0, [r7, #24]
 800128e:	f001 faab 	bl	80027e8 <pxPortInitialiseStack>
 8001292:	4602      	mov	r2, r0
 8001294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001296:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129a:	2b00      	cmp	r3, #0
 800129c:	d002      	beq.n	80012a4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800129e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80012a4:	bf00      	nop
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80012b4:	f001 fb80 	bl	80029b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80012b8:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <prvAddNewTaskToReadyList+0xc4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a2c      	ldr	r2, [pc, #176]	; (8001370 <prvAddNewTaskToReadyList+0xc4>)
 80012c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80012c2:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <prvAddNewTaskToReadyList+0xc8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80012ca:	4a2a      	ldr	r2, [pc, #168]	; (8001374 <prvAddNewTaskToReadyList+0xc8>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <prvAddNewTaskToReadyList+0xc4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d110      	bne.n	80012fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80012d8:	f000 fc0c 	bl	8001af4 <prvInitialiseTaskLists>
 80012dc:	e00d      	b.n	80012fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80012de:	4b26      	ldr	r3, [pc, #152]	; (8001378 <prvAddNewTaskToReadyList+0xcc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <prvAddNewTaskToReadyList+0xc8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d802      	bhi.n	80012fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80012f4:	4a1f      	ldr	r2, [pc, #124]	; (8001374 <prvAddNewTaskToReadyList+0xc8>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <prvAddNewTaskToReadyList+0xd0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	4a1e      	ldr	r2, [pc, #120]	; (800137c <prvAddNewTaskToReadyList+0xd0>)
 8001302:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <prvAddNewTaskToReadyList+0xd0>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <prvAddNewTaskToReadyList+0xd4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d903      	bls.n	8001320 <prvAddNewTaskToReadyList+0x74>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	4a18      	ldr	r2, [pc, #96]	; (8001380 <prvAddNewTaskToReadyList+0xd4>)
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4a15      	ldr	r2, [pc, #84]	; (8001384 <prvAddNewTaskToReadyList+0xd8>)
 800132e:	441a      	add	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3304      	adds	r3, #4
 8001334:	4619      	mov	r1, r3
 8001336:	4610      	mov	r0, r2
 8001338:	f7ff f93b 	bl	80005b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800133c:	f001 fb6a 	bl	8002a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <prvAddNewTaskToReadyList+0xcc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00e      	beq.n	8001366 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <prvAddNewTaskToReadyList+0xc8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	429a      	cmp	r2, r3
 8001354:	d207      	bcs.n	8001366 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <prvAddNewTaskToReadyList+0xdc>)
 8001358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	f3bf 8f4f 	dsb	sy
 8001362:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000c28 	.word	0x20000c28
 8001374:	20000754 	.word	0x20000754
 8001378:	20000c34 	.word	0x20000c34
 800137c:	20000c44 	.word	0x20000c44
 8001380:	20000c30 	.word	0x20000c30
 8001384:	20000758 	.word	0x20000758
 8001388:	e000ed04 	.word	0xe000ed04

0800138c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d016      	beq.n	80013cc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <vTaskDelay+0x60>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d009      	beq.n	80013ba <vTaskDelay+0x2e>
 80013a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013aa:	f383 8811 	msr	BASEPRI, r3
 80013ae:	f3bf 8f6f 	isb	sy
 80013b2:	f3bf 8f4f 	dsb	sy
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	e7fe      	b.n	80013b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80013ba:	f000 f87f 	bl	80014bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80013be:	2100      	movs	r1, #0
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 fcdf 	bl	8001d84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80013c6:	f000 f887 	bl	80014d8 <xTaskResumeAll>
 80013ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d107      	bne.n	80013e2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <vTaskDelay+0x64>)
 80013d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	f3bf 8f4f 	dsb	sy
 80013de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000c50 	.word	0x20000c50
 80013f0:	e000ed04 	.word	0xe000ed04

080013f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001402:	463a      	mov	r2, r7
 8001404:	1d39      	adds	r1, r7, #4
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f874 	bl	80004f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001410:	6839      	ldr	r1, [r7, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	9202      	str	r2, [sp, #8]
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	2300      	movs	r3, #0
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2300      	movs	r3, #0
 8001420:	460a      	mov	r2, r1
 8001422:	4920      	ldr	r1, [pc, #128]	; (80014a4 <vTaskStartScheduler+0xb0>)
 8001424:	4820      	ldr	r0, [pc, #128]	; (80014a8 <vTaskStartScheduler+0xb4>)
 8001426:	f7ff fe1d 	bl	8001064 <xTaskCreateStatic>
 800142a:	4602      	mov	r2, r0
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <vTaskStartScheduler+0xb8>)
 800142e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <vTaskStartScheduler+0xb8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001438:	2301      	movs	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e001      	b.n	8001442 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d102      	bne.n	800144e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001448:	f000 fcf0 	bl	8001e2c <xTimerCreateTimerTask>
 800144c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d115      	bne.n	8001480 <vTaskStartScheduler+0x8c>
 8001454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001458:	f383 8811 	msr	BASEPRI, r3
 800145c:	f3bf 8f6f 	isb	sy
 8001460:	f3bf 8f4f 	dsb	sy
 8001464:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <vTaskStartScheduler+0xbc>)
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <vTaskStartScheduler+0xc0>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <vTaskStartScheduler+0xc4>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800147a:	f001 fa2d 	bl	80028d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800147e:	e00d      	b.n	800149c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001486:	d109      	bne.n	800149c <vTaskStartScheduler+0xa8>
 8001488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800148c:	f383 8811 	msr	BASEPRI, r3
 8001490:	f3bf 8f6f 	isb	sy
 8001494:	f3bf 8f4f 	dsb	sy
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	e7fe      	b.n	800149a <vTaskStartScheduler+0xa6>
}
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	08003824 	.word	0x08003824
 80014a8:	08001ac5 	.word	0x08001ac5
 80014ac:	20000c4c 	.word	0x20000c4c
 80014b0:	20000c48 	.word	0x20000c48
 80014b4:	20000c34 	.word	0x20000c34
 80014b8:	20000c2c 	.word	0x20000c2c

080014bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <vTaskSuspendAll+0x18>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a03      	ldr	r2, [pc, #12]	; (80014d4 <vTaskSuspendAll+0x18>)
 80014c8:	6013      	str	r3, [r2, #0]
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000c50 	.word	0x20000c50

080014d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80014e6:	4b41      	ldr	r3, [pc, #260]	; (80015ec <xTaskResumeAll+0x114>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d109      	bne.n	8001502 <xTaskResumeAll+0x2a>
 80014ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f2:	f383 8811 	msr	BASEPRI, r3
 80014f6:	f3bf 8f6f 	isb	sy
 80014fa:	f3bf 8f4f 	dsb	sy
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	e7fe      	b.n	8001500 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001502:	f001 fa59 	bl	80029b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <xTaskResumeAll+0x114>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3b01      	subs	r3, #1
 800150c:	4a37      	ldr	r2, [pc, #220]	; (80015ec <xTaskResumeAll+0x114>)
 800150e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001510:	4b36      	ldr	r3, [pc, #216]	; (80015ec <xTaskResumeAll+0x114>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d162      	bne.n	80015de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001518:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <xTaskResumeAll+0x118>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d05e      	beq.n	80015de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001520:	e02f      	b.n	8001582 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001522:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <xTaskResumeAll+0x11c>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3318      	adds	r3, #24
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f89a 	bl	8000668 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3304      	adds	r3, #4
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f895 	bl	8000668 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001542:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <xTaskResumeAll+0x120>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d903      	bls.n	8001552 <xTaskResumeAll+0x7a>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	4a2a      	ldr	r2, [pc, #168]	; (80015f8 <xTaskResumeAll+0x120>)
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4a27      	ldr	r2, [pc, #156]	; (80015fc <xTaskResumeAll+0x124>)
 8001560:	441a      	add	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3304      	adds	r3, #4
 8001566:	4619      	mov	r1, r3
 8001568:	4610      	mov	r0, r2
 800156a:	f7ff f822 	bl	80005b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001572:	4b23      	ldr	r3, [pc, #140]	; (8001600 <xTaskResumeAll+0x128>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	429a      	cmp	r2, r3
 800157a:	d302      	bcc.n	8001582 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800157c:	4b21      	ldr	r3, [pc, #132]	; (8001604 <xTaskResumeAll+0x12c>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <xTaskResumeAll+0x11c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1cb      	bne.n	8001522 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001590:	f000 fb4a 	bl	8001c28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <xTaskResumeAll+0x130>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d010      	beq.n	80015c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80015a0:	f000 f844 	bl	800162c <xTaskIncrementTick>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <xTaskResumeAll+0x12c>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f1      	bne.n	80015a0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <xTaskResumeAll+0x130>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <xTaskResumeAll+0x12c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d009      	beq.n	80015de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <xTaskResumeAll+0x134>)
 80015d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	f3bf 8f4f 	dsb	sy
 80015da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80015de:	f001 fa19 	bl	8002a14 <vPortExitCritical>

	return xAlreadyYielded;
 80015e2:	68bb      	ldr	r3, [r7, #8]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000c50 	.word	0x20000c50
 80015f0:	20000c28 	.word	0x20000c28
 80015f4:	20000be8 	.word	0x20000be8
 80015f8:	20000c30 	.word	0x20000c30
 80015fc:	20000758 	.word	0x20000758
 8001600:	20000754 	.word	0x20000754
 8001604:	20000c3c 	.word	0x20000c3c
 8001608:	20000c38 	.word	0x20000c38
 800160c:	e000ed04 	.word	0xe000ed04

08001610 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <xTaskGetTickCount+0x18>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	20000c2c 	.word	0x20000c2c

0800162c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001636:	4b51      	ldr	r3, [pc, #324]	; (800177c <xTaskIncrementTick+0x150>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 808d 	bne.w	800175a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001640:	4b4f      	ldr	r3, [pc, #316]	; (8001780 <xTaskIncrementTick+0x154>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001648:	4a4d      	ldr	r2, [pc, #308]	; (8001780 <xTaskIncrementTick+0x154>)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d11f      	bne.n	8001694 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001654:	4b4b      	ldr	r3, [pc, #300]	; (8001784 <xTaskIncrementTick+0x158>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <xTaskIncrementTick+0x46>
 800165e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001662:	f383 8811 	msr	BASEPRI, r3
 8001666:	f3bf 8f6f 	isb	sy
 800166a:	f3bf 8f4f 	dsb	sy
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	e7fe      	b.n	8001670 <xTaskIncrementTick+0x44>
 8001672:	4b44      	ldr	r3, [pc, #272]	; (8001784 <xTaskIncrementTick+0x158>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	4b43      	ldr	r3, [pc, #268]	; (8001788 <xTaskIncrementTick+0x15c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a41      	ldr	r2, [pc, #260]	; (8001784 <xTaskIncrementTick+0x158>)
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4a41      	ldr	r2, [pc, #260]	; (8001788 <xTaskIncrementTick+0x15c>)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b41      	ldr	r3, [pc, #260]	; (800178c <xTaskIncrementTick+0x160>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	4a3f      	ldr	r2, [pc, #252]	; (800178c <xTaskIncrementTick+0x160>)
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	f000 faca 	bl	8001c28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001694:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <xTaskIncrementTick+0x164>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	429a      	cmp	r2, r3
 800169c:	d34e      	bcc.n	800173c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800169e:	4b39      	ldr	r3, [pc, #228]	; (8001784 <xTaskIncrementTick+0x158>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <xTaskIncrementTick+0x80>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <xTaskIncrementTick+0x82>
 80016ac:	2300      	movs	r3, #0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016b2:	4b37      	ldr	r3, [pc, #220]	; (8001790 <xTaskIncrementTick+0x164>)
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295
 80016b8:	601a      	str	r2, [r3, #0]
					break;
 80016ba:	e03f      	b.n	800173c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80016bc:	4b31      	ldr	r3, [pc, #196]	; (8001784 <xTaskIncrementTick+0x158>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d203      	bcs.n	80016dc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80016d4:	4a2e      	ldr	r2, [pc, #184]	; (8001790 <xTaskIncrementTick+0x164>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
						break;
 80016da:	e02f      	b.n	800173c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	3304      	adds	r3, #4
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ffc1 	bl	8000668 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d004      	beq.n	80016f8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3318      	adds	r3, #24
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ffb8 	bl	8000668 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016fc:	4b25      	ldr	r3, [pc, #148]	; (8001794 <xTaskIncrementTick+0x168>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d903      	bls.n	800170c <xTaskIncrementTick+0xe0>
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	4a22      	ldr	r2, [pc, #136]	; (8001794 <xTaskIncrementTick+0x168>)
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <xTaskIncrementTick+0x16c>)
 800171a:	441a      	add	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3304      	adds	r3, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4610      	mov	r0, r2
 8001724:	f7fe ff45 	bl	80005b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <xTaskIncrementTick+0x170>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	429a      	cmp	r2, r3
 8001734:	d3b3      	bcc.n	800169e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001736:	2301      	movs	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800173a:	e7b0      	b.n	800169e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <xTaskIncrementTick+0x170>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001742:	4915      	ldr	r1, [pc, #84]	; (8001798 <xTaskIncrementTick+0x16c>)
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d907      	bls.n	8001764 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001754:	2301      	movs	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e004      	b.n	8001764 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <xTaskIncrementTick+0x174>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <xTaskIncrementTick+0x174>)
 8001762:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <xTaskIncrementTick+0x178>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800176c:	2301      	movs	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001770:	697b      	ldr	r3, [r7, #20]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000c50 	.word	0x20000c50
 8001780:	20000c2c 	.word	0x20000c2c
 8001784:	20000be0 	.word	0x20000be0
 8001788:	20000be4 	.word	0x20000be4
 800178c:	20000c40 	.word	0x20000c40
 8001790:	20000c48 	.word	0x20000c48
 8001794:	20000c30 	.word	0x20000c30
 8001798:	20000758 	.word	0x20000758
 800179c:	20000754 	.word	0x20000754
 80017a0:	20000c38 	.word	0x20000c38
 80017a4:	20000c3c 	.word	0x20000c3c

080017a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <vTaskSwitchContext+0xa4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <vTaskSwitchContext+0xa8>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80017bc:	e040      	b.n	8001840 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <vTaskSwitchContext+0xa8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <vTaskSwitchContext+0xac>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	e00f      	b.n	80017ec <vTaskSwitchContext+0x44>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <vTaskSwitchContext+0x3e>
 80017d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d6:	f383 8811 	msr	BASEPRI, r3
 80017da:	f3bf 8f6f 	isb	sy
 80017de:	f3bf 8f4f 	dsb	sy
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	e7fe      	b.n	80017e4 <vTaskSwitchContext+0x3c>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	491a      	ldr	r1, [pc, #104]	; (8001858 <vTaskSwitchContext+0xb0>)
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0e5      	beq.n	80017cc <vTaskSwitchContext+0x24>
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4a13      	ldr	r2, [pc, #76]	; (8001858 <vTaskSwitchContext+0xb0>)
 800180c:	4413      	add	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	3308      	adds	r3, #8
 8001822:	429a      	cmp	r2, r3
 8001824:	d104      	bne.n	8001830 <vTaskSwitchContext+0x88>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	4a09      	ldr	r2, [pc, #36]	; (800185c <vTaskSwitchContext+0xb4>)
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4a06      	ldr	r2, [pc, #24]	; (8001854 <vTaskSwitchContext+0xac>)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000c50 	.word	0x20000c50
 8001850:	20000c3c 	.word	0x20000c3c
 8001854:	20000c30 	.word	0x20000c30
 8001858:	20000758 	.word	0x20000758
 800185c:	20000754 	.word	0x20000754

08001860 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <vTaskPlaceOnEventList+0x24>
 8001870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001874:	f383 8811 	msr	BASEPRI, r3
 8001878:	f3bf 8f6f 	isb	sy
 800187c:	f3bf 8f4f 	dsb	sy
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	e7fe      	b.n	8001882 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <vTaskPlaceOnEventList+0x44>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3318      	adds	r3, #24
 800188a:	4619      	mov	r1, r3
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7fe feb3 	bl	80005f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001892:	2101      	movs	r1, #1
 8001894:	6838      	ldr	r0, [r7, #0]
 8001896:	f000 fa75 	bl	8001d84 <prvAddCurrentTaskToDelayedList>
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000754 	.word	0x20000754

080018a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <vTaskPlaceOnEventListRestricted+0x26>
 80018ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018be:	f383 8811 	msr	BASEPRI, r3
 80018c2:	f3bf 8f6f 	isb	sy
 80018c6:	f3bf 8f4f 	dsb	sy
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e7fe      	b.n	80018cc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <vTaskPlaceOnEventListRestricted+0x50>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	3318      	adds	r3, #24
 80018d4:	4619      	mov	r1, r3
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f7fe fe6b 	bl	80005b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	68b8      	ldr	r0, [r7, #8]
 80018ec:	f000 fa4a 	bl	8001d84 <prvAddCurrentTaskToDelayedList>
	}
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000754 	.word	0x20000754

080018fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <xTaskRemoveFromEventList+0x2a>
 8001912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001916:	f383 8811 	msr	BASEPRI, r3
 800191a:	f3bf 8f6f 	isb	sy
 800191e:	f3bf 8f4f 	dsb	sy
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e7fe      	b.n	8001924 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	3318      	adds	r3, #24
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fe9c 	bl	8000668 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <xTaskRemoveFromEventList+0xac>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d11d      	bne.n	8001974 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	3304      	adds	r3, #4
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fe93 	bl	8000668 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <xTaskRemoveFromEventList+0xb0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d903      	bls.n	8001956 <xTaskRemoveFromEventList+0x5a>
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	4a16      	ldr	r2, [pc, #88]	; (80019ac <xTaskRemoveFromEventList+0xb0>)
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <xTaskRemoveFromEventList+0xb4>)
 8001964:	441a      	add	r2, r3
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	3304      	adds	r3, #4
 800196a:	4619      	mov	r1, r3
 800196c:	4610      	mov	r0, r2
 800196e:	f7fe fe20 	bl	80005b2 <vListInsertEnd>
 8001972:	e005      	b.n	8001980 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	3318      	adds	r3, #24
 8001978:	4619      	mov	r1, r3
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <xTaskRemoveFromEventList+0xb8>)
 800197c:	f7fe fe19 	bl	80005b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <xTaskRemoveFromEventList+0xbc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	429a      	cmp	r2, r3
 800198c:	d905      	bls.n	800199a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800198e:	2301      	movs	r3, #1
 8001990:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <xTaskRemoveFromEventList+0xc0>)
 8001994:	2201      	movs	r2, #1
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	e001      	b.n	800199e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800199e:	697b      	ldr	r3, [r7, #20]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000c50 	.word	0x20000c50
 80019ac:	20000c30 	.word	0x20000c30
 80019b0:	20000758 	.word	0x20000758
 80019b4:	20000be8 	.word	0x20000be8
 80019b8:	20000754 	.word	0x20000754
 80019bc:	20000c3c 	.word	0x20000c3c

080019c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <vTaskInternalSetTimeOutState+0x24>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <vTaskInternalSetTimeOutState+0x28>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000c40 	.word	0x20000c40
 80019e8:	20000c2c 	.word	0x20000c2c

080019ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d109      	bne.n	8001a10 <xTaskCheckForTimeOut+0x24>
 80019fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a00:	f383 8811 	msr	BASEPRI, r3
 8001a04:	f3bf 8f6f 	isb	sy
 8001a08:	f3bf 8f4f 	dsb	sy
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	e7fe      	b.n	8001a0e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <xTaskCheckForTimeOut+0x3e>
 8001a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1a:	f383 8811 	msr	BASEPRI, r3
 8001a1e:	f3bf 8f6f 	isb	sy
 8001a22:	f3bf 8f4f 	dsb	sy
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e7fe      	b.n	8001a28 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001a2a:	f000 ffc5 	bl	80029b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <xTaskCheckForTimeOut+0xb8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a46:	d102      	bne.n	8001a4e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	e023      	b.n	8001a96 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <xTaskCheckForTimeOut+0xbc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d007      	beq.n	8001a6a <xTaskCheckForTimeOut+0x7e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d302      	bcc.n	8001a6a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	e015      	b.n	8001a96 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d20b      	bcs.n	8001a8c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	1ad2      	subs	r2, r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff9d 	bl	80019c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e004      	b.n	8001a96 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001a92:	2301      	movs	r3, #1
 8001a94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001a96:	f000 ffbd 	bl	8002a14 <vPortExitCritical>

	return xReturn;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000c2c 	.word	0x20000c2c
 8001aa8:	20000c40 	.word	0x20000c40

08001aac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <vTaskMissedYield+0x14>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000c3c 	.word	0x20000c3c

08001ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001acc:	f000 f852 	bl	8001b74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <prvIdleTask+0x28>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d9f9      	bls.n	8001acc <prvIdleTask+0x8>
			{
				taskYIELD();
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <prvIdleTask+0x2c>)
 8001ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	f3bf 8f4f 	dsb	sy
 8001ae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001ae8:	e7f0      	b.n	8001acc <prvIdleTask+0x8>
 8001aea:	bf00      	nop
 8001aec:	20000758 	.word	0x20000758
 8001af0:	e000ed04 	.word	0xe000ed04

08001af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	e00c      	b.n	8001b1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <prvInitialiseTaskLists+0x60>)
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd24 	bl	800055c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3301      	adds	r3, #1
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b37      	cmp	r3, #55	; 0x37
 8001b1e:	d9ef      	bls.n	8001b00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <prvInitialiseTaskLists+0x64>)
 8001b22:	f7fe fd1b 	bl	800055c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <prvInitialiseTaskLists+0x68>)
 8001b28:	f7fe fd18 	bl	800055c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <prvInitialiseTaskLists+0x6c>)
 8001b2e:	f7fe fd15 	bl	800055c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001b32:	480c      	ldr	r0, [pc, #48]	; (8001b64 <prvInitialiseTaskLists+0x70>)
 8001b34:	f7fe fd12 	bl	800055c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001b38:	480b      	ldr	r0, [pc, #44]	; (8001b68 <prvInitialiseTaskLists+0x74>)
 8001b3a:	f7fe fd0f 	bl	800055c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <prvInitialiseTaskLists+0x78>)
 8001b40:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <prvInitialiseTaskLists+0x64>)
 8001b42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <prvInitialiseTaskLists+0x7c>)
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <prvInitialiseTaskLists+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000758 	.word	0x20000758
 8001b58:	20000bb8 	.word	0x20000bb8
 8001b5c:	20000bcc 	.word	0x20000bcc
 8001b60:	20000be8 	.word	0x20000be8
 8001b64:	20000bfc 	.word	0x20000bfc
 8001b68:	20000c14 	.word	0x20000c14
 8001b6c:	20000be0 	.word	0x20000be0
 8001b70:	20000be4 	.word	0x20000be4

08001b74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b7a:	e019      	b.n	8001bb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001b7c:	f000 ff1c 	bl	80029b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <prvCheckTasksWaitingTermination+0x4c>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fd6b 	bl	8000668 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <prvCheckTasksWaitingTermination+0x50>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <prvCheckTasksWaitingTermination+0x50>)
 8001b9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <prvCheckTasksWaitingTermination+0x54>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <prvCheckTasksWaitingTermination+0x54>)
 8001ba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001ba6:	f000 ff35 	bl	8002a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f80e 	bl	8001bcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <prvCheckTasksWaitingTermination+0x54>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e1      	bne.n	8001b7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000bfc 	.word	0x20000bfc
 8001bc4:	20000c28 	.word	0x20000c28
 8001bc8:	20000c10 	.word	0x20000c10

08001bcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d108      	bne.n	8001bf0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fcee 	bl	80025c4 <vPortFree>
				vPortFree( pxTCB );
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fceb 	bl	80025c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001bee:	e017      	b.n	8001c20 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d103      	bne.n	8001c02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fce2 	bl	80025c4 <vPortFree>
	}
 8001c00:	e00e      	b.n	8001c20 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d009      	beq.n	8001c20 <prvDeleteTCB+0x54>
 8001c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c10:	f383 8811 	msr	BASEPRI, r3
 8001c14:	f3bf 8f6f 	isb	sy
 8001c18:	f3bf 8f4f 	dsb	sy
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	e7fe      	b.n	8001c1e <prvDeleteTCB+0x52>
	}
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <prvResetNextTaskUnblockTime+0x40>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <prvResetNextTaskUnblockTime+0x14>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <prvResetNextTaskUnblockTime+0x16>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d004      	beq.n	8001c4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <prvResetNextTaskUnblockTime+0x44>)
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001c4a:	e008      	b.n	8001c5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <prvResetNextTaskUnblockTime+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <prvResetNextTaskUnblockTime+0x44>)
 8001c5c:	6013      	str	r3, [r2, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	20000be0 	.word	0x20000be0
 8001c6c:	20000c48 	.word	0x20000c48

08001c70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <xTaskGetSchedulerState+0x34>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	e008      	b.n	8001c96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <xTaskGetSchedulerState+0x38>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	e001      	b.n	8001c96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001c96:	687b      	ldr	r3, [r7, #4]
	}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000c34 	.word	0x20000c34
 8001ca8:	20000c50 	.word	0x20000c50

08001cac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d054      	beq.n	8001d6c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <xTaskPriorityDisinherit+0xcc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d009      	beq.n	8001ce0 <xTaskPriorityDisinherit+0x34>
 8001ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd0:	f383 8811 	msr	BASEPRI, r3
 8001cd4:	f3bf 8f6f 	isb	sy
 8001cd8:	f3bf 8f4f 	dsb	sy
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	e7fe      	b.n	8001cde <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <xTaskPriorityDisinherit+0x50>
 8001ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cec:	f383 8811 	msr	BASEPRI, r3
 8001cf0:	f3bf 8f6f 	isb	sy
 8001cf4:	f3bf 8f4f 	dsb	sy
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	e7fe      	b.n	8001cfa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d00:	1e5a      	subs	r2, r3, #1
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d02c      	beq.n	8001d6c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d128      	bne.n	8001d6c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fca2 	bl	8000668 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <xTaskPriorityDisinherit+0xd0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d903      	bls.n	8001d4c <xTaskPriorityDisinherit+0xa0>
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	4a0c      	ldr	r2, [pc, #48]	; (8001d7c <xTaskPriorityDisinherit+0xd0>)
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <xTaskPriorityDisinherit+0xd4>)
 8001d5a:	441a      	add	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4610      	mov	r0, r2
 8001d64:	f7fe fc25 	bl	80005b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001d6c:	697b      	ldr	r3, [r7, #20]
	}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000754 	.word	0x20000754
 8001d7c:	20000c30 	.word	0x20000c30
 8001d80:	20000758 	.word	0x20000758

08001d84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <prvAddCurrentTaskToDelayedList+0x90>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d94:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fc64 	bl	8000668 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da6:	d10a      	bne.n	8001dbe <prvAddCurrentTaskToDelayedList+0x3a>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d007      	beq.n	8001dbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3304      	adds	r3, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	4819      	ldr	r0, [pc, #100]	; (8001e1c <prvAddCurrentTaskToDelayedList+0x98>)
 8001db8:	f7fe fbfb 	bl	80005b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001dbc:	e026      	b.n	8001e0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d209      	bcs.n	8001dea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3304      	adds	r3, #4
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f7fe fc08 	bl	80005f8 <vListInsert>
}
 8001de8:	e010      	b.n	8001e0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <prvAddCurrentTaskToDelayedList+0x94>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	3304      	adds	r3, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f7fe fbfe 	bl	80005f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d202      	bcs.n	8001e0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8001e06:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000c2c 	.word	0x20000c2c
 8001e18:	20000754 	.word	0x20000754
 8001e1c:	20000c14 	.word	0x20000c14
 8001e20:	20000be4 	.word	0x20000be4
 8001e24:	20000be0 	.word	0x20000be0
 8001e28:	20000c48 	.word	0x20000c48

08001e2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001e36:	f000 fac3 	bl	80023c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <xTimerCreateTimerTask+0x80>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d021      	beq.n	8001e86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8001e4a:	1d3a      	adds	r2, r7, #4
 8001e4c:	f107 0108 	add.w	r1, r7, #8
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb67 	bl	8000528 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	9202      	str	r2, [sp, #8]
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	2302      	movs	r3, #2
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	460a      	mov	r2, r1
 8001e6c:	4910      	ldr	r1, [pc, #64]	; (8001eb0 <xTimerCreateTimerTask+0x84>)
 8001e6e:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <xTimerCreateTimerTask+0x88>)
 8001e70:	f7ff f8f8 	bl	8001064 <xTaskCreateStatic>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <xTimerCreateTimerTask+0x8c>)
 8001e78:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <xTimerCreateTimerTask+0x8c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8001e82:	2301      	movs	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d109      	bne.n	8001ea0 <xTimerCreateTimerTask+0x74>
 8001e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e90:	f383 8811 	msr	BASEPRI, r3
 8001e94:	f3bf 8f6f 	isb	sy
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	e7fe      	b.n	8001e9e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8001ea0:	697b      	ldr	r3, [r7, #20]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000c84 	.word	0x20000c84
 8001eb0:	0800382c 	.word	0x0800382c
 8001eb4:	08001fd5 	.word	0x08001fd5
 8001eb8:	20000c88 	.word	0x20000c88

08001ebc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <xTimerGenericCommand+0x2c>
 8001ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed8:	f383 8811 	msr	BASEPRI, r3
 8001edc:	f3bf 8f6f 	isb	sy
 8001ee0:	f3bf 8f4f 	dsb	sy
 8001ee4:	623b      	str	r3, [r7, #32]
 8001ee6:	e7fe      	b.n	8001ee6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <xTimerGenericCommand+0x94>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d02a      	beq.n	8001f46 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	dc18      	bgt.n	8001f34 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001f02:	f7ff feb5 	bl	8001c70 <xTaskGetSchedulerState>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d109      	bne.n	8001f20 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001f0c:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <xTimerGenericCommand+0x94>)
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	f107 0110 	add.w	r1, r7, #16
 8001f14:	2300      	movs	r3, #0
 8001f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f18:	f7fe fcce 	bl	80008b8 <xQueueGenericSend>
 8001f1c:	6278      	str	r0, [r7, #36]	; 0x24
 8001f1e:	e012      	b.n	8001f46 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <xTimerGenericCommand+0x94>)
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	f107 0110 	add.w	r1, r7, #16
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f7fe fcc4 	bl	80008b8 <xQueueGenericSend>
 8001f30:	6278      	str	r0, [r7, #36]	; 0x24
 8001f32:	e008      	b.n	8001f46 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <xTimerGenericCommand+0x94>)
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	f107 0110 	add.w	r1, r7, #16
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	f7fe fdb4 	bl	8000aac <xQueueGenericSendFromISR>
 8001f44:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3728      	adds	r7, #40	; 0x28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000c84 	.word	0x20000c84

08001f54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <prvProcessExpiredTimer+0x7c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fb7b 	bl	8000668 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d121      	bne.n	8001fbe <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	18d1      	adds	r1, r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	6978      	ldr	r0, [r7, #20]
 8001f88:	f000 f8c8 	bl	800211c <prvInsertTimerInActiveList>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d015      	beq.n	8001fbe <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001f92:	2300      	movs	r3, #0
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2300      	movs	r3, #0
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	6978      	ldr	r0, [r7, #20]
 8001f9e:	f7ff ff8d 	bl	8001ebc <xTimerGenericCommand>
 8001fa2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <prvProcessExpiredTimer+0x6a>
 8001faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fae:	f383 8811 	msr	BASEPRI, r3
 8001fb2:	f3bf 8f6f 	isb	sy
 8001fb6:	f3bf 8f4f 	dsb	sy
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	e7fe      	b.n	8001fbc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	4798      	blx	r3
}
 8001fc6:	bf00      	nop
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000c7c 	.word	0x20000c7c

08001fd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001fdc:	f107 0308 	add.w	r3, r7, #8
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 f857 	bl	8002094 <prvGetNextExpireTime>
 8001fe6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4619      	mov	r1, r3
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f803 	bl	8001ff8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8001ff2:	f000 f8d5 	bl	80021a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001ff6:	e7f1      	b.n	8001fdc <prvTimerTask+0x8>

08001ff8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002002:	f7ff fa5b 	bl	80014bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002006:	f107 0308 	add.w	r3, r7, #8
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f866 	bl	80020dc <prvSampleTimeNow>
 8002010:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d130      	bne.n	800207a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10a      	bne.n	8002034 <prvProcessTimerOrBlockTask+0x3c>
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	429a      	cmp	r2, r3
 8002024:	d806      	bhi.n	8002034 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002026:	f7ff fa57 	bl	80014d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800202a:	68f9      	ldr	r1, [r7, #12]
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff91 	bl	8001f54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002032:	e024      	b.n	800207e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800203a:	4b13      	ldr	r3, [pc, #76]	; (8002088 <prvProcessTimerOrBlockTask+0x90>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <prvProcessTimerOrBlockTask+0x94>)
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	f7fe ffcf 	bl	8000ffc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800205e:	f7ff fa3b 	bl	80014d8 <xTaskResumeAll>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <prvProcessTimerOrBlockTask+0x98>)
 800206a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	f3bf 8f6f 	isb	sy
}
 8002078:	e001      	b.n	800207e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800207a:	f7ff fa2d 	bl	80014d8 <xTaskResumeAll>
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000c80 	.word	0x20000c80
 800208c:	20000c84 	.word	0x20000c84
 8002090:	e000ed04 	.word	0xe000ed04

08002094 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800209c:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <prvGetNextExpireTime+0x44>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf0c      	ite	eq
 80020a6:	2301      	moveq	r3, #1
 80020a8:	2300      	movne	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d105      	bne.n	80020c6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <prvGetNextExpireTime+0x44>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e001      	b.n	80020ca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80020ca:	68fb      	ldr	r3, [r7, #12]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000c7c 	.word	0x20000c7c

080020dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80020e4:	f7ff fa94 	bl	8001610 <xTaskGetTickCount>
 80020e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <prvSampleTimeNow+0x3c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d205      	bcs.n	8002100 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80020f4:	f000 f904 	bl	8002300 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e002      	b.n	8002106 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <prvSampleTimeNow+0x3c>)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800210c:	68fb      	ldr	r3, [r7, #12]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000c8c 	.word	0x20000c8c

0800211c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	d812      	bhi.n	8002168 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	1ad2      	subs	r2, r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	429a      	cmp	r2, r3
 800214e:	d302      	bcc.n	8002156 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002150:	2301      	movs	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	e01b      	b.n	800218e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <prvInsertTimerInActiveList+0x7c>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3304      	adds	r3, #4
 800215e:	4619      	mov	r1, r3
 8002160:	4610      	mov	r0, r2
 8002162:	f7fe fa49 	bl	80005f8 <vListInsert>
 8002166:	e012      	b.n	800218e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d206      	bcs.n	800217e <prvInsertTimerInActiveList+0x62>
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d302      	bcc.n	800217e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002178:	2301      	movs	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	e007      	b.n	800218e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <prvInsertTimerInActiveList+0x80>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3304      	adds	r3, #4
 8002186:	4619      	mov	r1, r3
 8002188:	4610      	mov	r0, r2
 800218a:	f7fe fa35 	bl	80005f8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800218e:	697b      	ldr	r3, [r7, #20]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000c80 	.word	0x20000c80
 800219c:	20000c7c 	.word	0x20000c7c

080021a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	; 0x38
 80021a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80021a6:	e099      	b.n	80022dc <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	da17      	bge.n	80021de <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	3304      	adds	r3, #4
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80021b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <prvProcessReceivedCommands+0x2e>
 80021ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021be:	f383 8811 	msr	BASEPRI, r3
 80021c2:	f3bf 8f6f 	isb	sy
 80021c6:	f3bf 8f4f 	dsb	sy
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	e7fe      	b.n	80021cc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80021ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d4:	6850      	ldr	r0, [r2, #4]
 80021d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d8:	6892      	ldr	r2, [r2, #8]
 80021da:	4611      	mov	r1, r2
 80021dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	db7a      	blt.n	80022da <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80021f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f2:	3304      	adds	r3, #4
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe fa37 	bl	8000668 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80021fa:	463b      	mov	r3, r7
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff6d 	bl	80020dc <prvSampleTimeNow>
 8002202:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b09      	cmp	r3, #9
 8002208:	d868      	bhi.n	80022dc <prvProcessReceivedCommands+0x13c>
 800220a:	a201      	add	r2, pc, #4	; (adr r2, 8002210 <prvProcessReceivedCommands+0x70>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	08002239 	.word	0x08002239
 8002214:	08002239 	.word	0x08002239
 8002218:	08002239 	.word	0x08002239
 800221c:	080022dd 	.word	0x080022dd
 8002220:	08002293 	.word	0x08002293
 8002224:	080022c9 	.word	0x080022c9
 8002228:	08002239 	.word	0x08002239
 800222c:	08002239 	.word	0x08002239
 8002230:	080022dd 	.word	0x080022dd
 8002234:	08002293 	.word	0x08002293
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	18d1      	adds	r1, r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002246:	f7ff ff69 	bl	800211c <prvInsertTimerInActiveList>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d045      	beq.n	80022dc <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002256:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d13d      	bne.n	80022dc <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	441a      	add	r2, r3
 8002268:	2300      	movs	r3, #0
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2300      	movs	r3, #0
 800226e:	2100      	movs	r1, #0
 8002270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002272:	f7ff fe23 	bl	8001ebc <xTimerGenericCommand>
 8002276:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d12e      	bne.n	80022dc <prvProcessReceivedCommands+0x13c>
 800227e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002282:	f383 8811 	msr	BASEPRI, r3
 8002286:	f3bf 8f6f 	isb	sy
 800228a:	f3bf 8f4f 	dsb	sy
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	e7fe      	b.n	8002290 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002296:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d109      	bne.n	80022b4 <prvProcessReceivedCommands+0x114>
 80022a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e7fe      	b.n	80022b2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80022b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	18d1      	adds	r1, r2, r3
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022c2:	f7ff ff2b 	bl	800211c <prvInsertTimerInActiveList>
					break;
 80022c6:	e009      	b.n	80022dc <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d104      	bne.n	80022dc <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80022d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022d4:	f000 f976 	bl	80025c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80022d8:	e000      	b.n	80022dc <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80022da:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <prvProcessReceivedCommands+0x15c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	1d39      	adds	r1, r7, #4
 80022e2:	2200      	movs	r2, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fc75 	bl	8000bd4 <xQueueReceive>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f47f af5b 	bne.w	80021a8 <prvProcessReceivedCommands+0x8>
	}
}
 80022f2:	bf00      	nop
 80022f4:	3730      	adds	r7, #48	; 0x30
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000c84 	.word	0x20000c84

08002300 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002306:	e044      	b.n	8002392 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002308:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <prvSwitchTimerLists+0xb8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002312:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <prvSwitchTimerLists+0xb8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3304      	adds	r3, #4
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f9a1 	bl	8000668 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d12d      	bne.n	8002392 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	429a      	cmp	r2, r3
 8002346:	d90e      	bls.n	8002366 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002354:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <prvSwitchTimerLists+0xb8>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3304      	adds	r3, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4610      	mov	r0, r2
 8002360:	f7fe f94a 	bl	80005f8 <vListInsert>
 8002364:	e015      	b.n	8002392 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002366:	2300      	movs	r3, #0
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2300      	movs	r3, #0
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	2100      	movs	r1, #0
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f7ff fda3 	bl	8001ebc <xTimerGenericCommand>
 8002376:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <prvSwitchTimerLists+0x92>
 800237e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	e7fe      	b.n	8002390 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <prvSwitchTimerLists+0xb8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1b5      	bne.n	8002308 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <prvSwitchTimerLists+0xb8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <prvSwitchTimerLists+0xbc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <prvSwitchTimerLists+0xb8>)
 80023a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80023aa:	4a04      	ldr	r2, [pc, #16]	; (80023bc <prvSwitchTimerLists+0xbc>)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	bf00      	nop
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000c7c 	.word	0x20000c7c
 80023bc:	20000c80 	.word	0x20000c80

080023c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80023c6:	f000 faf7 	bl	80029b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <prvCheckForValidListAndQueue+0x60>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d120      	bne.n	8002414 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80023d2:	4814      	ldr	r0, [pc, #80]	; (8002424 <prvCheckForValidListAndQueue+0x64>)
 80023d4:	f7fe f8c2 	bl	800055c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80023d8:	4813      	ldr	r0, [pc, #76]	; (8002428 <prvCheckForValidListAndQueue+0x68>)
 80023da:	f7fe f8bf 	bl	800055c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <prvCheckForValidListAndQueue+0x6c>)
 80023e0:	4a10      	ldr	r2, [pc, #64]	; (8002424 <prvCheckForValidListAndQueue+0x64>)
 80023e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <prvCheckForValidListAndQueue+0x70>)
 80023e6:	4a10      	ldr	r2, [pc, #64]	; (8002428 <prvCheckForValidListAndQueue+0x68>)
 80023e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80023ea:	2300      	movs	r3, #0
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <prvCheckForValidListAndQueue+0x74>)
 80023f0:	4a11      	ldr	r2, [pc, #68]	; (8002438 <prvCheckForValidListAndQueue+0x78>)
 80023f2:	2110      	movs	r1, #16
 80023f4:	200a      	movs	r0, #10
 80023f6:	f7fe f9c9 	bl	800078c <xQueueGenericCreateStatic>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <prvCheckForValidListAndQueue+0x60>)
 80023fe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <prvCheckForValidListAndQueue+0x60>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <prvCheckForValidListAndQueue+0x60>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	490b      	ldr	r1, [pc, #44]	; (800243c <prvCheckForValidListAndQueue+0x7c>)
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fdcc 	bl	8000fac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002414:	f000 fafe 	bl	8002a14 <vPortExitCritical>
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000c84 	.word	0x20000c84
 8002424:	20000c54 	.word	0x20000c54
 8002428:	20000c68 	.word	0x20000c68
 800242c:	20000c7c 	.word	0x20000c7c
 8002430:	20000c80 	.word	0x20000c80
 8002434:	20000d30 	.word	0x20000d30
 8002438:	20000c90 	.word	0x20000c90
 800243c:	08003834 	.word	0x08003834

08002440 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800244c:	f7ff f836 	bl	80014bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002450:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <pvPortMalloc+0x170>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002458:	f000 f90c 	bl	8002674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800245c:	4b55      	ldr	r3, [pc, #340]	; (80025b4 <pvPortMalloc+0x174>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4013      	ands	r3, r2
 8002464:	2b00      	cmp	r3, #0
 8002466:	f040 808c 	bne.w	8002582 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01c      	beq.n	80024aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002470:	2208      	movs	r2, #8
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	2b00      	cmp	r3, #0
 8002480:	d013      	beq.n	80024aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f023 0307 	bic.w	r3, r3, #7
 8002488:	3308      	adds	r3, #8
 800248a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <pvPortMalloc+0x6a>
 8002496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	e7fe      	b.n	80024a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d068      	beq.n	8002582 <pvPortMalloc+0x142>
 80024b0:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <pvPortMalloc+0x178>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d863      	bhi.n	8002582 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80024ba:	4b40      	ldr	r3, [pc, #256]	; (80025bc <pvPortMalloc+0x17c>)
 80024bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80024be:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <pvPortMalloc+0x17c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024c4:	e004      	b.n	80024d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d903      	bls.n	80024e2 <pvPortMalloc+0xa2>
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f1      	bne.n	80024c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <pvPortMalloc+0x170>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d04a      	beq.n	8002582 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2208      	movs	r2, #8
 80024f2:	4413      	add	r3, r2
 80024f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	1ad2      	subs	r2, r2, r3
 8002506:	2308      	movs	r3, #8
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	429a      	cmp	r2, r3
 800250c:	d91e      	bls.n	800254c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800250e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	2b00      	cmp	r3, #0
 800251e:	d009      	beq.n	8002534 <pvPortMalloc+0xf4>
 8002520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	e7fe      	b.n	8002532 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	1ad2      	subs	r2, r2, r3
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002546:	69b8      	ldr	r0, [r7, #24]
 8002548:	f000 f8f6 	bl	8002738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <pvPortMalloc+0x178>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <pvPortMalloc+0x178>)
 8002558:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <pvPortMalloc+0x178>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <pvPortMalloc+0x180>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d203      	bcs.n	800256e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <pvPortMalloc+0x178>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <pvPortMalloc+0x180>)
 800256c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <pvPortMalloc+0x174>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	431a      	orrs	r2, r3
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002582:	f7fe ffa9 	bl	80014d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <pvPortMalloc+0x164>
 8002590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002594:	f383 8811 	msr	BASEPRI, r3
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	e7fe      	b.n	80025a2 <pvPortMalloc+0x162>
	return pvReturn;
 80025a4:	69fb      	ldr	r3, [r7, #28]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20001988 	.word	0x20001988
 80025b4:	20001994 	.word	0x20001994
 80025b8:	2000198c 	.word	0x2000198c
 80025bc:	20001980 	.word	0x20001980
 80025c0:	20001990 	.word	0x20001990

080025c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d046      	beq.n	8002664 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80025d6:	2308      	movs	r3, #8
 80025d8:	425b      	negs	r3, r3
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4413      	add	r3, r2
 80025de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	4b20      	ldr	r3, [pc, #128]	; (800266c <vPortFree+0xa8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <vPortFree+0x42>
 80025f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	e7fe      	b.n	8002604 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <vPortFree+0x5e>
 800260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	e7fe      	b.n	8002620 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <vPortFree+0xa8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d019      	beq.n	8002664 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d115      	bne.n	8002664 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <vPortFree+0xa8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	43db      	mvns	r3, r3
 8002642:	401a      	ands	r2, r3
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002648:	f7fe ff38 	bl	80014bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <vPortFree+0xac>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4413      	add	r3, r2
 8002656:	4a06      	ldr	r2, [pc, #24]	; (8002670 <vPortFree+0xac>)
 8002658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800265a:	6938      	ldr	r0, [r7, #16]
 800265c:	f000 f86c 	bl	8002738 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002660:	f7fe ff3a 	bl	80014d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002664:	bf00      	nop
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20001994 	.word	0x20001994
 8002670:	2000198c 	.word	0x2000198c

08002674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800267a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800267e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <prvHeapInit+0xac>)
 8002682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00c      	beq.n	80026a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3307      	adds	r3, #7
 8002692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f023 0307 	bic.w	r3, r3, #7
 800269a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	4a1f      	ldr	r2, [pc, #124]	; (8002720 <prvHeapInit+0xac>)
 80026a4:	4413      	add	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80026ac:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <prvHeapInit+0xb0>)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80026b2:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <prvHeapInit+0xb0>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	4413      	add	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80026c0:	2208      	movs	r2, #8
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0307 	bic.w	r3, r3, #7
 80026ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a15      	ldr	r2, [pc, #84]	; (8002728 <prvHeapInit+0xb4>)
 80026d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80026d6:	4b14      	ldr	r3, [pc, #80]	; (8002728 <prvHeapInit+0xb4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2200      	movs	r2, #0
 80026dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80026de:	4b12      	ldr	r3, [pc, #72]	; (8002728 <prvHeapInit+0xb4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	1ad2      	subs	r2, r2, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <prvHeapInit+0xb4>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <prvHeapInit+0xb8>)
 8002702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a09      	ldr	r2, [pc, #36]	; (8002730 <prvHeapInit+0xbc>)
 800270a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <prvHeapInit+0xc0>)
 800270e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002712:	601a      	str	r2, [r3, #0]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000d80 	.word	0x20000d80
 8002724:	20001980 	.word	0x20001980
 8002728:	20001988 	.word	0x20001988
 800272c:	20001990 	.word	0x20001990
 8002730:	2000198c 	.word	0x2000198c
 8002734:	20001994 	.word	0x20001994

08002738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002740:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <prvInsertBlockIntoFreeList+0xa8>)
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	e002      	b.n	800274c <prvInsertBlockIntoFreeList+0x14>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	429a      	cmp	r2, r3
 8002754:	d8f7      	bhi.n	8002746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	4413      	add	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	d108      	bne.n	800277a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	441a      	add	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	441a      	add	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d118      	bne.n	80027c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <prvInsertBlockIntoFreeList+0xac>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d00d      	beq.n	80027b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	441a      	add	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e008      	b.n	80027c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <prvInsertBlockIntoFreeList+0xac>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e003      	b.n	80027c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d002      	beq.n	80027d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	20001980 	.word	0x20001980
 80027e4:	20001988 	.word	0x20001988

080027e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3b04      	subs	r3, #4
 80027f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3b04      	subs	r3, #4
 8002806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f023 0201 	bic.w	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3b04      	subs	r3, #4
 8002816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002818:	4a08      	ldr	r2, [pc, #32]	; (800283c <pxPortInitialiseStack+0x54>)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3b14      	subs	r3, #20
 8002822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3b20      	subs	r3, #32
 800282e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002830:	68fb      	ldr	r3, [r7, #12]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	08002841 	.word	0x08002841

08002840 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <prvTaskExitError+0x4c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002852:	d009      	beq.n	8002868 <prvTaskExitError+0x28>
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e7fe      	b.n	8002866 <prvTaskExitError+0x26>
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800287a:	bf00      	nop
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0fc      	beq.n	800287c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	20000000 	.word	0x20000000

08002890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <pxCurrentTCBConst2>)
 8002892:	6819      	ldr	r1, [r3, #0]
 8002894:	6808      	ldr	r0, [r1, #0]
 8002896:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800289a:	f380 8809 	msr	PSP, r0
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f04f 0000 	mov.w	r0, #0
 80028a6:	f380 8811 	msr	BASEPRI, r0
 80028aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80028ae:	4770      	bx	lr

080028b0 <pxCurrentTCBConst2>:
 80028b0:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop

080028b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80028b8:	4806      	ldr	r0, [pc, #24]	; (80028d4 <prvPortStartFirstTask+0x1c>)
 80028ba:	6800      	ldr	r0, [r0, #0]
 80028bc:	6800      	ldr	r0, [r0, #0]
 80028be:	f380 8808 	msr	MSP, r0
 80028c2:	b662      	cpsie	i
 80028c4:	b661      	cpsie	f
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	df00      	svc	0
 80028d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80028d2:	bf00      	nop
 80028d4:	e000ed08 	.word	0xe000ed08

080028d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <xPortStartScheduler+0xcc>)
 80028e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	22ff      	movs	r2, #255	; 0xff
 80028ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <xPortStartScheduler+0xd0>)
 8002904:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002906:	4b29      	ldr	r3, [pc, #164]	; (80029ac <xPortStartScheduler+0xd4>)
 8002908:	2207      	movs	r2, #7
 800290a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800290c:	e009      	b.n	8002922 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800290e:	4b27      	ldr	r3, [pc, #156]	; (80029ac <xPortStartScheduler+0xd4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3b01      	subs	r3, #1
 8002914:	4a25      	ldr	r2, [pc, #148]	; (80029ac <xPortStartScheduler+0xd4>)
 8002916:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	b2db      	uxtb	r3, r3
 8002920:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	2b80      	cmp	r3, #128	; 0x80
 800292c:	d0ef      	beq.n	800290e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800292e:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <xPortStartScheduler+0xd4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f1c3 0307 	rsb	r3, r3, #7
 8002936:	2b04      	cmp	r3, #4
 8002938:	d009      	beq.n	800294e <xPortStartScheduler+0x76>
 800293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	e7fe      	b.n	800294c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800294e:	4b17      	ldr	r3, [pc, #92]	; (80029ac <xPortStartScheduler+0xd4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	4a15      	ldr	r2, [pc, #84]	; (80029ac <xPortStartScheduler+0xd4>)
 8002956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <xPortStartScheduler+0xd4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002960:	4a12      	ldr	r2, [pc, #72]	; (80029ac <xPortStartScheduler+0xd4>)
 8002962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800296c:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <xPortStartScheduler+0xd8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0f      	ldr	r2, [pc, #60]	; (80029b0 <xPortStartScheduler+0xd8>)
 8002972:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002978:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <xPortStartScheduler+0xd8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <xPortStartScheduler+0xd8>)
 800297e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002984:	f000 f8b0 	bl	8002ae8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <xPortStartScheduler+0xdc>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800298e:	f7ff ff93 	bl	80028b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002992:	f7fe ff09 	bl	80017a8 <vTaskSwitchContext>
	prvTaskExitError();
 8002996:	f7ff ff53 	bl	8002840 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	e000e400 	.word	0xe000e400
 80029a8:	20001998 	.word	0x20001998
 80029ac:	2000199c 	.word	0x2000199c
 80029b0:	e000ed20 	.word	0xe000ed20
 80029b4:	20000000 	.word	0x20000000

080029b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <vPortEnterCritical+0x54>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3301      	adds	r3, #1
 80029d6:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <vPortEnterCritical+0x54>)
 80029d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <vPortEnterCritical+0x54>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d10e      	bne.n	8002a00 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <vPortEnterCritical+0x58>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d009      	beq.n	8002a00 <vPortEnterCritical+0x48>
 80029ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f0:	f383 8811 	msr	BASEPRI, r3
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	e7fe      	b.n	80029fe <vPortEnterCritical+0x46>
	}
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	e000ed04 	.word	0xe000ed04

08002a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <vPortExitCritical+0x48>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <vPortExitCritical+0x22>
 8002a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a26:	f383 8811 	msr	BASEPRI, r3
 8002a2a:	f3bf 8f6f 	isb	sy
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	e7fe      	b.n	8002a34 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <vPortExitCritical+0x48>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <vPortExitCritical+0x48>)
 8002a3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <vPortExitCritical+0x48>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d104      	bne.n	8002a52 <vPortExitCritical+0x3e>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	20000000 	.word	0x20000000

08002a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002a60:	f3ef 8009 	mrs	r0, PSP
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <pxCurrentTCBConst>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002a70:	6010      	str	r0, [r2, #0]
 8002a72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002a76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002a7a:	f380 8811 	msr	BASEPRI, r0
 8002a7e:	f7fe fe93 	bl	80017a8 <vTaskSwitchContext>
 8002a82:	f04f 0000 	mov.w	r0, #0
 8002a86:	f380 8811 	msr	BASEPRI, r0
 8002a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002a8e:	6819      	ldr	r1, [r3, #0]
 8002a90:	6808      	ldr	r0, [r1, #0]
 8002a92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002a96:	f380 8809 	msr	PSP, r0
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	4770      	bx	lr

08002aa0 <pxCurrentTCBConst>:
 8002aa0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop

08002aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
	__asm volatile
 8002aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002ac0:	f7fe fdb4 	bl	800162c <xTaskIncrementTick>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <SysTick_Handler+0x3c>)
 8002acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	e000ed04 	.word	0xe000ed04

08002ae8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002aec:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <vPortSetupTimerInterrupt+0x30>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <vPortSetupTimerInterrupt+0x34>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <vPortSetupTimerInterrupt+0x38>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <vPortSetupTimerInterrupt+0x3c>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0b5b      	lsrs	r3, r3, #13
 8002b04:	4a08      	ldr	r2, [pc, #32]	; (8002b28 <vPortSetupTimerInterrupt+0x40>)
 8002b06:	3b01      	subs	r3, #1
 8002b08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002b0a:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <vPortSetupTimerInterrupt+0x30>)
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	601a      	str	r2, [r3, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	e000e010 	.word	0xe000e010
 8002b1c:	e000e018 	.word	0xe000e018
 8002b20:	20000014 	.word	0x20000014
 8002b24:	d1b71759 	.word	0xd1b71759
 8002b28:	e000e014 	.word	0xe000e014

08002b2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002b32:	f3ef 8305 	mrs	r3, IPSR
 8002b36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b0f      	cmp	r3, #15
 8002b3c:	d913      	bls.n	8002b66 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002b3e:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <vPortValidateInterruptPriority+0x68>)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <vPortValidateInterruptPriority+0x6c>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	7afa      	ldrb	r2, [r7, #11]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d209      	bcs.n	8002b66 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	e7fe      	b.n	8002b64 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <vPortValidateInterruptPriority+0x70>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <vPortValidateInterruptPriority+0x74>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d909      	bls.n	8002b8a <vPortValidateInterruptPriority+0x5e>
 8002b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7a:	f383 8811 	msr	BASEPRI, r3
 8002b7e:	f3bf 8f6f 	isb	sy
 8002b82:	f3bf 8f4f 	dsb	sy
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	e7fe      	b.n	8002b88 <vPortValidateInterruptPriority+0x5c>
	}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	e000e3f0 	.word	0xe000e3f0
 8002b98:	20001998 	.word	0x20001998
 8002b9c:	e000ed0c 	.word	0xe000ed0c
 8002ba0:	2000199c 	.word	0x2000199c

08002ba4 <_ZN7LED7segC1Ev>:
 *      Author: quocl
 */

#include <LED7seg.h>

LED7seg::LED7seg() {
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <_ZN7LED7segC1Ev+0x64>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	f8c3 2007 	str.w	r2, [r3, #7]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	22c0      	movs	r2, #192	; 0xc0
 8002bc4:	721a      	strb	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	22f9      	movs	r2, #249	; 0xf9
 8002bca:	725a      	strb	r2, [r3, #9]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	22a4      	movs	r2, #164	; 0xa4
 8002bd0:	729a      	strb	r2, [r3, #10]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	22b0      	movs	r2, #176	; 0xb0
 8002bd6:	72da      	strb	r2, [r3, #11]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2299      	movs	r2, #153	; 0x99
 8002bdc:	731a      	strb	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2292      	movs	r2, #146	; 0x92
 8002be2:	735a      	strb	r2, [r3, #13]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2282      	movs	r2, #130	; 0x82
 8002be8:	739a      	strb	r2, [r3, #14]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	22f8      	movs	r2, #248	; 0xf8
 8002bee:	73da      	strb	r2, [r3, #15]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2280      	movs	r2, #128	; 0x80
 8002bf4:	741a      	strb	r2, [r3, #16]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2290      	movs	r2, #144	; 0x90
 8002bfa:	745a      	strb	r2, [r3, #17]
	// TODO Auto-generated constructor stub

}
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	08003874 	.word	0x08003874

08002c0c <_ZN7LED7segD1Ev>:

LED7seg::~LED7seg() {
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <_ZN7LED7segD1Ev+0x1c>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	08003874 	.word	0x08003874

08002c2c <_ZN7LED7segD0Ev>:
LED7seg::~LED7seg() {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
}
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ffe9 	bl	8002c0c <_ZN7LED7segD1Ev>
 8002c3a:	2114      	movs	r1, #20
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fd53 	bl	80036e8 <_ZdlPvj>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_ZN7LED7seg10HC595_InitEv>:

void LED7seg::HC595_Init(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8002c54:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <_ZN7LED7seg10HC595_InitEv+0x28>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4a06      	ldr	r2, [pc, #24]	; (8002c74 <_ZN7LED7seg10HC595_InitEv+0x28>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6193      	str	r3, [r2, #24]
	AFIO->MAPR = AFIO_MAPR_SWJ_CFG_1;
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <_ZN7LED7seg10HC595_InitEv+0x2c>)
 8002c62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c66:	605a      	str	r2, [r3, #4]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40010000 	.word	0x40010000

08002c7c <_ZN5RF315D1Ev>:
RF315::RF315() {
	// TODO Auto-generated constructor stub

}

RF315::~RF315() {
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <_ZN5RF315D1Ev+0x1c>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	08003884 	.word	0x08003884

08002c9c <_ZN5RF315D0Ev>:
RF315::~RF315() {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
}
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff ffe9 	bl	8002c7c <_ZN5RF315D1Ev>
 8002caa:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fd1a 	bl	80036e8 <_ZdlPvj>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <_ZN5RF315C1Ethhhb>:
    0xd,  0xe,  0x13, 0x15, 0x16, 0x19, 0x1a, 0x1c,
    0x23, 0x25, 0x26, 0x29, 0x2a, 0x2c, 0x32, 0x34
};

/******************************************************************************/
RF315::RF315(uint16_t speed, uint8_t rxPin, uint8_t txPin, uint8_t pttPin, bool pttInverted)
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	4608      	mov	r0, r1
 8002cca:	4611      	mov	r1, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4603      	mov	r3, r0
 8002cd0:	807b      	strh	r3, [r7, #2]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	707b      	strb	r3, [r7, #1]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	703b      	strb	r3, [r7, #0]
    _speed(speed),
    _rxPin(rxPin),
    _txPin(txPin),
    _pttPin(pttPin),
    _pttInverted(pttInverted),
	_rxBad(0)
 8002cda:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <_ZN5RF315C1Ethhhb+0x70>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	809a      	strh	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	787a      	ldrb	r2, [r7, #1]
 8002cea:	719a      	strb	r2, [r3, #6]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	783a      	ldrb	r2, [r7, #0]
 8002cf0:	71da      	strb	r2, [r3, #7]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	7e3a      	ldrb	r2, [r7, #24]
 8002cf6:	721a      	strb	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7f3a      	ldrb	r2, [r7, #28]
 8002cfc:	729a      	strb	r2, [r3, #10]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
{
    uint8_t preamble[RH_ASK_PREAMBLE_LEN] = {0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x38, 0x2c};
 8002d06:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <_ZN5RF315C1Ethhhb+0x74>)
 8002d08:	f107 0308 	add.w	r3, r7, #8
 8002d0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d10:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(_txBuf, preamble, sizeof(preamble));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	335d      	adds	r3, #93	; 0x5d
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f107 0308 	add.w	r3, r7, #8
 8002d1e:	cb03      	ldmia	r3!, {r0, r1}
 8002d20:	6010      	str	r0, [r2, #0]
 8002d22:	6051      	str	r1, [r2, #4]
}
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	08003884 	.word	0x08003884
 8002d34:	0800383c 	.word	0x0800383c

08002d38 <_ZN5RF3154initEv>:

/******************************************************************************/
bool RF315::init()
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
    thisASKDriver = this;
 8002d40:	4a05      	ldr	r2, [pc, #20]	; (8002d58 <_ZN5RF3154initEv+0x20>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6013      	str	r3, [r2, #0]
//    RH_ASK_TX_DDR   |=  (1<<RH_ASK_TX_PIN);
//    RH_ASK_RX_DDR   &= ~(1<<RH_ASK_RX_PIN);
    // Ready to go
    setModeIdle();
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f808 	bl	8002d5c <_ZN5RF31511setModeIdleEv>
    //timerSetup();
    return true;
 8002d4c:	2301      	movs	r3, #1
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200019a0 	.word	0x200019a0

08002d5c <_ZN5RF31511setModeIdleEv>:

/******************************************************************************/
void RF315::setModeIdle()
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	if (_mode != RHModeIdle)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <_ZN5RF31511setModeIdleEv+0x36>
	{
		// Disable the transmitter hardware
		writePtt(LOW);
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fa0b 	bl	8003198 <_ZN5RF3158writePttEb>
		writeTx(LOW);
 8002d82:	2100      	movs	r1, #0
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f9f7 	bl	8003178 <_ZN5RF3157writeTxEb>
		_mode = RHModeIdle;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	}
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_ZN5RF3159setModeRxEv>:

/******************************************************************************/
void RF315::setModeRx()
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
	if (_mode != RHModeRx)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf14      	ite	ne
 8002dae:	2301      	movne	r3, #1
 8002db0:	2300      	moveq	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00b      	beq.n	8002dd0 <_ZN5RF3159setModeRxEv+0x36>
	{
		// Disable the transmitter hardware
		writePtt(LOW);
 8002db8:	2100      	movs	r1, #0
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f9ec 	bl	8003198 <_ZN5RF3158writePttEb>
		writeTx(LOW);
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f9d8 	bl	8003178 <_ZN5RF3157writeTxEb>
		_mode = RHModeRx;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2204      	movs	r2, #4
 8002dcc:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	}
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <_ZN5RF3159setModeTxEv>:
/******************************************************************************/
void RF315::setModeTx()
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	if (_mode != RHModeTx)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d013      	beq.n	8002e1e <_ZN5RF3159setModeTxEv+0x46>
	{
		// PRepare state varibles for a new transmission
		_txIndex = 0;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		_txBit = 0;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
		_txSample = 0;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		// Enable the transmitter hardware
		writePtt(HIGH);
 8002e0e:	2101      	movs	r1, #1
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f9c1 	bl	8003198 <_ZN5RF3158writePttEb>
		_mode = RHModeTx;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2203      	movs	r2, #3
 8002e1a:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	}
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <_ZN5RF3159availableEv>:
/******************************************************************************/
bool RF315::available()
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
	if (_mode == RHModeTx)return false;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	bf0c      	ite	eq
 8002e3a:	2301      	moveq	r3, #1
 8002e3c:	2300      	movne	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <_ZN5RF3159availableEv+0x22>
 8002e44:	2300      	movs	r3, #0
 8002e46:	e010      	b.n	8002e6a <_ZN5RF3159availableEv+0x44>
	setModeRx();
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff ffa6 	bl	8002d9a <_ZN5RF3159setModeRxEv>
	if (_rxBufFull)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	7adb      	ldrb	r3, [r3, #11]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <_ZN5RF3159availableEv+0x3e>
	{
		validateRxBuf();
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f9b2 	bl	80031c2 <_ZN5RF31513validateRxBufEv>
		_rxBufFull= false;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	72da      	strb	r2, [r3, #11]
	}
	return _rxBufValid;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7b1b      	ldrb	r3, [r3, #12]
 8002e68:	b2db      	uxtb	r3, r3
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <_ZN5RF3154recvEPhS0_>:
/******************************************************************************/
bool RF315::recv(uint8_t* buf, uint8_t* len)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
	if (!available())return false;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	4798      	blx	r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f083 0301 	eor.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <_ZN5RF3154recvEPhS0_+0x28>
 8002e96:	2300      	movs	r3, #0
 8002e98:	e020      	b.n	8002edc <_ZN5RF3154recvEPhS0_+0x6a>
	if (buf && len)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d019      	beq.n	8002ed4 <_ZN5RF3154recvEPhS0_+0x62>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d016      	beq.n	8002ed4 <_ZN5RF3154recvEPhS0_+0x62>
	{
		// Skip the length and 4 headers that are at the beginning of the rxBuf
		// and drop the trailing 2 bytes of FCS
		uint8_t message_len = _rxBufLen-RH_ASK_HEADER_LEN - 3;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	3b07      	subs	r3, #7
 8002eb0:	75fb      	strb	r3, [r7, #23]
		if (*len > message_len)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	7dfa      	ldrb	r2, [r7, #23]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d202      	bcs.n	8002ec2 <_ZN5RF3154recvEPhS0_+0x50>
			*len = message_len;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7dfa      	ldrb	r2, [r7, #23]
 8002ec0:	701a      	strb	r2, [r3, #0]
		memcpy(buf, _rxBuf+RH_ASK_HEADER_LEN+1, *len);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3315      	adds	r3, #21
 8002ec6:	1d59      	adds	r1, r3, #5
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68b8      	ldr	r0, [r7, #8]
 8002ed0:	f000 fc3a 	bl	8003748 <memcpy>
	}
	_rxBufValid = false; // Got the most recent message, delete it
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	731a      	strb	r2, [r3, #12]
	//    printBuffer("recv:", buf, *len);
	return true;
 8002eda:	2301      	movs	r3, #1
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_ZN5RF3154sendEPKhh>:
/******************************************************************************/
bool RF315::send(const uint8_t* data, uint8_t len)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    uint16_t index = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	83bb      	strh	r3, [r7, #28]
    uint16_t crc = 0xffff;
 8002ef6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002efa:	837b      	strh	r3, [r7, #26]
    uint8_t *p = _txBuf + RH_ASK_PREAMBLE_LEN; // start of the message area
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	335d      	adds	r3, #93	; 0x5d
 8002f00:	3308      	adds	r3, #8
 8002f02:	617b      	str	r3, [r7, #20]
    uint8_t count = len + 3 + RH_ASK_HEADER_LEN; // Added byte count and FCS and headers to get total number of bytes
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	3307      	adds	r3, #7
 8002f08:	74fb      	strb	r3, [r7, #19]

    if (len > RH_ASK_MAX_MESSAGE_LEN)return false;
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	2b3c      	cmp	r3, #60	; 0x3c
 8002f0e:	d901      	bls.n	8002f14 <_ZN5RF3154sendEPKhh+0x30>
 8002f10:	2300      	movs	r3, #0
 8002f12:	e128      	b.n	8003166 <_ZN5RF3154sendEPKhh+0x282>

    // Wait for transmitter to become available
    //this->waitPacketSent();

    // Encode the message length
    crc = RHcrc_ccitt_update(crc, count);
 8002f14:	7cfa      	ldrb	r2, [r7, #19]
 8002f16:	8b7b      	ldrh	r3, [r7, #26]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f9c3 	bl	80032a6 <_ZN5RF31518RHcrc_ccitt_updateEth>
 8002f20:	4603      	mov	r3, r0
 8002f22:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[count >> 4];
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	111a      	asrs	r2, r3, #4
 8002f28:	8bbb      	ldrh	r3, [r7, #28]
 8002f2a:	1c59      	adds	r1, r3, #1
 8002f2c:	83b9      	strh	r1, [r7, #28]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	440b      	add	r3, r1
 8002f34:	498e      	ldr	r1, [pc, #568]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 8002f36:	5c8a      	ldrb	r2, [r1, r2]
 8002f38:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[count & 0xf];
 8002f3a:	7cfb      	ldrb	r3, [r7, #19]
 8002f3c:	f003 020f 	and.w	r2, r3, #15
 8002f40:	8bbb      	ldrh	r3, [r7, #28]
 8002f42:	1c59      	adds	r1, r3, #1
 8002f44:	83b9      	strh	r1, [r7, #28]
 8002f46:	4619      	mov	r1, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	440b      	add	r3, r1
 8002f4c:	4988      	ldr	r1, [pc, #544]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 8002f4e:	5c8a      	ldrb	r2, [r1, r2]
 8002f50:	701a      	strb	r2, [r3, #0]

    // Encode the headers
    crc = RHcrc_ccitt_update(crc, _txHeaderTo);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 20ec 	ldrb.w	r2, [r3, #236]	; 0xec
 8002f58:	8b7b      	ldrh	r3, [r7, #26]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f9a2 	bl	80032a6 <_ZN5RF31518RHcrc_ccitt_updateEth>
 8002f62:	4603      	mov	r3, r0
 8002f64:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[_txHeaderTo >> 4];
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8002f6c:	111a      	asrs	r2, r3, #4
 8002f6e:	8bbb      	ldrh	r3, [r7, #28]
 8002f70:	1c59      	adds	r1, r3, #1
 8002f72:	83b9      	strh	r1, [r7, #28]
 8002f74:	4619      	mov	r1, r3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	440b      	add	r3, r1
 8002f7a:	497d      	ldr	r1, [pc, #500]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 8002f7c:	5c8a      	ldrb	r2, [r1, r2]
 8002f7e:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[_txHeaderTo & 0xf];
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8002f86:	f003 020f 	and.w	r2, r3, #15
 8002f8a:	8bbb      	ldrh	r3, [r7, #28]
 8002f8c:	1c59      	adds	r1, r3, #1
 8002f8e:	83b9      	strh	r1, [r7, #28]
 8002f90:	4619      	mov	r1, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	440b      	add	r3, r1
 8002f96:	4976      	ldr	r1, [pc, #472]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 8002f98:	5c8a      	ldrb	r2, [r1, r2]
 8002f9a:	701a      	strb	r2, [r3, #0]
    crc = RHcrc_ccitt_update(crc, _txHeaderFrom);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 20ed 	ldrb.w	r2, [r3, #237]	; 0xed
 8002fa2:	8b7b      	ldrh	r3, [r7, #26]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f97d 	bl	80032a6 <_ZN5RF31518RHcrc_ccitt_updateEth>
 8002fac:	4603      	mov	r3, r0
 8002fae:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[_txHeaderFrom >> 4];
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
 8002fb6:	111a      	asrs	r2, r3, #4
 8002fb8:	8bbb      	ldrh	r3, [r7, #28]
 8002fba:	1c59      	adds	r1, r3, #1
 8002fbc:	83b9      	strh	r1, [r7, #28]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	440b      	add	r3, r1
 8002fc4:	496a      	ldr	r1, [pc, #424]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 8002fc6:	5c8a      	ldrb	r2, [r1, r2]
 8002fc8:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[_txHeaderFrom & 0xf];
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
 8002fd0:	f003 020f 	and.w	r2, r3, #15
 8002fd4:	8bbb      	ldrh	r3, [r7, #28]
 8002fd6:	1c59      	adds	r1, r3, #1
 8002fd8:	83b9      	strh	r1, [r7, #28]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	440b      	add	r3, r1
 8002fe0:	4963      	ldr	r1, [pc, #396]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 8002fe2:	5c8a      	ldrb	r2, [r1, r2]
 8002fe4:	701a      	strb	r2, [r3, #0]
    crc = RHcrc_ccitt_update(crc, _txHeaderId);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 20ee 	ldrb.w	r2, [r3, #238]	; 0xee
 8002fec:	8b7b      	ldrh	r3, [r7, #26]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f958 	bl	80032a6 <_ZN5RF31518RHcrc_ccitt_updateEth>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[_txHeaderId >> 4];
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8003000:	111a      	asrs	r2, r3, #4
 8003002:	8bbb      	ldrh	r3, [r7, #28]
 8003004:	1c59      	adds	r1, r3, #1
 8003006:	83b9      	strh	r1, [r7, #28]
 8003008:	4619      	mov	r1, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	440b      	add	r3, r1
 800300e:	4958      	ldr	r1, [pc, #352]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 8003010:	5c8a      	ldrb	r2, [r1, r2]
 8003012:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[_txHeaderId & 0xf];
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 800301a:	f003 020f 	and.w	r2, r3, #15
 800301e:	8bbb      	ldrh	r3, [r7, #28]
 8003020:	1c59      	adds	r1, r3, #1
 8003022:	83b9      	strh	r1, [r7, #28]
 8003024:	4619      	mov	r1, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	440b      	add	r3, r1
 800302a:	4951      	ldr	r1, [pc, #324]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 800302c:	5c8a      	ldrb	r2, [r1, r2]
 800302e:	701a      	strb	r2, [r3, #0]
    crc = RHcrc_ccitt_update(crc, _txHeaderFlags);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 20ef 	ldrb.w	r2, [r3, #239]	; 0xef
 8003036:	8b7b      	ldrh	r3, [r7, #26]
 8003038:	4619      	mov	r1, r3
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f933 	bl	80032a6 <_ZN5RF31518RHcrc_ccitt_updateEth>
 8003040:	4603      	mov	r3, r0
 8003042:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[_txHeaderFlags >> 4];
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 30ef 	ldrb.w	r3, [r3, #239]	; 0xef
 800304a:	111a      	asrs	r2, r3, #4
 800304c:	8bbb      	ldrh	r3, [r7, #28]
 800304e:	1c59      	adds	r1, r3, #1
 8003050:	83b9      	strh	r1, [r7, #28]
 8003052:	4619      	mov	r1, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	440b      	add	r3, r1
 8003058:	4945      	ldr	r1, [pc, #276]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 800305a:	5c8a      	ldrb	r2, [r1, r2]
 800305c:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[_txHeaderFlags & 0xf];
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 30ef 	ldrb.w	r3, [r3, #239]	; 0xef
 8003064:	f003 020f 	and.w	r2, r3, #15
 8003068:	8bbb      	ldrh	r3, [r7, #28]
 800306a:	1c59      	adds	r1, r3, #1
 800306c:	83b9      	strh	r1, [r7, #28]
 800306e:	4619      	mov	r1, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	440b      	add	r3, r1
 8003074:	493e      	ldr	r1, [pc, #248]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 8003076:	5c8a      	ldrb	r2, [r1, r2]
 8003078:	701a      	strb	r2, [r3, #0]

    // Encode the message into 6 bit symbols. Each byte is converted into
    // 2 6-bit symbols, high nybble first, low nybble second
    for (i = 0; i < len; i++)
 800307a:	2300      	movs	r3, #0
 800307c:	77fb      	strb	r3, [r7, #31]
 800307e:	7ffa      	ldrb	r2, [r7, #31]
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	429a      	cmp	r2, r3
 8003084:	d22b      	bcs.n	80030de <_ZN5RF3154sendEPKhh+0x1fa>
    {
		crc = RHcrc_ccitt_update(crc, data[i]);
 8003086:	7ffb      	ldrb	r3, [r7, #31]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	4413      	add	r3, r2
 800308c:	781a      	ldrb	r2, [r3, #0]
 800308e:	8b7b      	ldrh	r3, [r7, #26]
 8003090:	4619      	mov	r1, r3
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f907 	bl	80032a6 <_ZN5RF31518RHcrc_ccitt_updateEth>
 8003098:	4603      	mov	r3, r0
 800309a:	837b      	strh	r3, [r7, #26]
		p[index++] = symbols[data[i] >> 4];
 800309c:	7ffb      	ldrb	r3, [r7, #31]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	4413      	add	r3, r2
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	111a      	asrs	r2, r3, #4
 80030a6:	8bbb      	ldrh	r3, [r7, #28]
 80030a8:	1c59      	adds	r1, r3, #1
 80030aa:	83b9      	strh	r1, [r7, #28]
 80030ac:	4619      	mov	r1, r3
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	440b      	add	r3, r1
 80030b2:	492f      	ldr	r1, [pc, #188]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 80030b4:	5c8a      	ldrb	r2, [r1, r2]
 80030b6:	701a      	strb	r2, [r3, #0]
		p[index++] = symbols[data[i] & 0xf];
 80030b8:	7ffb      	ldrb	r3, [r7, #31]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	4413      	add	r3, r2
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	f003 020f 	and.w	r2, r3, #15
 80030c4:	8bbb      	ldrh	r3, [r7, #28]
 80030c6:	1c59      	adds	r1, r3, #1
 80030c8:	83b9      	strh	r1, [r7, #28]
 80030ca:	4619      	mov	r1, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	440b      	add	r3, r1
 80030d0:	4927      	ldr	r1, [pc, #156]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 80030d2:	5c8a      	ldrb	r2, [r1, r2]
 80030d4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++)
 80030d6:	7ffb      	ldrb	r3, [r7, #31]
 80030d8:	3301      	adds	r3, #1
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e7cf      	b.n	800307e <_ZN5RF3154sendEPKhh+0x19a>
    }

    // Append the fcs, 16 bits before encoding (4 6-bit symbols after encoding)
    // Caution: VW expects the _ones_complement_ of the CCITT CRC-16 as the FCS
    // VW sends FCS as low byte then hi byte
    crc = ~crc;
 80030de:	8b7b      	ldrh	r3, [r7, #26]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[(crc >> 4)  & 0xf];
 80030e4:	8b7b      	ldrh	r3, [r7, #26]
 80030e6:	111b      	asrs	r3, r3, #4
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	8bbb      	ldrh	r3, [r7, #28]
 80030ee:	1c59      	adds	r1, r3, #1
 80030f0:	83b9      	strh	r1, [r7, #28]
 80030f2:	4619      	mov	r1, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	440b      	add	r3, r1
 80030f8:	491d      	ldr	r1, [pc, #116]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 80030fa:	5c8a      	ldrb	r2, [r1, r2]
 80030fc:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[crc & 0xf];
 80030fe:	8b7b      	ldrh	r3, [r7, #26]
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	8bbb      	ldrh	r3, [r7, #28]
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	83b9      	strh	r1, [r7, #28]
 800310a:	4619      	mov	r1, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	440b      	add	r3, r1
 8003110:	4917      	ldr	r1, [pc, #92]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 8003112:	5c8a      	ldrb	r2, [r1, r2]
 8003114:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[(crc >> 12) & 0xf];
 8003116:	8b7b      	ldrh	r3, [r7, #26]
 8003118:	0b1b      	lsrs	r3, r3, #12
 800311a:	b29b      	uxth	r3, r3
 800311c:	4619      	mov	r1, r3
 800311e:	8bbb      	ldrh	r3, [r7, #28]
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	83ba      	strh	r2, [r7, #28]
 8003124:	461a      	mov	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	4413      	add	r3, r2
 800312a:	4a11      	ldr	r2, [pc, #68]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 800312c:	5c52      	ldrb	r2, [r2, r1]
 800312e:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[(crc >> 8)  & 0xf];
 8003130:	8b7b      	ldrh	r3, [r7, #26]
 8003132:	121b      	asrs	r3, r3, #8
 8003134:	f003 020f 	and.w	r2, r3, #15
 8003138:	8bbb      	ldrh	r3, [r7, #28]
 800313a:	1c59      	adds	r1, r3, #1
 800313c:	83b9      	strh	r1, [r7, #28]
 800313e:	4619      	mov	r1, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	440b      	add	r3, r1
 8003144:	490a      	ldr	r1, [pc, #40]	; (8003170 <_ZN5RF3154sendEPKhh+0x28c>)
 8003146:	5c8a      	ldrb	r2, [r1, r2]
 8003148:	701a      	strb	r2, [r3, #0]

    // Total number of 6-bit symbols to send
    _txBufLen = index + RH_ASK_PREAMBLE_LEN;
 800314a:	8bbb      	ldrh	r3, [r7, #28]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	3308      	adds	r3, #8
 8003150:	b2da      	uxtb	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb

    // Start the low level interrupt handler sending symbols
    setModeTx();
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7ff fe3d 	bl	8002dd8 <_ZN5RF3159setModeTxEv>

    // FIXME
    thisASKDriver = this;
 800315e:	4a05      	ldr	r2, [pc, #20]	; (8003174 <_ZN5RF3154sendEPKhh+0x290>)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6013      	str	r3, [r2, #0]

    return true;
 8003164:	2301      	movs	r3, #1
}
 8003166:	4618      	mov	r0, r3
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000004 	.word	0x20000004
 8003174:	200019a0 	.word	0x200019a0

08003178 <_ZN5RF3157writeTxEb>:
    //return (_rxInverted ^ digitalRead(_rxPin));
	return (_rxInverted ^ digitalRead());
}
/******************************************************************************/
void RF315::writeTx(bool value)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	70fb      	strb	r3, [r7, #3]
	//digitalWrite(_txPin, value);
	this->digitalWrite(value);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	4610      	mov	r0, r2
 800318e:	4798      	blx	r3
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <_ZN5RF3158writePttEb>:
/******************************************************************************/
void RF315::writePtt(bool value)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
//    ((value) ? (RH_ASK_TX_PORT |= (1<<RH_ASK_TX_PIN)) : (RH_ASK_TX_PORT &= ~(1<<RH_ASK_TX_PIN)));
// #endif
//#else
//    digitalWrite(_pttPin, value ^ _pttInverted);
//#endif
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <_ZN5RF31516maxMessageLengthEv>:
/******************************************************************************/
uint8_t RF315::maxMessageLength()
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
    return RH_ASK_MAX_MESSAGE_LEN;
 80031b6:	233c      	movs	r3, #60	; 0x3c
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <_ZN5RF31513validateRxBufEv>:
//    return 0; // Not found
//}
/******************************************************************************/

void RF315::validateRxBuf()
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xffff;
 80031ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031ce:	81fb      	strh	r3, [r7, #14]
    // The CRC covers the byte count, headers and user data
    for (uint8_t i = 0; i < _rxBufLen; i++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	737b      	strb	r3, [r7, #13]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	7b7a      	ldrb	r2, [r7, #13]
 80031de:	429a      	cmp	r2, r3
 80031e0:	bf34      	ite	cc
 80031e2:	2301      	movcc	r3, #1
 80031e4:	2300      	movcs	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00e      	beq.n	800320a <_ZN5RF31513validateRxBufEv+0x48>
	crc = RHcrc_ccitt_update(crc, _rxBuf[i]);
 80031ec:	7b7b      	ldrb	r3, [r7, #13]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	7d5a      	ldrb	r2, [r3, #21]
 80031f4:	89fb      	ldrh	r3, [r7, #14]
 80031f6:	4619      	mov	r1, r3
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f854 	bl	80032a6 <_ZN5RF31518RHcrc_ccitt_updateEth>
 80031fe:	4603      	mov	r3, r0
 8003200:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < _rxBufLen; i++)
 8003202:	7b7b      	ldrb	r3, [r7, #13]
 8003204:	3301      	adds	r3, #1
 8003206:	737b      	strb	r3, [r7, #13]
 8003208:	e7e4      	b.n	80031d4 <_ZN5RF31513validateRxBufEv+0x12>
    if (crc != 0xf0b8) // CRC when buffer and expected CRC are CRC'd
 800320a:	89fb      	ldrh	r3, [r7, #14]
 800320c:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
 8003210:	4293      	cmp	r3, r2
 8003212:	d00c      	beq.n	800322e <_ZN5RF31513validateRxBufEv+0x6c>
    {
		// Reject and drop the message
		_rxBad++;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800321a:	b29b      	uxth	r3, r3
 800321c:	3301      	adds	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
		_rxBufValid = false;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	731a      	strb	r2, [r3, #12]
		return;
 800322c:	e038      	b.n	80032a0 <_ZN5RF31513validateRxBufEv+0xde>
    }

    // Extract the 4 headers that follow the message length
    _rxHeaderTo    = _rxBuf[1];
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	7d9a      	ldrb	r2, [r3, #22]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    _rxHeaderFrom  = _rxBuf[2];
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7dda      	ldrb	r2, [r3, #23]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
    _rxHeaderId    = _rxBuf[3];
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7e1a      	ldrb	r2, [r3, #24]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    _rxHeaderFlags = _rxBuf[4];
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7e5a      	ldrb	r2, [r3, #25]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
    if (_promiscuous || (_rxHeaderTo == _thisAddress) || (_rxHeaderTo == RH_BROADCAST_ADDRESS))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10e      	bne.n	800327e <_ZN5RF31513validateRxBufEv+0xbc>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8003266:	b2da      	uxtb	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 800326e:	429a      	cmp	r2, r3
 8003270:	d005      	beq.n	800327e <_ZN5RF31513validateRxBufEv+0xbc>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2bff      	cmp	r3, #255	; 0xff
 800327c:	d101      	bne.n	8003282 <_ZN5RF31513validateRxBufEv+0xc0>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <_ZN5RF31513validateRxBufEv+0xc2>
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00b      	beq.n	80032a0 <_ZN5RF31513validateRxBufEv+0xde>
    {
		_rxGood++;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800328e:	b29b      	uxth	r3, r3
 8003290:	3301      	adds	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		_rxBufValid = true;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	731a      	strb	r2, [r3, #12]
    }
}
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <_ZN5RF31518RHcrc_ccitt_updateEth>:
uint16_t RF315::RHcrc_ccitt_update (uint16_t crc, uint8_t data)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	807b      	strh	r3, [r7, #2]
 80032b2:	4613      	mov	r3, r2
 80032b4:	707b      	strb	r3, [r7, #1]
    data ^= lo8 (crc);
 80032b6:	887b      	ldrh	r3, [r7, #2]
 80032b8:	b25a      	sxtb	r2, r3
 80032ba:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80032be:	4053      	eors	r3, r2
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	707b      	strb	r3, [r7, #1]
    data ^= data << 4;
 80032c4:	787b      	ldrb	r3, [r7, #1]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	b25a      	sxtb	r2, r3
 80032ca:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80032ce:	4053      	eors	r3, r2
 80032d0:	b25b      	sxtb	r3, r3
 80032d2:	707b      	strb	r3, [r7, #1]
    return ((((uint16_t)data << 8) | hi8 (crc)) ^ (uint8_t)(data >> 4) ^ ((uint16_t)data << 3));
 80032d4:	787b      	ldrb	r3, [r7, #1]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	b21a      	sxth	r2, r3
 80032da:	887b      	ldrh	r3, [r7, #2]
 80032dc:	121b      	asrs	r3, r3, #8
 80032de:	b21b      	sxth	r3, r3
 80032e0:	4313      	orrs	r3, r2
 80032e2:	b21a      	sxth	r2, r3
 80032e4:	787b      	ldrb	r3, [r7, #1]
 80032e6:	111b      	asrs	r3, r3, #4
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	b21b      	sxth	r3, r3
 80032ec:	4053      	eors	r3, r2
 80032ee:	b21a      	sxth	r2, r3
 80032f0:	787b      	ldrb	r3, [r7, #1]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	b21b      	sxth	r3, r3
 80032f6:	4053      	eors	r3, r2
 80032f8:	b21b      	sxth	r3, r3
 80032fa:	b29b      	uxth	r3, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <_ZN5RF31517reg_digital_writeEPFvbE>:

/******************************************************************************/
void RF315::reg_digital_write(void (*write_fnc)(bool level))
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
	this->digitalWrite = write_fnc;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr
	...

08003324 <_Z13TM_SystemInitv>:
osThreadAttr_t myTask01_attributes;
osThreadAttr_t myTask02_attributes;
osThreadAttr_t myTask03_attributes;
/************************************************************************************/
void TM_SystemInit(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
//	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; /* Alternate Function I/O clock enabled */
//	RCC->APB1ENR |= RCC_APB1ENR_PWREN; /* Power interface clock enable */
	//__HAL_AFIO_REMAP_SWJ_NOJTAG();
	RCC->CR |= 1<<0; /* enable HSI clock */
 8003328:	4b1c      	ldr	r3, [pc, #112]	; (800339c <_Z13TM_SystemInitv+0x78>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1b      	ldr	r2, [pc, #108]	; (800339c <_Z13TM_SystemInitv+0x78>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6013      	str	r3, [r2, #0]
	while((RCC->CR & (uint32_t)(1<<1)) == 0);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <_Z13TM_SystemInitv+0x78>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d000      	beq.n	800334c <_Z13TM_SystemInitv+0x28>
 800334a:	e7f3      	b.n	8003334 <_Z13TM_SystemInitv+0x10>
	RCC->APB2ENR |= (uint32_t)(1<<2);/* I/O port A clock enable */
 800334c:	4b13      	ldr	r3, [pc, #76]	; (800339c <_Z13TM_SystemInitv+0x78>)
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	4a12      	ldr	r2, [pc, #72]	; (800339c <_Z13TM_SystemInitv+0x78>)
 8003352:	f043 0304 	orr.w	r3, r3, #4
 8003356:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (uint32_t)(1<<3);/* I/O port B clock enable */
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <_Z13TM_SystemInitv+0x78>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	4a0f      	ldr	r2, [pc, #60]	; (800339c <_Z13TM_SystemInitv+0x78>)
 800335e:	f043 0308 	orr.w	r3, r3, #8
 8003362:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (uint32_t)(1<<4);/* I/O port C clock enable */
 8003364:	4b0d      	ldr	r3, [pc, #52]	; (800339c <_Z13TM_SystemInitv+0x78>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	4a0c      	ldr	r2, [pc, #48]	; (800339c <_Z13TM_SystemInitv+0x78>)
 800336a:	f043 0310 	orr.w	r3, r3, #16
 800336e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (uint32_t)(1<<5);/* I/O port D clock enable */
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <_Z13TM_SystemInitv+0x78>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	4a09      	ldr	r2, [pc, #36]	; (800339c <_Z13TM_SystemInitv+0x78>)
 8003376:	f043 0320 	orr.w	r3, r3, #32
 800337a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (uint32_t)(1<<11);/* TIM1 */
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <_Z13TM_SystemInitv+0x78>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	4a06      	ldr	r2, [pc, #24]	; (800339c <_Z13TM_SystemInitv+0x78>)
 8003382:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003386:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (uint32_t) (1 << 14); /*Enabled clock USART1*/
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <_Z13TM_SystemInitv+0x78>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	4a03      	ldr	r2, [pc, #12]	; (800339c <_Z13TM_SystemInitv+0x78>)
 800338e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003392:	6193      	str	r3, [r2, #24]
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	40021000 	.word	0x40021000

080033a0 <_Z12TM_GPIO_Initv>:
		while((USART1->SR & (uint32_t)(1 << 6)) == 0); /*Transmission is complete*/
	}
}

void TM_GPIO_Init(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
	GPIOC->CRL |= 3UL<<0U;/* MODE */
 80033a4:	4b37      	ldr	r3, [pc, #220]	; (8003484 <_Z12TM_GPIO_Initv+0xe4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a36      	ldr	r2, [pc, #216]	; (8003484 <_Z12TM_GPIO_Initv+0xe4>)
 80033aa:	f043 0303 	orr.w	r3, r3, #3
 80033ae:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~(3UL<<2U); /*CNF*/
 80033b0:	4b34      	ldr	r3, [pc, #208]	; (8003484 <_Z12TM_GPIO_Initv+0xe4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a33      	ldr	r2, [pc, #204]	; (8003484 <_Z12TM_GPIO_Initv+0xe4>)
 80033b6:	f023 030c 	bic.w	r3, r3, #12
 80033ba:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= 3UL<<4U;/* MODE */
 80033bc:	4b31      	ldr	r3, [pc, #196]	; (8003484 <_Z12TM_GPIO_Initv+0xe4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a30      	ldr	r2, [pc, #192]	; (8003484 <_Z12TM_GPIO_Initv+0xe4>)
 80033c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80033c6:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~(3UL<<6U); /*CNF*/
 80033c8:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <_Z12TM_GPIO_Initv+0xe4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a2d      	ldr	r2, [pc, #180]	; (8003484 <_Z12TM_GPIO_Initv+0xe4>)
 80033ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033d2:	6013      	str	r3, [r2, #0]

	/*PB5*/
	GPIOB->CRL |= 3UL<<20U;/* MODE */
 80033d4:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <_Z12TM_GPIO_Initv+0xe8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2b      	ldr	r2, [pc, #172]	; (8003488 <_Z12TM_GPIO_Initv+0xe8>)
 80033da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80033de:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(3UL<<22U); /*CNF*/
 80033e0:	4b29      	ldr	r3, [pc, #164]	; (8003488 <_Z12TM_GPIO_Initv+0xe8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a28      	ldr	r2, [pc, #160]	; (8003488 <_Z12TM_GPIO_Initv+0xe8>)
 80033e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80033ea:	6013      	str	r3, [r2, #0]

	/*PB3*/
	GPIOB->CRL |= 3UL<<12U;/* MODE */
 80033ec:	4b26      	ldr	r3, [pc, #152]	; (8003488 <_Z12TM_GPIO_Initv+0xe8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a25      	ldr	r2, [pc, #148]	; (8003488 <_Z12TM_GPIO_Initv+0xe8>)
 80033f2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80033f6:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(3UL<<14U); /*CNF*/
 80033f8:	4b23      	ldr	r3, [pc, #140]	; (8003488 <_Z12TM_GPIO_Initv+0xe8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a22      	ldr	r2, [pc, #136]	; (8003488 <_Z12TM_GPIO_Initv+0xe8>)
 80033fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003402:	6013      	str	r3, [r2, #0]

	/*PD2*/
	GPIOD->CRL |= 3UL<<8U;/* MODE */
 8003404:	4b21      	ldr	r3, [pc, #132]	; (800348c <_Z12TM_GPIO_Initv+0xec>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a20      	ldr	r2, [pc, #128]	; (800348c <_Z12TM_GPIO_Initv+0xec>)
 800340a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800340e:	6013      	str	r3, [r2, #0]
	GPIOD->CRL &= ~(3UL<<10U); /*CNF*/
 8003410:	4b1e      	ldr	r3, [pc, #120]	; (800348c <_Z12TM_GPIO_Initv+0xec>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1d      	ldr	r2, [pc, #116]	; (800348c <_Z12TM_GPIO_Initv+0xec>)
 8003416:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800341a:	6013      	str	r3, [r2, #0]


	GPIOB->CRH &= ~(3UL<<10U);
 800341c:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <_Z12TM_GPIO_Initv+0xe8>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a19      	ldr	r2, [pc, #100]	; (8003488 <_Z12TM_GPIO_Initv+0xe8>)
 8003422:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003426:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (2UL<<10U); /* Input mode with pull-up/ pull-down */
 8003428:	4b17      	ldr	r3, [pc, #92]	; (8003488 <_Z12TM_GPIO_Initv+0xe8>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a16      	ldr	r2, [pc, #88]	; (8003488 <_Z12TM_GPIO_Initv+0xe8>)
 800342e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003432:	6053      	str	r3, [r2, #4]
	GPIOB->ODR |= (1UL<<10U); /* pull-up */
 8003434:	4b14      	ldr	r3, [pc, #80]	; (8003488 <_Z12TM_GPIO_Initv+0xe8>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4a13      	ldr	r2, [pc, #76]	; (8003488 <_Z12TM_GPIO_Initv+0xe8>)
 800343a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800343e:	60d3      	str	r3, [r2, #12]

	GPIOD->CRH &= ~(3UL<<0U);
 8003440:	4b12      	ldr	r3, [pc, #72]	; (800348c <_Z12TM_GPIO_Initv+0xec>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a11      	ldr	r2, [pc, #68]	; (800348c <_Z12TM_GPIO_Initv+0xec>)
 8003446:	f023 0303 	bic.w	r3, r3, #3
 800344a:	6053      	str	r3, [r2, #4]
	GPIOD->CRH |= (2UL<<0U); /* Input mode with pull-up/ pull-down */
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <_Z12TM_GPIO_Initv+0xec>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4a0e      	ldr	r2, [pc, #56]	; (800348c <_Z12TM_GPIO_Initv+0xec>)
 8003452:	f043 0302 	orr.w	r3, r3, #2
 8003456:	6053      	str	r3, [r2, #4]
	GPIOD->ODR |= (1UL<<0U); /* pull-up */
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <_Z12TM_GPIO_Initv+0xec>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a0b      	ldr	r2, [pc, #44]	; (800348c <_Z12TM_GPIO_Initv+0xec>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	60d3      	str	r3, [r2, #12]

	GPIOD->CRL |= 1UL<<4U;/* MODE */
 8003464:	4b09      	ldr	r3, [pc, #36]	; (800348c <_Z12TM_GPIO_Initv+0xec>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a08      	ldr	r2, [pc, #32]	; (800348c <_Z12TM_GPIO_Initv+0xec>)
 800346a:	f043 0310 	orr.w	r3, r3, #16
 800346e:	6013      	str	r3, [r2, #0]
	GPIOD->CRL &= ~(1UL<<6U); /*CNF*/
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <_Z12TM_GPIO_Initv+0xec>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a05      	ldr	r2, [pc, #20]	; (800348c <_Z12TM_GPIO_Initv+0xec>)
 8003476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347a:	6013      	str	r3, [r2, #0]
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	40011000 	.word	0x40011000
 8003488:	40010c00 	.word	0x40010c00
 800348c:	40011400 	.word	0x40011400

08003490 <_Z12rf315_tx_pinb>:
void StartTask02(void *argument);
void StartTask03(void *argument);
/************************************************************************************/

void rf315_tx_pin(bool level)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
	if(level == 1)GPIOD->BSRR |= 1UL<<1U;
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d006      	beq.n	80034ae <_Z12rf315_tx_pinb+0x1e>
 80034a0:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <_Z12rf315_tx_pinb+0x34>)
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	4a07      	ldr	r2, [pc, #28]	; (80034c4 <_Z12rf315_tx_pinb+0x34>)
 80034a6:	f043 0302 	orr.w	r3, r3, #2
 80034aa:	6113      	str	r3, [r2, #16]
	else GPIOD->BRR |= 1UL<<1U;
}
 80034ac:	e005      	b.n	80034ba <_Z12rf315_tx_pinb+0x2a>
	else GPIOD->BRR |= 1UL<<1U;
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <_Z12rf315_tx_pinb+0x34>)
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <_Z12rf315_tx_pinb+0x34>)
 80034b4:	f043 0302 	orr.w	r3, r3, #2
 80034b8:	6153      	str	r3, [r2, #20]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	40011400 	.word	0x40011400

080034c8 <main>:



int main(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
	rfDriver.reg_digital_write(rf315_tx_pin);
 80034cc:	491e      	ldr	r1, [pc, #120]	; (8003548 <main+0x80>)
 80034ce:	481f      	ldr	r0, [pc, #124]	; (800354c <main+0x84>)
 80034d0:	f7ff ff19 	bl	8003306 <_ZN5RF31517reg_digital_writeEPFvbE>
	myTask01_attributes.name = "myTask01";
 80034d4:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <main+0x88>)
 80034d6:	4a1f      	ldr	r2, [pc, #124]	; (8003554 <main+0x8c>)
 80034d8:	601a      	str	r2, [r3, #0]
	myTask01_attributes.priority = osPriorityNormal;
 80034da:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <main+0x88>)
 80034dc:	2218      	movs	r2, #24
 80034de:	619a      	str	r2, [r3, #24]
	myTask01_attributes.stack_size = 128 * 4;
 80034e0:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <main+0x88>)
 80034e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e6:	615a      	str	r2, [r3, #20]
	myTask02_attributes.name = "myTask02";
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <main+0x90>)
 80034ea:	4a1c      	ldr	r2, [pc, #112]	; (800355c <main+0x94>)
 80034ec:	601a      	str	r2, [r3, #0]
	myTask02_attributes.priority = osPriorityNormal;
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <main+0x90>)
 80034f0:	2218      	movs	r2, #24
 80034f2:	619a      	str	r2, [r3, #24]
	myTask02_attributes.stack_size = 128 * 4;
 80034f4:	4b18      	ldr	r3, [pc, #96]	; (8003558 <main+0x90>)
 80034f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034fa:	615a      	str	r2, [r3, #20]
	myTask03_attributes.name = "myTask02";
 80034fc:	4b18      	ldr	r3, [pc, #96]	; (8003560 <main+0x98>)
 80034fe:	4a17      	ldr	r2, [pc, #92]	; (800355c <main+0x94>)
 8003500:	601a      	str	r2, [r3, #0]
	myTask03_attributes.priority = osPriorityNormal;
 8003502:	4b17      	ldr	r3, [pc, #92]	; (8003560 <main+0x98>)
 8003504:	2218      	movs	r2, #24
 8003506:	619a      	str	r2, [r3, #24]
	myTask03_attributes.stack_size = 128 * 4;
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <main+0x98>)
 800350a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350e:	615a      	str	r2, [r3, #20]
	TM_SystemInit();
 8003510:	f7ff ff08 	bl	8003324 <_Z13TM_SystemInitv>
	TM_GPIO_Init();
 8003514:	f7ff ff44 	bl	80033a0 <_Z12TM_GPIO_Initv>
	Led7.HC595_Init();
 8003518:	4812      	ldr	r0, [pc, #72]	; (8003564 <main+0x9c>)
 800351a:	f7ff fb97 	bl	8002c4c <_ZN7LED7seg10HC595_InitEv>
//	UART_Init();
//	GPIO_Init();
	osKernelInitialize();
 800351e:	f7fc fead 	bl	800027c <osKernelInitialize>
	osThreadNew(StartTask01, NULL, &myTask01_attributes);
 8003522:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <main+0x88>)
 8003524:	2100      	movs	r1, #0
 8003526:	4810      	ldr	r0, [pc, #64]	; (8003568 <main+0xa0>)
 8003528:	f7fc ff0e 	bl	8000348 <osThreadNew>
	osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800352c:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <main+0x90>)
 800352e:	2100      	movs	r1, #0
 8003530:	480e      	ldr	r0, [pc, #56]	; (800356c <main+0xa4>)
 8003532:	f7fc ff09 	bl	8000348 <osThreadNew>
	osThreadNew(StartTask03, NULL, &myTask02_attributes);
 8003536:	4a08      	ldr	r2, [pc, #32]	; (8003558 <main+0x90>)
 8003538:	2100      	movs	r1, #0
 800353a:	480d      	ldr	r0, [pc, #52]	; (8003570 <main+0xa8>)
 800353c:	f7fc ff04 	bl	8000348 <osThreadNew>
	osKernelStart();
 8003540:	f7fc fece 	bl	80002e0 <osKernelStart>
	while (1)
 8003544:	e7fe      	b.n	8003544 <main+0x7c>
 8003546:	bf00      	nop
 8003548:	08003491 	.word	0x08003491
 800354c:	200019b8 	.word	0x200019b8
 8003550:	20001abc 	.word	0x20001abc
 8003554:	08003844 	.word	0x08003844
 8003558:	20001ae0 	.word	0x20001ae0
 800355c:	08003850 	.word	0x08003850
 8003560:	20001b04 	.word	0x20001b04
 8003564:	200019a4 	.word	0x200019a4
 8003568:	08003575 	.word	0x08003575
 800356c:	08003599 	.word	0x08003599
 8003570:	080035c9 	.word	0x080035c9

08003574 <_Z11StartTask01Pv>:
	}
}
/************************************************************************************/

void StartTask01(void *argument)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
//		Led7.Display(sync);
//		sync++; if(sync>3)sync=0;
		rfDriver.send((uint8_t *)msg, strlen(msg));
 800357c:	220e      	movs	r2, #14
 800357e:	4904      	ldr	r1, [pc, #16]	; (8003590 <_Z11StartTask01Pv+0x1c>)
 8003580:	4804      	ldr	r0, [pc, #16]	; (8003594 <_Z11StartTask01Pv+0x20>)
 8003582:	f7ff fcaf 	bl	8002ee4 <_ZN5RF3154sendEPKhh>
		//rfDriver.waitPacketSent();
		osDelay(200);
 8003586:	20c8      	movs	r0, #200	; 0xc8
 8003588:	f7fc ff88 	bl	800049c <osDelay>
		rfDriver.send((uint8_t *)msg, strlen(msg));
 800358c:	e7f6      	b.n	800357c <_Z11StartTask01Pv+0x8>
 800358e:	bf00      	nop
 8003590:	0800385c 	.word	0x0800385c
 8003594:	200019b8 	.word	0x200019b8

08003598 <_Z11StartTask02Pv>:
	}
}

void StartTask02(void *argument)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		Led7.num++;if(Led7.num>9999)Led7.num=0;
 80035a0:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <_Z11StartTask02Pv+0x2c>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	3301      	adds	r3, #1
 80035a6:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <_Z11StartTask02Pv+0x2c>)
 80035a8:	6053      	str	r3, [r2, #4]
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <_Z11StartTask02Pv+0x2c>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d902      	bls.n	80035bc <_Z11StartTask02Pv+0x24>
 80035b6:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <_Z11StartTask02Pv+0x2c>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	605a      	str	r2, [r3, #4]
		//UART1_TxMsg((uint8_t*)msg, sizeof(msg));
		osDelay(200);
 80035bc:	20c8      	movs	r0, #200	; 0xc8
 80035be:	f7fc ff6d 	bl	800049c <osDelay>
		Led7.num++;if(Led7.num>9999)Led7.num=0;
 80035c2:	e7ed      	b.n	80035a0 <_Z11StartTask02Pv+0x8>
 80035c4:	200019a4 	.word	0x200019a4

080035c8 <_Z11StartTask03Pv>:
	}
}

void StartTask03(void *argument)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		GPIOC->BSRR |= 3UL<<0U;
 80035d0:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <_Z11StartTask03Pv+0x30>)
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <_Z11StartTask03Pv+0x30>)
 80035d6:	f043 0303 	orr.w	r3, r3, #3
 80035da:	6113      	str	r3, [r2, #16]
		osDelay(200);
 80035dc:	20c8      	movs	r0, #200	; 0xc8
 80035de:	f7fc ff5d 	bl	800049c <osDelay>
		GPIOC->BRR |= 3UL<<0U;
 80035e2:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <_Z11StartTask03Pv+0x30>)
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <_Z11StartTask03Pv+0x30>)
 80035e8:	f043 0303 	orr.w	r3, r3, #3
 80035ec:	6153      	str	r3, [r2, #20]
		osDelay(200);
 80035ee:	20c8      	movs	r0, #200	; 0xc8
 80035f0:	f7fc ff54 	bl	800049c <osDelay>
		GPIOC->BSRR |= 3UL<<0U;
 80035f4:	e7ec      	b.n	80035d0 <_Z11StartTask03Pv+0x8>
 80035f6:	bf00      	nop
 80035f8:	40011000 	.word	0x40011000

080035fc <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af02      	add	r7, sp, #8
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d112      	bne.n	8003632 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003612:	4293      	cmp	r3, r2
 8003614:	d10d      	bne.n	8003632 <_Z41__static_initialization_and_destruction_0ii+0x36>
LED7seg Led7;
 8003616:	4810      	ldr	r0, [pc, #64]	; (8003658 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003618:	f7ff fac4 	bl	8002ba4 <_ZN7LED7segC1Ev>
RF315 rfDriver(2000, 0, 0 , 0);
 800361c:	2300      	movs	r3, #0
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	2300      	movs	r3, #0
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2300      	movs	r3, #0
 8003626:	2200      	movs	r2, #0
 8003628:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800362c:	480b      	ldr	r0, [pc, #44]	; (800365c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800362e:	f7ff fb47 	bl	8002cc0 <_ZN5RF315C1Ethhhb>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <_Z41__static_initialization_and_destruction_0ii+0x52>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800363e:	4293      	cmp	r3, r2
 8003640:	d105      	bne.n	800364e <_Z41__static_initialization_and_destruction_0ii+0x52>
 8003642:	4806      	ldr	r0, [pc, #24]	; (800365c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003644:	f7ff fb1a 	bl	8002c7c <_ZN5RF315D1Ev>
LED7seg Led7;
 8003648:	4803      	ldr	r0, [pc, #12]	; (8003658 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800364a:	f7ff fadf 	bl	8002c0c <_ZN7LED7segD1Ev>
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200019a4 	.word	0x200019a4
 800365c:	200019b8 	.word	0x200019b8

08003660 <_GLOBAL__sub_I_Led7>:
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
 8003664:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003668:	2001      	movs	r0, #1
 800366a:	f7ff ffc7 	bl	80035fc <_Z41__static_initialization_and_destruction_0ii>
 800366e:	bd80      	pop	{r7, pc}

08003670 <_GLOBAL__sub_D_Led7>:
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
 8003674:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003678:	2000      	movs	r0, #0
 800367a:	f7ff ffbf 	bl	80035fc <_Z41__static_initialization_and_destruction_0ii>
 800367e:	bd80      	pop	{r7, pc}

08003680 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003684:	4b15      	ldr	r3, [pc, #84]	; (80036dc <SystemInit+0x5c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a14      	ldr	r2, [pc, #80]	; (80036dc <SystemInit+0x5c>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <SystemInit+0x5c>)
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	4911      	ldr	r1, [pc, #68]	; (80036dc <SystemInit+0x5c>)
 8003696:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <SystemInit+0x60>)
 8003698:	4013      	ands	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <SystemInit+0x5c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0e      	ldr	r2, [pc, #56]	; (80036dc <SystemInit+0x5c>)
 80036a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <SystemInit+0x5c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <SystemInit+0x5c>)
 80036b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80036b8:	4b08      	ldr	r3, [pc, #32]	; (80036dc <SystemInit+0x5c>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	4a07      	ldr	r2, [pc, #28]	; (80036dc <SystemInit+0x5c>)
 80036be:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80036c2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <SystemInit+0x5c>)
 80036c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80036ca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <SystemInit+0x64>)
 80036ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036d2:	609a      	str	r2, [r3, #8]
#endif 
}
 80036d4:	bf00      	nop
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	40021000 	.word	0x40021000
 80036e0:	f8ff0000 	.word	0xf8ff0000
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <_ZdlPvj>:
 80036e8:	f000 b800 	b.w	80036ec <_ZdlPv>

080036ec <_ZdlPv>:
 80036ec:	f000 b824 	b.w	8003738 <free>

080036f0 <__libc_init_array>:
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	2500      	movs	r5, #0
 80036f4:	4e0c      	ldr	r6, [pc, #48]	; (8003728 <__libc_init_array+0x38>)
 80036f6:	4c0d      	ldr	r4, [pc, #52]	; (800372c <__libc_init_array+0x3c>)
 80036f8:	1ba4      	subs	r4, r4, r6
 80036fa:	10a4      	asrs	r4, r4, #2
 80036fc:	42a5      	cmp	r5, r4
 80036fe:	d109      	bne.n	8003714 <__libc_init_array+0x24>
 8003700:	f000 f884 	bl	800380c <_init>
 8003704:	2500      	movs	r5, #0
 8003706:	4e0a      	ldr	r6, [pc, #40]	; (8003730 <__libc_init_array+0x40>)
 8003708:	4c0a      	ldr	r4, [pc, #40]	; (8003734 <__libc_init_array+0x44>)
 800370a:	1ba4      	subs	r4, r4, r6
 800370c:	10a4      	asrs	r4, r4, #2
 800370e:	42a5      	cmp	r5, r4
 8003710:	d105      	bne.n	800371e <__libc_init_array+0x2e>
 8003712:	bd70      	pop	{r4, r5, r6, pc}
 8003714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003718:	4798      	blx	r3
 800371a:	3501      	adds	r5, #1
 800371c:	e7ee      	b.n	80036fc <__libc_init_array+0xc>
 800371e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003722:	4798      	blx	r3
 8003724:	3501      	adds	r5, #1
 8003726:	e7f2      	b.n	800370e <__libc_init_array+0x1e>
 8003728:	080038a0 	.word	0x080038a0
 800372c:	080038a0 	.word	0x080038a0
 8003730:	080038a0 	.word	0x080038a0
 8003734:	080038a8 	.word	0x080038a8

08003738 <free>:
 8003738:	4b02      	ldr	r3, [pc, #8]	; (8003744 <free+0xc>)
 800373a:	4601      	mov	r1, r0
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	f000 b817 	b.w	8003770 <_free_r>
 8003742:	bf00      	nop
 8003744:	20000018 	.word	0x20000018

08003748 <memcpy>:
 8003748:	b510      	push	{r4, lr}
 800374a:	1e43      	subs	r3, r0, #1
 800374c:	440a      	add	r2, r1
 800374e:	4291      	cmp	r1, r2
 8003750:	d100      	bne.n	8003754 <memcpy+0xc>
 8003752:	bd10      	pop	{r4, pc}
 8003754:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003758:	f803 4f01 	strb.w	r4, [r3, #1]!
 800375c:	e7f7      	b.n	800374e <memcpy+0x6>

0800375e <memset>:
 800375e:	4603      	mov	r3, r0
 8003760:	4402      	add	r2, r0
 8003762:	4293      	cmp	r3, r2
 8003764:	d100      	bne.n	8003768 <memset+0xa>
 8003766:	4770      	bx	lr
 8003768:	f803 1b01 	strb.w	r1, [r3], #1
 800376c:	e7f9      	b.n	8003762 <memset+0x4>
	...

08003770 <_free_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4605      	mov	r5, r0
 8003774:	2900      	cmp	r1, #0
 8003776:	d043      	beq.n	8003800 <_free_r+0x90>
 8003778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800377c:	1f0c      	subs	r4, r1, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	bfb8      	it	lt
 8003782:	18e4      	addlt	r4, r4, r3
 8003784:	f000 f840 	bl	8003808 <__malloc_lock>
 8003788:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <_free_r+0x94>)
 800378a:	6813      	ldr	r3, [r2, #0]
 800378c:	4610      	mov	r0, r2
 800378e:	b933      	cbnz	r3, 800379e <_free_r+0x2e>
 8003790:	6063      	str	r3, [r4, #4]
 8003792:	6014      	str	r4, [r2, #0]
 8003794:	4628      	mov	r0, r5
 8003796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800379a:	f000 b836 	b.w	800380a <__malloc_unlock>
 800379e:	42a3      	cmp	r3, r4
 80037a0:	d90b      	bls.n	80037ba <_free_r+0x4a>
 80037a2:	6821      	ldr	r1, [r4, #0]
 80037a4:	1862      	adds	r2, r4, r1
 80037a6:	4293      	cmp	r3, r2
 80037a8:	bf01      	itttt	eq
 80037aa:	681a      	ldreq	r2, [r3, #0]
 80037ac:	685b      	ldreq	r3, [r3, #4]
 80037ae:	1852      	addeq	r2, r2, r1
 80037b0:	6022      	streq	r2, [r4, #0]
 80037b2:	6063      	str	r3, [r4, #4]
 80037b4:	6004      	str	r4, [r0, #0]
 80037b6:	e7ed      	b.n	8003794 <_free_r+0x24>
 80037b8:	4613      	mov	r3, r2
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	b10a      	cbz	r2, 80037c2 <_free_r+0x52>
 80037be:	42a2      	cmp	r2, r4
 80037c0:	d9fa      	bls.n	80037b8 <_free_r+0x48>
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	1858      	adds	r0, r3, r1
 80037c6:	42a0      	cmp	r0, r4
 80037c8:	d10b      	bne.n	80037e2 <_free_r+0x72>
 80037ca:	6820      	ldr	r0, [r4, #0]
 80037cc:	4401      	add	r1, r0
 80037ce:	1858      	adds	r0, r3, r1
 80037d0:	4282      	cmp	r2, r0
 80037d2:	6019      	str	r1, [r3, #0]
 80037d4:	d1de      	bne.n	8003794 <_free_r+0x24>
 80037d6:	6810      	ldr	r0, [r2, #0]
 80037d8:	6852      	ldr	r2, [r2, #4]
 80037da:	4401      	add	r1, r0
 80037dc:	6019      	str	r1, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	e7d8      	b.n	8003794 <_free_r+0x24>
 80037e2:	d902      	bls.n	80037ea <_free_r+0x7a>
 80037e4:	230c      	movs	r3, #12
 80037e6:	602b      	str	r3, [r5, #0]
 80037e8:	e7d4      	b.n	8003794 <_free_r+0x24>
 80037ea:	6820      	ldr	r0, [r4, #0]
 80037ec:	1821      	adds	r1, r4, r0
 80037ee:	428a      	cmp	r2, r1
 80037f0:	bf01      	itttt	eq
 80037f2:	6811      	ldreq	r1, [r2, #0]
 80037f4:	6852      	ldreq	r2, [r2, #4]
 80037f6:	1809      	addeq	r1, r1, r0
 80037f8:	6021      	streq	r1, [r4, #0]
 80037fa:	6062      	str	r2, [r4, #4]
 80037fc:	605c      	str	r4, [r3, #4]
 80037fe:	e7c9      	b.n	8003794 <_free_r+0x24>
 8003800:	bd38      	pop	{r3, r4, r5, pc}
 8003802:	bf00      	nop
 8003804:	20001b28 	.word	0x20001b28

08003808 <__malloc_lock>:
 8003808:	4770      	bx	lr

0800380a <__malloc_unlock>:
 800380a:	4770      	bx	lr

0800380c <_init>:
 800380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380e:	bf00      	nop
 8003810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003812:	bc08      	pop	{r3}
 8003814:	469e      	mov	lr, r3
 8003816:	4770      	bx	lr

08003818 <_fini>:
 8003818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381a:	bf00      	nop
 800381c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381e:	bc08      	pop	{r3}
 8003820:	469e      	mov	lr, r3
 8003822:	4770      	bx	lr
